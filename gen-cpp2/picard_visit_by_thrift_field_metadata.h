/**
 * Autogenerated by Thrift for picard.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "picard_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByThriftId<::cpp2::SQLSchema> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).columnNames_ref());
    case 2:
      return f(1, static_cast<T&&>(t).columnTypes_ref());
    case 3:
      return f(2, static_cast<T&&>(t).tableNames_ref());
    case 4:
      return f(3, static_cast<T&&>(t).columnToTable_ref());
    case 5:
      return f(4, static_cast<T&&>(t).tableToColumns_ref());
    case 6:
      return f(5, static_cast<T&&>(t).foreignKeys_ref());
    case 7:
      return f(6, static_cast<T&&>(t).primaryKeys_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::SQLSchema");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::RegisterSQLSchemaException> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).dbId_ref());
    case 2:
      return f(1, static_cast<T&&>(t).message_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::RegisterSQLSchemaException");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::RegisterTokenizerException> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).message_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::RegisterTokenizerException");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::TokenizerNotRegisteredException> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).message_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::TokenizerNotRegisteredException");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::TokenizerPrefixException> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).message_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::TokenizerPrefixException");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::ModeException> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).message_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::ModeException");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::FeedFatalException> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).tokenizerNotRegisteredException_ref());
    case 2:
      return f(1, static_cast<T&&>(t).tokenizerPrefixException_ref());
    case 3:
      return f(2, static_cast<T&&>(t).modeException_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::FeedFatalException");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::FeedException> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).feedFatalException_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::FeedException");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::FeedParseFailure> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).input_ref());
    case 2:
      return f(1, static_cast<T&&>(t).contexts_ref());
    case 3:
      return f(2, static_cast<T&&>(t).description_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::FeedParseFailure");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::FeedTimeoutFailure> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).message_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::FeedTimeoutFailure");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::FeedPartialSuccess> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    default:
      throwInvalidThriftId(id, "::cpp2::FeedPartialSuccess");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::FeedCompleteSuccess> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).leftover_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::FeedCompleteSuccess");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::FeedResult> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).feedParseFailure_ref());
    case 2:
      return f(1, static_cast<T&&>(t).feedTimeoutFailure_ref());
    case 3:
      return f(2, static_cast<T&&>(t).feedPartialSuccess_ref());
    case 4:
      return f(3, static_cast<T&&>(t).feedCompleteSuccess_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::FeedResult");
    }
  }
};

template <>
struct VisitByThriftId<::cpp2::BatchFeedResult> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, size_t id, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (id) {
    case 1:
      return f(0, static_cast<T&&>(t).batchId_ref());
    case 2:
      return f(1, static_cast<T&&>(t).topToken_ref());
    case 3:
      return f(2, static_cast<T&&>(t).feedResult_ref());
    default:
      throwInvalidThriftId(id, "::cpp2::BatchFeedResult");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
