/**
 * Autogenerated by Thrift for picard.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Picard.h"
#include "Picard.tcc"
#include "picard_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

namespace cpp2 {
std::unique_ptr<apache::thrift::AsyncProcessor> PicardSvIf::getProcessor() {
  return std::make_unique<PicardAsyncProcessor>(this);
}


void PicardSvIf::registerSQLSchema(std::unique_ptr<::cpp2::DBId> /*dbId*/, std::unique_ptr<::cpp2::SQLSchema> /*sqlSchema*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("registerSQLSchema");
}

folly::SemiFuture<folly::Unit> PicardSvIf::semifuture_registerSQLSchema(std::unique_ptr<::cpp2::DBId> p_dbId, std::unique_ptr<::cpp2::SQLSchema> p_sqlSchema) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_registerSQLSchema.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Sync, std::memory_order_relaxed);
  return apache::thrift::detail::si::semifuture([&] {
    return registerSQLSchema(std::move(p_dbId), std::move(p_sqlSchema));
  });
}

folly::Future<folly::Unit> PicardSvIf::future_registerSQLSchema(std::unique_ptr<::cpp2::DBId> p_dbId, std::unique_ptr<::cpp2::SQLSchema> p_sqlSchema) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_registerSQLSchema.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::SemiFuture, std::memory_order_relaxed);
  auto ka = getThreadManager()->getKeepAlive(getRequestContext()->getRequestExecutionScope(), apache::thrift::concurrency::ThreadManager::Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_registerSQLSchema(std::move(p_dbId), std::move(p_sqlSchema)), std::move(ka));
}

void PicardSvIf::async_tm_registerSQLSchema(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, std::unique_ptr<::cpp2::DBId> p_dbId, std::unique_ptr<::cpp2::SQLSchema> p_sqlSchema) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we set that up
  // for all cases.
  apache::thrift::detail::si::async_tm_prep(this, callback.get());
  switch (__fbthrift_invocation_registerSQLSchema.load(std::memory_order_relaxed)) {
    case apache::thrift::detail::si::InvocationType::AsyncTm:
    {
      auto expected{apache::thrift::detail::si::InvocationType::AsyncTm};
      __fbthrift_invocation_registerSQLSchema.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Future, std::memory_order_relaxed);
      apache::thrift::detail::si::async_tm_future(std::move(callback), [&] {
        return future_registerSQLSchema(std::move(p_dbId), std::move(p_sqlSchema));
      });
      return;
    }
    case apache::thrift::detail::si::InvocationType::SemiFuture:
    {
      apache::thrift::detail::si::async_tm_semifuture(std::move(callback), [&] {
        return semifuture_registerSQLSchema(std::move(p_dbId), std::move(p_sqlSchema)); });
      return;
    }
    case apache::thrift::detail::si::InvocationType::Sync:
    {
      try {
        registerSQLSchema(std::move(p_dbId), std::move(p_sqlSchema));
        callback->done();
      } catch (...) {
        callback->exception(std::current_exception());
      }
      return;
    }
    case apache::thrift::detail::si::InvocationType::Future:
    {
      apache::thrift::detail::si::async_tm_future(std::move(callback), [&] {
        return future_registerSQLSchema(std::move(p_dbId), std::move(p_sqlSchema));
      });
      return;
    }
    default:
    {
      folly::assume_unreachable();
    }
  }
}

void PicardSvIf::registerTokenizer(std::unique_ptr<::std::string> /*jsonConfig*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("registerTokenizer");
}

folly::SemiFuture<folly::Unit> PicardSvIf::semifuture_registerTokenizer(std::unique_ptr<::std::string> p_jsonConfig) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_registerTokenizer.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Sync, std::memory_order_relaxed);
  return apache::thrift::detail::si::semifuture([&] {
    return registerTokenizer(std::move(p_jsonConfig));
  });
}

folly::Future<folly::Unit> PicardSvIf::future_registerTokenizer(std::unique_ptr<::std::string> p_jsonConfig) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_registerTokenizer.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::SemiFuture, std::memory_order_relaxed);
  auto ka = getThreadManager()->getKeepAlive(getRequestContext()->getRequestExecutionScope(), apache::thrift::concurrency::ThreadManager::Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_registerTokenizer(std::move(p_jsonConfig)), std::move(ka));
}

void PicardSvIf::async_tm_registerTokenizer(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, std::unique_ptr<::std::string> p_jsonConfig) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we set that up
  // for all cases.
  apache::thrift::detail::si::async_tm_prep(this, callback.get());
  switch (__fbthrift_invocation_registerTokenizer.load(std::memory_order_relaxed)) {
    case apache::thrift::detail::si::InvocationType::AsyncTm:
    {
      auto expected{apache::thrift::detail::si::InvocationType::AsyncTm};
      __fbthrift_invocation_registerTokenizer.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Future, std::memory_order_relaxed);
      apache::thrift::detail::si::async_tm_future(std::move(callback), [&] {
        return future_registerTokenizer(std::move(p_jsonConfig));
      });
      return;
    }
    case apache::thrift::detail::si::InvocationType::SemiFuture:
    {
      apache::thrift::detail::si::async_tm_semifuture(std::move(callback), [&] {
        return semifuture_registerTokenizer(std::move(p_jsonConfig)); });
      return;
    }
    case apache::thrift::detail::si::InvocationType::Sync:
    {
      try {
        registerTokenizer(std::move(p_jsonConfig));
        callback->done();
      } catch (...) {
        callback->exception(std::current_exception());
      }
      return;
    }
    case apache::thrift::detail::si::InvocationType::Future:
    {
      apache::thrift::detail::si::async_tm_future(std::move(callback), [&] {
        return future_registerTokenizer(std::move(p_jsonConfig));
      });
      return;
    }
    default:
    {
      folly::assume_unreachable();
    }
  }
}

void PicardSvIf::feed(::cpp2::FeedResult& /*_return*/, std::unique_ptr<::cpp2::InputIds> /*inputIds*/, ::cpp2::Token /*token*/, ::cpp2::Mode /*mode*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("feed");
}

folly::SemiFuture<std::unique_ptr<::cpp2::FeedResult>> PicardSvIf::semifuture_feed(std::unique_ptr<::cpp2::InputIds> p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_feed.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Sync, std::memory_order_relaxed);
  return apache::thrift::detail::si::semifuture_returning_uptr([&](::cpp2::FeedResult& _return) { feed(_return, std::move(p_inputIds), p_token, p_mode); });
}

folly::Future<std::unique_ptr<::cpp2::FeedResult>> PicardSvIf::future_feed(std::unique_ptr<::cpp2::InputIds> p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_feed.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::SemiFuture, std::memory_order_relaxed);
  auto ka = getThreadManager()->getKeepAlive(getRequestContext()->getRequestExecutionScope(), apache::thrift::concurrency::ThreadManager::Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_feed(std::move(p_inputIds), p_token, p_mode), std::move(ka));
}

void PicardSvIf::async_tm_feed(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::cpp2::FeedResult>>> callback, std::unique_ptr<::cpp2::InputIds> p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we set that up
  // for all cases.
  apache::thrift::detail::si::async_tm_prep(this, callback.get());
  switch (__fbthrift_invocation_feed.load(std::memory_order_relaxed)) {
    case apache::thrift::detail::si::InvocationType::AsyncTm:
    {
      auto expected{apache::thrift::detail::si::InvocationType::AsyncTm};
      __fbthrift_invocation_feed.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Future, std::memory_order_relaxed);
      apache::thrift::detail::si::async_tm_future(std::move(callback), [&] {
        return future_feed(std::move(p_inputIds), p_token, p_mode);
      });
      return;
    }
    case apache::thrift::detail::si::InvocationType::SemiFuture:
    {
      apache::thrift::detail::si::async_tm_semifuture(std::move(callback), [&] {
        return semifuture_feed(std::move(p_inputIds), p_token, p_mode); });
      return;
    }
    case apache::thrift::detail::si::InvocationType::Sync:
    {
      try {
        ::cpp2::FeedResult _return;
        feed(_return, std::move(p_inputIds), p_token, p_mode);
        callback->result(_return);
      } catch (...) {
        callback->exception(std::current_exception());
      }
      return;
    }
    case apache::thrift::detail::si::InvocationType::Future:
    {
      apache::thrift::detail::si::async_tm_future(std::move(callback), [&] {
        return future_feed(std::move(p_inputIds), p_token, p_mode);
      });
      return;
    }
    default:
    {
      folly::assume_unreachable();
    }
  }
}

void PicardSvIf::batchFeed(::std::vector<::cpp2::BatchFeedResult>& /*_return*/, std::unique_ptr<::std::vector<::cpp2::InputIds>> /*inputIds*/, std::unique_ptr<::std::vector<::std::vector<::cpp2::Token>>> /*topTokens*/, ::cpp2::Mode /*mode*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("batchFeed");
}

folly::SemiFuture<std::unique_ptr<::std::vector<::cpp2::BatchFeedResult>>> PicardSvIf::semifuture_batchFeed(std::unique_ptr<::std::vector<::cpp2::InputIds>> p_inputIds, std::unique_ptr<::std::vector<::std::vector<::cpp2::Token>>> p_topTokens, ::cpp2::Mode p_mode) {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_batchFeed.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Sync, std::memory_order_relaxed);
  return apache::thrift::detail::si::semifuture_returning_uptr([&](::std::vector<::cpp2::BatchFeedResult>& _return) { batchFeed(_return, std::move(p_inputIds), std::move(p_topTokens), p_mode); });
}

folly::Future<std::unique_ptr<::std::vector<::cpp2::BatchFeedResult>>> PicardSvIf::future_batchFeed(std::unique_ptr<::std::vector<::cpp2::InputIds>> p_inputIds, std::unique_ptr<::std::vector<::std::vector<::cpp2::Token>>> p_topTokens, ::cpp2::Mode p_mode) {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_batchFeed.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::SemiFuture, std::memory_order_relaxed);
  auto ka = getThreadManager()->getKeepAlive(getRequestContext()->getRequestExecutionScope(), apache::thrift::concurrency::ThreadManager::Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_batchFeed(std::move(p_inputIds), std::move(p_topTokens), p_mode), std::move(ka));
}

void PicardSvIf::async_tm_batchFeed(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::std::vector<::cpp2::BatchFeedResult>>>> callback, std::unique_ptr<::std::vector<::cpp2::InputIds>> p_inputIds, std::unique_ptr<::std::vector<::std::vector<::cpp2::Token>>> p_topTokens, ::cpp2::Mode p_mode) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we set that up
  // for all cases.
  apache::thrift::detail::si::async_tm_prep(this, callback.get());
  switch (__fbthrift_invocation_batchFeed.load(std::memory_order_relaxed)) {
    case apache::thrift::detail::si::InvocationType::AsyncTm:
    {
      auto expected{apache::thrift::detail::si::InvocationType::AsyncTm};
      __fbthrift_invocation_batchFeed.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Future, std::memory_order_relaxed);
      apache::thrift::detail::si::async_tm_future(std::move(callback), [&] {
        return future_batchFeed(std::move(p_inputIds), std::move(p_topTokens), p_mode);
      });
      return;
    }
    case apache::thrift::detail::si::InvocationType::SemiFuture:
    {
      apache::thrift::detail::si::async_tm_semifuture(std::move(callback), [&] {
        return semifuture_batchFeed(std::move(p_inputIds), std::move(p_topTokens), p_mode); });
      return;
    }
    case apache::thrift::detail::si::InvocationType::Sync:
    {
      try {
        ::std::vector<::cpp2::BatchFeedResult> _return;
        batchFeed(_return, std::move(p_inputIds), std::move(p_topTokens), p_mode);
        callback->result(_return);
      } catch (...) {
        callback->exception(std::current_exception());
      }
      return;
    }
    case apache::thrift::detail::si::InvocationType::Future:
    {
      apache::thrift::detail::si::async_tm_future(std::move(callback), [&] {
        return future_batchFeed(std::move(p_inputIds), std::move(p_topTokens), p_mode);
      });
      return;
    }
    default:
    {
      folly::assume_unreachable();
    }
  }
}

void PicardSvNull::registerSQLSchema(std::unique_ptr<::cpp2::DBId> /*dbId*/, std::unique_ptr<::cpp2::SQLSchema> /*sqlSchema*/) {
  return;
}

void PicardSvNull::registerTokenizer(std::unique_ptr<::std::string> /*jsonConfig*/) {
  return;
}

void PicardSvNull::feed(::cpp2::FeedResult& /*_return*/, std::unique_ptr<::cpp2::InputIds> /*inputIds*/, ::cpp2::Token /*token*/, ::cpp2::Mode /*mode*/) {}

void PicardSvNull::batchFeed(::std::vector<::cpp2::BatchFeedResult>& /*_return*/, std::unique_ptr<::std::vector<::cpp2::InputIds>> /*inputIds*/, std::unique_ptr<::std::vector<::std::vector<::cpp2::Token>>> /*topTokens*/, ::cpp2::Mode /*mode*/) {}



const char* PicardAsyncProcessor::getServiceName() {
  return "Picard";
}

void PicardAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<PicardSvIf>::gen(*response.metadata_ref(), *response.context_ref());
}

void PicardAsyncProcessor::processSerializedCompressedRequest(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(serializedRequest), protType, context, eb, tm);
}

std::shared_ptr<folly::RequestContext> PicardAsyncProcessor::getBaseContextForRequest() {
  return iface_->getBaseContextForRequest();
}

const PicardAsyncProcessor::ProcessMap& PicardAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const PicardAsyncProcessor::ProcessMap PicardAsyncProcessor::binaryProcessMap_ {
  {"registerSQLSchema", &PicardAsyncProcessor::setUpAndProcess_registerSQLSchema<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"registerTokenizer", &PicardAsyncProcessor::setUpAndProcess_registerTokenizer<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"feed", &PicardAsyncProcessor::setUpAndProcess_feed<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"batchFeed", &PicardAsyncProcessor::setUpAndProcess_batchFeed<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const PicardAsyncProcessor::ProcessMap& PicardAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const PicardAsyncProcessor::ProcessMap PicardAsyncProcessor::compactProcessMap_ {
  {"registerSQLSchema", &PicardAsyncProcessor::setUpAndProcess_registerSQLSchema<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"registerTokenizer", &PicardAsyncProcessor::setUpAndProcess_registerTokenizer<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"feed", &PicardAsyncProcessor::setUpAndProcess_feed<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"batchFeed", &PicardAsyncProcessor::setUpAndProcess_batchFeed<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

} // cpp2
