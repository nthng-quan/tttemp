/**
 * Autogenerated by Thrift for picard.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "picard_metadata.h"
#include <thrift/lib/cpp2/visitation/for_each.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct ForEachField<::cpp2::SQLSchema> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).columnNames_ref()...);
    f(1, static_cast<T&&>(t).columnTypes_ref()...);
    f(2, static_cast<T&&>(t).tableNames_ref()...);
    f(3, static_cast<T&&>(t).columnToTable_ref()...);
    f(4, static_cast<T&&>(t).tableToColumns_ref()...);
    f(5, static_cast<T&&>(t).foreignKeys_ref()...);
    f(6, static_cast<T&&>(t).primaryKeys_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::RegisterSQLSchemaException> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).dbId_ref()...);
    f(1, static_cast<T&&>(t).message_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::RegisterTokenizerException> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).message_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::TokenizerNotRegisteredException> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).message_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::TokenizerPrefixException> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).message_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::ModeException> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).message_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::FeedFatalException> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).tokenizerNotRegisteredException_ref()...);
    f(1, static_cast<T&&>(t).tokenizerPrefixException_ref()...);
    f(2, static_cast<T&&>(t).modeException_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::FeedException> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).feedFatalException_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::FeedParseFailure> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).input_ref()...);
    f(1, static_cast<T&&>(t).contexts_ref()...);
    f(2, static_cast<T&&>(t).description_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::FeedTimeoutFailure> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).message_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::FeedPartialSuccess> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
  }
};

template <>
struct ForEachField<::cpp2::FeedCompleteSuccess> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).leftover_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::FeedResult> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).feedParseFailure_ref()...);
    f(1, static_cast<T&&>(t).feedTimeoutFailure_ref()...);
    f(2, static_cast<T&&>(t).feedPartialSuccess_ref()...);
    f(3, static_cast<T&&>(t).feedCompleteSuccess_ref()...);
  }
};

template <>
struct ForEachField<::cpp2::BatchFeedResult> {
  template <typename F, typename... T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, FOLLY_MAYBE_UNUSED T&&... t) const {
    f(0, static_cast<T&&>(t).batchId_ref()...);
    f(1, static_cast<T&&>(t).topToken_ref()...);
    f(2, static_cast<T&&>(t).feedResult_ref()...);
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
