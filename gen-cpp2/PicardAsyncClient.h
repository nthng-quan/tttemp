/**
 * Autogenerated by Thrift for picard.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/gen/client_h.h>

#include "picard_types.h"

namespace apache { namespace thrift {
  class Cpp2RequestContext;
  namespace detail { namespace ac { struct ClientRequestContext; }}
  namespace transport { class THeader; }
}}

namespace cpp2 {

class PicardAsyncClient : public apache::thrift::GeneratedAsyncClient {
 public:
  using apache::thrift::GeneratedAsyncClient::GeneratedAsyncClient;

  char const* getServiceName() const noexcept override {
    return "Picard";
  }


  virtual void registerSQLSchema(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema);
  virtual void registerSQLSchema(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema);
 protected:
  void registerSQLSchemaImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema);
 public:

  virtual void sync_registerSQLSchema(const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema);
  virtual void sync_registerSQLSchema(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema);

  virtual folly::Future<folly::Unit> future_registerSQLSchema(const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema);
  virtual folly::SemiFuture<folly::Unit> semifuture_registerSQLSchema(const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema);
  virtual folly::Future<folly::Unit> future_registerSQLSchema(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema);
  virtual folly::SemiFuture<folly::Unit> semifuture_registerSQLSchema(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema);
  virtual folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_registerSQLSchema(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema);
  virtual folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_registerSQLSchema(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task<void> co_registerSQLSchema(const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
    return co_registerSQLSchema<false>(nullptr, p_dbId, p_sqlSchema);
  }
  template <int = 0>
  folly::coro::Task<void> co_registerSQLSchema(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
    return co_registerSQLSchema<true>(&rpcOptions, p_dbId, p_sqlSchema);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<void> co_registerSQLSchema(apache::thrift::RpcOptions* rpcOptions, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = registerSQLSchemaCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      registerSQLSchemaImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_dbId, p_sqlSchema);
    } else {
      registerSQLSchemaImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_dbId, p_sqlSchema);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
    if (auto ew = recv_wrapped_registerSQLSchema(returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void registerSQLSchema(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema);


  static folly::exception_wrapper recv_wrapped_registerSQLSchema(::apache::thrift::ClientReceiveState& state);
  static void recv_registerSQLSchema(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_registerSQLSchema(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_registerSQLSchema(::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void registerSQLSchemaT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> registerSQLSchemaCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void registerTokenizer(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_jsonConfig);
  virtual void registerTokenizer(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_jsonConfig);
 protected:
  void registerTokenizerImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::std::string& p_jsonConfig);
 public:

  virtual void sync_registerTokenizer(const ::std::string& p_jsonConfig);
  virtual void sync_registerTokenizer(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_jsonConfig);

  virtual folly::Future<folly::Unit> future_registerTokenizer(const ::std::string& p_jsonConfig);
  virtual folly::SemiFuture<folly::Unit> semifuture_registerTokenizer(const ::std::string& p_jsonConfig);
  virtual folly::Future<folly::Unit> future_registerTokenizer(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_jsonConfig);
  virtual folly::SemiFuture<folly::Unit> semifuture_registerTokenizer(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_jsonConfig);
  virtual folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_registerTokenizer(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_jsonConfig);
  virtual folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_registerTokenizer(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_jsonConfig);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task<void> co_registerTokenizer(const ::std::string& p_jsonConfig) {
    return co_registerTokenizer<false>(nullptr, p_jsonConfig);
  }
  template <int = 0>
  folly::coro::Task<void> co_registerTokenizer(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_jsonConfig) {
    return co_registerTokenizer<true>(&rpcOptions, p_jsonConfig);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<void> co_registerTokenizer(apache::thrift::RpcOptions* rpcOptions, const ::std::string& p_jsonConfig) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = registerTokenizerCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      registerTokenizerImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_jsonConfig);
    } else {
      registerTokenizerImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_jsonConfig);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
    if (auto ew = recv_wrapped_registerTokenizer(returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void registerTokenizer(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::std::string& p_jsonConfig);


  static folly::exception_wrapper recv_wrapped_registerTokenizer(::apache::thrift::ClientReceiveState& state);
  static void recv_registerTokenizer(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_registerTokenizer(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_registerTokenizer(::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void registerTokenizerT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::std::string& p_jsonConfig);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> registerTokenizerCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void feed(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode);
  virtual void feed(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode);
 protected:
  void feedImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode);
 public:

  virtual void sync_feed(::cpp2::FeedResult& _return, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode);
  virtual void sync_feed(apache::thrift::RpcOptions& rpcOptions, ::cpp2::FeedResult& _return, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode);

  virtual folly::Future<::cpp2::FeedResult> future_feed(const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode);
  virtual folly::SemiFuture<::cpp2::FeedResult> semifuture_feed(const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode);
  virtual folly::Future<::cpp2::FeedResult> future_feed(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode);
  virtual folly::SemiFuture<::cpp2::FeedResult> semifuture_feed(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode);
  virtual folly::Future<std::pair<::cpp2::FeedResult, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_feed(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode);
  virtual folly::SemiFuture<std::pair<::cpp2::FeedResult, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_feed(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task<::cpp2::FeedResult> co_feed(const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
    return co_feed<false>(nullptr, p_inputIds, p_token, p_mode);
  }
  template <int = 0>
  folly::coro::Task<::cpp2::FeedResult> co_feed(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
    return co_feed<true>(&rpcOptions, p_inputIds, p_token, p_mode);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<::cpp2::FeedResult> co_feed(apache::thrift::RpcOptions* rpcOptions, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = feedCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      feedImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_inputIds, p_token, p_mode);
    } else {
      feedImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_inputIds, p_token, p_mode);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
    ::cpp2::FeedResult _return;
    if (auto ew = recv_wrapped_feed(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void feed(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode);


  static folly::exception_wrapper recv_wrapped_feed(::cpp2::FeedResult& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_feed(::cpp2::FeedResult& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_feed(::cpp2::FeedResult& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_feed(::cpp2::FeedResult& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void feedT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> feedCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
  virtual void batchFeed(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode);
  virtual void batchFeed(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode);
 protected:
  void batchFeedImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode);
 public:

  virtual void sync_batchFeed(::std::vector<::cpp2::BatchFeedResult>& _return, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode);
  virtual void sync_batchFeed(apache::thrift::RpcOptions& rpcOptions, ::std::vector<::cpp2::BatchFeedResult>& _return, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode);

  virtual folly::Future<::std::vector<::cpp2::BatchFeedResult>> future_batchFeed(const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode);
  virtual folly::SemiFuture<::std::vector<::cpp2::BatchFeedResult>> semifuture_batchFeed(const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode);
  virtual folly::Future<::std::vector<::cpp2::BatchFeedResult>> future_batchFeed(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode);
  virtual folly::SemiFuture<::std::vector<::cpp2::BatchFeedResult>> semifuture_batchFeed(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode);
  virtual folly::Future<std::pair<::std::vector<::cpp2::BatchFeedResult>, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_batchFeed(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode);
  virtual folly::SemiFuture<std::pair<::std::vector<::cpp2::BatchFeedResult>, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_batchFeed(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode);

#if FOLLY_HAS_COROUTINES
  template <int = 0>
  folly::coro::Task<::std::vector<::cpp2::BatchFeedResult>> co_batchFeed(const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
    return co_batchFeed<false>(nullptr, p_inputIds, p_topTokens, p_mode);
  }
  template <int = 0>
  folly::coro::Task<::std::vector<::cpp2::BatchFeedResult>> co_batchFeed(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
    return co_batchFeed<true>(&rpcOptions, p_inputIds, p_topTokens, p_mode);
  }
 private:
  template <bool hasRpcOptions>
  folly::coro::Task<::std::vector<::cpp2::BatchFeedResult>> co_batchFeed(apache::thrift::RpcOptions* rpcOptions, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
    const folly::CancellationToken& cancelToken =
        co_await folly::coro::co_current_cancellation_token;
    const bool cancellable = cancelToken.canBeCancelled();
    apache::thrift::ClientReceiveState returnState;
    apache::thrift::ClientSyncCallback<false> callback(&returnState);
    auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
    auto ctx = batchFeedCtx(rpcOptions);
    using CancellableCallback = apache::thrift::CancellableRequestClientCallback<false>;
    auto cancellableCallback = cancellable ? CancellableCallback::create(&callback, channel_) : nullptr;
    static const apache::thrift::RpcOptions defaultRpcOptions;
    auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(cancellableCallback ? (apache::thrift::RequestClientCallback*)cancellableCallback.get() : &callback);
    if constexpr (hasRpcOptions) {
      batchFeedImpl(*rpcOptions, ctx, std::move(wrappedCallback), p_inputIds, p_topTokens, p_mode);
    } else {
      batchFeedImpl(defaultRpcOptions, ctx, std::move(wrappedCallback), p_inputIds, p_topTokens, p_mode);
    }
    if (cancellable) {
      folly::CancellationCallback cb(cancelToken, [&] { CancellableCallback::cancel(std::move(cancellableCallback)); });
      co_await callback.co_waitUntilDone();
    } else {
      co_await callback.co_waitUntilDone();
    }
    if (returnState.isException()) {
      co_yield folly::coro::co_error(std::move(returnState.exception()));
    }
    returnState.resetProtocolId(protocolId);
    returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
    SCOPE_EXIT {
      if (hasRpcOptions && returnState.header() && !returnState.header()->getHeaders().empty()) {
        rpcOptions->setReadHeaders(returnState.header()->releaseHeaders());
      }
    };
    ::std::vector<::cpp2::BatchFeedResult> _return;
    if (auto ew = recv_wrapped_batchFeed(_return, returnState)) {
      co_yield folly::coro::co_error(std::move(ew));
    }
    co_return _return;
  }
 public:
#endif // FOLLY_HAS_COROUTINES

  virtual void batchFeed(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode);


  static folly::exception_wrapper recv_wrapped_batchFeed(::std::vector<::cpp2::BatchFeedResult>& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_batchFeed(::std::vector<::cpp2::BatchFeedResult>& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_batchFeed(::std::vector<::cpp2::BatchFeedResult>& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_batchFeed(::std::vector<::cpp2::BatchFeedResult>& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void batchFeedT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode);
  std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> batchFeedCtx(apache::thrift::RpcOptions* rpcOptions);
 public:
};

} // cpp2
