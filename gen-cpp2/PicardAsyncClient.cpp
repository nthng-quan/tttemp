/**
 * Autogenerated by Thrift for picard.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include "PicardAsyncClient.h"

#include <thrift/lib/cpp2/gen/client_cpp.h>

namespace cpp2 {
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::string, ::cpp2::DBId*>, apache::thrift::FieldData<2, ::apache::thrift::type_class::structure, ::cpp2::SQLSchema*>> Picard_registerSQLSchema_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure, ::cpp2::RegisterSQLSchemaException>> Picard_registerSQLSchema_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::string, ::std::string*>> Picard_registerTokenizer_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure, ::cpp2::RegisterTokenizerException>> Picard_registerTokenizer_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::list<::apache::thrift::type_class::integral>, ::cpp2::InputIds*>, apache::thrift::FieldData<2, ::apache::thrift::type_class::integral, ::cpp2::Token*>, apache::thrift::FieldData<3, ::apache::thrift::type_class::enumeration, ::cpp2::Mode*>> Picard_feed_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::variant, ::cpp2::FeedResult*>, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure, ::cpp2::FeedException>> Picard_feed_presult;
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::std::vector<::cpp2::InputIds>*>, apache::thrift::FieldData<2, ::apache::thrift::type_class::list<::apache::thrift::type_class::list<::apache::thrift::type_class::integral>>, ::std::vector<::std::vector<::cpp2::Token>>*>, apache::thrift::FieldData<3, ::apache::thrift::type_class::enumeration, ::cpp2::Mode*>> Picard_batchFeed_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, ::apache::thrift::type_class::list<::apache::thrift::type_class::structure>, ::std::vector<::cpp2::BatchFeedResult>*>, apache::thrift::FieldData<1, ::apache::thrift::type_class::structure, ::cpp2::FeedException>> Picard_batchFeed_presult;

template <typename Protocol_>
void PicardAsyncClient::registerSQLSchemaT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {

  std::shared_ptr<apache::thrift::transport::THeader> header(ctx, &ctx->header);
  Picard_registerSQLSchema_pargs args;
  args.get<0>().value = const_cast<::cpp2::DBId*>(&p_dbId);
  args.get<1>().value = const_cast<::cpp2::SQLSchema*>(&p_sqlSchema);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  static constexpr std::string_view methodName = "registerSQLSchema";
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, Protocol_>(prot, std::move(rpcOptions), std::move(callback), ctx->ctx, std::move(header), channel_.get(), apache::thrift::ManagedStringView::from_static(methodName), writer, sizer);
  ctx->reqContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PicardAsyncClient::registerTokenizerT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::std::string& p_jsonConfig) {

  std::shared_ptr<apache::thrift::transport::THeader> header(ctx, &ctx->header);
  Picard_registerTokenizer_pargs args;
  args.get<0>().value = const_cast<::std::string*>(&p_jsonConfig);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  static constexpr std::string_view methodName = "registerTokenizer";
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, Protocol_>(prot, std::move(rpcOptions), std::move(callback), ctx->ctx, std::move(header), channel_.get(), apache::thrift::ManagedStringView::from_static(methodName), writer, sizer);
  ctx->reqContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PicardAsyncClient::feedT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {

  std::shared_ptr<apache::thrift::transport::THeader> header(ctx, &ctx->header);
  Picard_feed_pargs args;
  args.get<0>().value = const_cast<::cpp2::InputIds*>(&p_inputIds);
  args.get<1>().value = &p_token;
  args.get<2>().value = &p_mode;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  static constexpr std::string_view methodName = "feed";
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, Protocol_>(prot, std::move(rpcOptions), std::move(callback), ctx->ctx, std::move(header), channel_.get(), apache::thrift::ManagedStringView::from_static(methodName), writer, sizer);
  ctx->reqContext.setRequestHeader(nullptr);
}

template <typename Protocol_>
void PicardAsyncClient::batchFeedT(Protocol_* prot, apache::thrift::RpcOptions rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {

  std::shared_ptr<apache::thrift::transport::THeader> header(ctx, &ctx->header);
  Picard_batchFeed_pargs args;
  args.get<0>().value = const_cast<::std::vector<::cpp2::InputIds>*>(&p_inputIds);
  args.get<1>().value = const_cast<::std::vector<::std::vector<::cpp2::Token>>*>(&p_topTokens);
  args.get<2>().value = &p_mode;
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  static constexpr std::string_view methodName = "batchFeed";
  apache::thrift::clientSendT<apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, Protocol_>(prot, std::move(rpcOptions), std::move(callback), ctx->ctx, std::move(header), channel_.get(), apache::thrift::ManagedStringView::from_static(methodName), writer, sizer);
  ctx->reqContext.setRequestHeader(nullptr);
}



void PicardAsyncClient::registerSQLSchema(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
  ::apache::thrift::RpcOptions rpcOptions;
  registerSQLSchema(rpcOptions, std::move(callback), p_dbId, p_sqlSchema);
}

void PicardAsyncClient::registerSQLSchema(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
  auto ctx = registerSQLSchemaCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  callbackContext.ctx = std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx);
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  registerSQLSchemaImpl(rpcOptions, std::move(ctx), std::move(wrappedCallback), p_dbId, p_sqlSchema);
}

void PicardAsyncClient::registerSQLSchemaImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      registerSQLSchemaT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_dbId, p_sqlSchema);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      registerSQLSchemaT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_dbId, p_sqlSchema);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> PicardAsyncClient::registerSQLSchemaCtx(apache::thrift::RpcOptions* rpcOptions) {
  return std::make_shared<apache::thrift::detail::ac::ClientRequestContext>(
      channel_->getProtocolId(),
      rpcOptions ? rpcOptions->releaseWriteHeaders() : std::map<std::string, std::string>{},
      handlers_,
      getServiceName(),
      "Picard.registerSQLSchema");
}

void PicardAsyncClient::sync_registerSQLSchema(const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_registerSQLSchema(rpcOptions, p_dbId, p_sqlSchema);
}

void PicardAsyncClient::sync_registerSQLSchema(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctx = registerSQLSchemaCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  registerSQLSchemaImpl(rpcOptions, ctx, std::move(wrappedCallback), p_dbId, p_sqlSchema);
  callback.waitUntilDone(evb);

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
  SCOPE_EXIT {
    if (returnState.header() && !returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(returnState.header()->releaseHeaders());
    }
  };
  return folly::fibers::runInMainContext([&] {
      recv_registerSQLSchema(returnState);
  });
}


folly::Future<folly::Unit> PicardAsyncClient::future_registerSQLSchema(const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_registerSQLSchema(rpcOptions, p_dbId, p_sqlSchema);
}

folly::SemiFuture<folly::Unit> PicardAsyncClient::semifuture_registerSQLSchema(const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_registerSQLSchema(rpcOptions, p_dbId, p_sqlSchema);
}

folly::Future<folly::Unit> PicardAsyncClient::future_registerSQLSchema(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
  folly::Promise<folly::Unit> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(promise), recv_wrapped_registerSQLSchema, channel_);
  registerSQLSchema(rpcOptions, std::move(callback), p_dbId, p_sqlSchema);
  return future;
}

folly::SemiFuture<folly::Unit> PicardAsyncClient::semifuture_registerSQLSchema(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_registerSQLSchema, channel_);
  auto callback = std::move(callbackAndFuture.first);
  registerSQLSchema(rpcOptions, std::move(callback), p_dbId, p_sqlSchema);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PicardAsyncClient::header_future_registerSQLSchema(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(promise), recv_wrapped_registerSQLSchema, channel_);
  registerSQLSchema(rpcOptions, std::move(callback), p_dbId, p_sqlSchema);
  return future;
}

folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PicardAsyncClient::header_semifuture_registerSQLSchema(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_registerSQLSchema, channel_);
  auto callback = std::move(callbackAndFuture.first);
  registerSQLSchema(rpcOptions, std::move(callback), p_dbId, p_sqlSchema);
  return std::move(callbackAndFuture.second);
}

void PicardAsyncClient::registerSQLSchema(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::cpp2::DBId& p_dbId, const ::cpp2::SQLSchema& p_sqlSchema) {
  registerSQLSchema(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), p_dbId, p_sqlSchema);
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
folly::exception_wrapper PicardAsyncClient::recv_wrapped_registerSQLSchema(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = Picard_registerSQLSchema_presult;
  constexpr auto const fname = "registerSQLSchema";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PicardAsyncClient::recv_registerSQLSchema(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_registerSQLSchema(state);
  if (ew) {
    ew.throw_exception();
  }
}

void PicardAsyncClient::recv_instance_registerSQLSchema(::apache::thrift::ClientReceiveState& state) {
  recv_registerSQLSchema(state);
}

folly::exception_wrapper PicardAsyncClient::recv_instance_wrapped_registerSQLSchema(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_registerSQLSchema(state);
}

void PicardAsyncClient::registerTokenizer(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_jsonConfig) {
  ::apache::thrift::RpcOptions rpcOptions;
  registerTokenizer(rpcOptions, std::move(callback), p_jsonConfig);
}

void PicardAsyncClient::registerTokenizer(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::string& p_jsonConfig) {
  auto ctx = registerTokenizerCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  callbackContext.ctx = std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx);
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  registerTokenizerImpl(rpcOptions, std::move(ctx), std::move(wrappedCallback), p_jsonConfig);
}

void PicardAsyncClient::registerTokenizerImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::std::string& p_jsonConfig) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      registerTokenizerT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_jsonConfig);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      registerTokenizerT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_jsonConfig);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> PicardAsyncClient::registerTokenizerCtx(apache::thrift::RpcOptions* rpcOptions) {
  return std::make_shared<apache::thrift::detail::ac::ClientRequestContext>(
      channel_->getProtocolId(),
      rpcOptions ? rpcOptions->releaseWriteHeaders() : std::map<std::string, std::string>{},
      handlers_,
      getServiceName(),
      "Picard.registerTokenizer");
}

void PicardAsyncClient::sync_registerTokenizer(const ::std::string& p_jsonConfig) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_registerTokenizer(rpcOptions, p_jsonConfig);
}

void PicardAsyncClient::sync_registerTokenizer(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_jsonConfig) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctx = registerTokenizerCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  registerTokenizerImpl(rpcOptions, ctx, std::move(wrappedCallback), p_jsonConfig);
  callback.waitUntilDone(evb);

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
  SCOPE_EXIT {
    if (returnState.header() && !returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(returnState.header()->releaseHeaders());
    }
  };
  return folly::fibers::runInMainContext([&] {
      recv_registerTokenizer(returnState);
  });
}


folly::Future<folly::Unit> PicardAsyncClient::future_registerTokenizer(const ::std::string& p_jsonConfig) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_registerTokenizer(rpcOptions, p_jsonConfig);
}

folly::SemiFuture<folly::Unit> PicardAsyncClient::semifuture_registerTokenizer(const ::std::string& p_jsonConfig) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_registerTokenizer(rpcOptions, p_jsonConfig);
}

folly::Future<folly::Unit> PicardAsyncClient::future_registerTokenizer(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_jsonConfig) {
  folly::Promise<folly::Unit> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<folly::Unit>>(std::move(promise), recv_wrapped_registerTokenizer, channel_);
  registerTokenizer(rpcOptions, std::move(callback), p_jsonConfig);
  return future;
}

folly::SemiFuture<folly::Unit> PicardAsyncClient::semifuture_registerTokenizer(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_jsonConfig) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_registerTokenizer, channel_);
  auto callback = std::move(callbackAndFuture.first);
  registerTokenizer(rpcOptions, std::move(callback), p_jsonConfig);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PicardAsyncClient::header_future_registerTokenizer(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_jsonConfig) {
  folly::Promise<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<folly::Unit>>(std::move(promise), recv_wrapped_registerTokenizer, channel_);
  registerTokenizer(rpcOptions, std::move(callback), p_jsonConfig);
  return future;
}

folly::SemiFuture<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> PicardAsyncClient::header_semifuture_registerTokenizer(apache::thrift::RpcOptions& rpcOptions, const ::std::string& p_jsonConfig) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_registerTokenizer, channel_);
  auto callback = std::move(callbackAndFuture.first);
  registerTokenizer(rpcOptions, std::move(callback), p_jsonConfig);
  return std::move(callbackAndFuture.second);
}

void PicardAsyncClient::registerTokenizer(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::std::string& p_jsonConfig) {
  registerTokenizer(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), p_jsonConfig);
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
folly::exception_wrapper PicardAsyncClient::recv_wrapped_registerTokenizer(::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = Picard_registerTokenizer_presult;
  constexpr auto const fname = "registerTokenizer";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PicardAsyncClient::recv_registerTokenizer(::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_registerTokenizer(state);
  if (ew) {
    ew.throw_exception();
  }
}

void PicardAsyncClient::recv_instance_registerTokenizer(::apache::thrift::ClientReceiveState& state) {
  recv_registerTokenizer(state);
}

folly::exception_wrapper PicardAsyncClient::recv_instance_wrapped_registerTokenizer(::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_registerTokenizer(state);
}

void PicardAsyncClient::feed(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  ::apache::thrift::RpcOptions rpcOptions;
  feed(rpcOptions, std::move(callback), p_inputIds, p_token, p_mode);
}

void PicardAsyncClient::feed(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  auto ctx = feedCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  callbackContext.ctx = std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx);
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  feedImpl(rpcOptions, std::move(ctx), std::move(wrappedCallback), p_inputIds, p_token, p_mode);
}

void PicardAsyncClient::feedImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      feedT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_inputIds, p_token, p_mode);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      feedT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_inputIds, p_token, p_mode);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> PicardAsyncClient::feedCtx(apache::thrift::RpcOptions* rpcOptions) {
  return std::make_shared<apache::thrift::detail::ac::ClientRequestContext>(
      channel_->getProtocolId(),
      rpcOptions ? rpcOptions->releaseWriteHeaders() : std::map<std::string, std::string>{},
      handlers_,
      getServiceName(),
      "Picard.feed");
}

void PicardAsyncClient::sync_feed(::cpp2::FeedResult& _return, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_feed(rpcOptions, _return, p_inputIds, p_token, p_mode);
}

void PicardAsyncClient::sync_feed(apache::thrift::RpcOptions& rpcOptions, ::cpp2::FeedResult& _return, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctx = feedCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  feedImpl(rpcOptions, ctx, std::move(wrappedCallback), p_inputIds, p_token, p_mode);
  callback.waitUntilDone(evb);

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
  SCOPE_EXIT {
    if (returnState.header() && !returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(returnState.header()->releaseHeaders());
    }
  };
  return folly::fibers::runInMainContext([&] {
      recv_feed(_return, returnState);
  });
}


folly::Future<::cpp2::FeedResult> PicardAsyncClient::future_feed(const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_feed(rpcOptions, p_inputIds, p_token, p_mode);
}

folly::SemiFuture<::cpp2::FeedResult> PicardAsyncClient::semifuture_feed(const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_feed(rpcOptions, p_inputIds, p_token, p_mode);
}

folly::Future<::cpp2::FeedResult> PicardAsyncClient::future_feed(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  folly::Promise<::cpp2::FeedResult> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<::cpp2::FeedResult>>(std::move(promise), recv_wrapped_feed, channel_);
  feed(rpcOptions, std::move(callback), p_inputIds, p_token, p_mode);
  return future;
}

folly::SemiFuture<::cpp2::FeedResult> PicardAsyncClient::semifuture_feed(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_feed, channel_);
  auto callback = std::move(callbackAndFuture.first);
  feed(rpcOptions, std::move(callback), p_inputIds, p_token, p_mode);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<::cpp2::FeedResult, std::unique_ptr<apache::thrift::transport::THeader>>> PicardAsyncClient::header_future_feed(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  folly::Promise<std::pair<::cpp2::FeedResult, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<::cpp2::FeedResult>>(std::move(promise), recv_wrapped_feed, channel_);
  feed(rpcOptions, std::move(callback), p_inputIds, p_token, p_mode);
  return future;
}

folly::SemiFuture<std::pair<::cpp2::FeedResult, std::unique_ptr<apache::thrift::transport::THeader>>> PicardAsyncClient::header_semifuture_feed(apache::thrift::RpcOptions& rpcOptions, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_feed, channel_);
  auto callback = std::move(callbackAndFuture.first);
  feed(rpcOptions, std::move(callback), p_inputIds, p_token, p_mode);
  return std::move(callbackAndFuture.second);
}

void PicardAsyncClient::feed(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::cpp2::InputIds& p_inputIds, ::cpp2::Token p_token, ::cpp2::Mode p_mode) {
  feed(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), p_inputIds, p_token, p_mode);
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
folly::exception_wrapper PicardAsyncClient::recv_wrapped_feed(::cpp2::FeedResult& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = Picard_feed_presult;
  constexpr auto const fname = "feed";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PicardAsyncClient::recv_feed(::cpp2::FeedResult& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_feed(_return, state);
  if (ew) {
    ew.throw_exception();
  }
}

void PicardAsyncClient::recv_instance_feed(::cpp2::FeedResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_feed(_return, state);
}

folly::exception_wrapper PicardAsyncClient::recv_instance_wrapped_feed(::cpp2::FeedResult& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_feed(_return, state);
}

void PicardAsyncClient::batchFeed(std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
  ::apache::thrift::RpcOptions rpcOptions;
  batchFeed(rpcOptions, std::move(callback), p_inputIds, p_topTokens, p_mode);
}

void PicardAsyncClient::batchFeed(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
  auto ctx = batchFeedCtx(&rpcOptions);
  apache::thrift::RequestCallback::Context callbackContext;
  callbackContext.protocolId =
      apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  callbackContext.ctx = std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx);
  auto wrappedCallback = apache::thrift::toRequestClientCallbackPtr(std::move(callback), std::move(callbackContext));
  batchFeedImpl(rpcOptions, std::move(ctx), std::move(wrappedCallback), p_inputIds, p_topTokens, p_mode);
}

void PicardAsyncClient::batchFeedImpl(const apache::thrift::RpcOptions& rpcOptions, std::shared_ptr<apache::thrift::detail::ac::ClientRequestContext> ctx, apache::thrift::RequestClientCallback::Ptr callback, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
  switch (apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      batchFeedT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_inputIds, p_topTokens, p_mode);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      batchFeedT(&writer, rpcOptions, std::move(ctx), std::move(callback), p_inputIds, p_topTokens, p_mode);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

std::shared_ptr<::apache::thrift::detail::ac::ClientRequestContext> PicardAsyncClient::batchFeedCtx(apache::thrift::RpcOptions* rpcOptions) {
  return std::make_shared<apache::thrift::detail::ac::ClientRequestContext>(
      channel_->getProtocolId(),
      rpcOptions ? rpcOptions->releaseWriteHeaders() : std::map<std::string, std::string>{},
      handlers_,
      getServiceName(),
      "Picard.batchFeed");
}

void PicardAsyncClient::sync_batchFeed(::std::vector<::cpp2::BatchFeedResult>& _return, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_batchFeed(rpcOptions, _return, p_inputIds, p_topTokens, p_mode);
}

void PicardAsyncClient::sync_batchFeed(apache::thrift::RpcOptions& rpcOptions, ::std::vector<::cpp2::BatchFeedResult>& _return, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
  apache::thrift::ClientReceiveState returnState;
  apache::thrift::ClientSyncCallback<false> callback(&returnState);
  auto protocolId = apache::thrift::GeneratedAsyncClient::getChannel()->getProtocolId();
  auto evb = apache::thrift::GeneratedAsyncClient::getChannel()->getEventBase();
  auto ctx = batchFeedCtx(&rpcOptions);
  auto wrappedCallback = apache::thrift::RequestClientCallback::Ptr(&callback);
  batchFeedImpl(rpcOptions, ctx, std::move(wrappedCallback), p_inputIds, p_topTokens, p_mode);
  callback.waitUntilDone(evb);

  if (returnState.isException()) {
    returnState.exception().throw_exception();
  }
  returnState.resetProtocolId(protocolId);
  returnState.resetCtx(std::shared_ptr<apache::thrift::ContextStack>(ctx, &ctx->ctx));
  SCOPE_EXIT {
    if (returnState.header() && !returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(returnState.header()->releaseHeaders());
    }
  };
  return folly::fibers::runInMainContext([&] {
      recv_batchFeed(_return, returnState);
  });
}


folly::Future<::std::vector<::cpp2::BatchFeedResult>> PicardAsyncClient::future_batchFeed(const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_batchFeed(rpcOptions, p_inputIds, p_topTokens, p_mode);
}

folly::SemiFuture<::std::vector<::cpp2::BatchFeedResult>> PicardAsyncClient::semifuture_batchFeed(const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_batchFeed(rpcOptions, p_inputIds, p_topTokens, p_mode);
}

folly::Future<::std::vector<::cpp2::BatchFeedResult>> PicardAsyncClient::future_batchFeed(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
  folly::Promise<::std::vector<::cpp2::BatchFeedResult>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback<::std::vector<::cpp2::BatchFeedResult>>>(std::move(promise), recv_wrapped_batchFeed, channel_);
  batchFeed(rpcOptions, std::move(callback), p_inputIds, p_topTokens, p_mode);
  return future;
}

folly::SemiFuture<::std::vector<::cpp2::BatchFeedResult>> PicardAsyncClient::semifuture_batchFeed(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_batchFeed, channel_);
  auto callback = std::move(callbackAndFuture.first);
  batchFeed(rpcOptions, std::move(callback), p_inputIds, p_topTokens, p_mode);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair<::std::vector<::cpp2::BatchFeedResult>, std::unique_ptr<apache::thrift::transport::THeader>>> PicardAsyncClient::header_future_batchFeed(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
  folly::Promise<std::pair<::std::vector<::cpp2::BatchFeedResult>, std::unique_ptr<apache::thrift::transport::THeader>>> promise;
  auto future = promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback<::std::vector<::cpp2::BatchFeedResult>>>(std::move(promise), recv_wrapped_batchFeed, channel_);
  batchFeed(rpcOptions, std::move(callback), p_inputIds, p_topTokens, p_mode);
  return future;
}

folly::SemiFuture<std::pair<::std::vector<::cpp2::BatchFeedResult>, std::unique_ptr<apache::thrift::transport::THeader>>> PicardAsyncClient::header_semifuture_batchFeed(apache::thrift::RpcOptions& rpcOptions, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_batchFeed, channel_);
  auto callback = std::move(callbackAndFuture.first);
  batchFeed(rpcOptions, std::move(callback), p_inputIds, p_topTokens, p_mode);
  return std::move(callbackAndFuture.second);
}

void PicardAsyncClient::batchFeed(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const ::std::vector<::cpp2::InputIds>& p_inputIds, const ::std::vector<::std::vector<::cpp2::Token>>& p_topTokens, ::cpp2::Mode p_mode) {
  batchFeed(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), p_inputIds, p_topTokens, p_mode);
}

#if FOLLY_HAS_COROUTINES
#endif // FOLLY_HAS_COROUTINES
folly::exception_wrapper PicardAsyncClient::recv_wrapped_batchFeed(::std::vector<::cpp2::BatchFeedResult>& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = Picard_batchFeed_presult;
  constexpr auto const fname = "batchFeed";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void PicardAsyncClient::recv_batchFeed(::std::vector<::cpp2::BatchFeedResult>& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_batchFeed(_return, state);
  if (ew) {
    ew.throw_exception();
  }
}

void PicardAsyncClient::recv_instance_batchFeed(::std::vector<::cpp2::BatchFeedResult>& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_batchFeed(_return, state);
}

folly::exception_wrapper PicardAsyncClient::recv_instance_wrapped_batchFeed(::std::vector<::cpp2::BatchFeedResult>& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_batchFeed(_return, state);
}


} // cpp2
