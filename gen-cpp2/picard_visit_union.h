/**
 * Autogenerated by Thrift for picard.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "picard_metadata.h"
#include <thrift/lib/cpp2/visitation/visit_union.h>

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitUnion<::cpp2::FeedFatalException> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, T&& t) const {
    using Union = std::remove_reference_t<T>;
    switch (t.getType()) {
    case Union::Type::tokenizerNotRegisteredException:
      return f(0, *static_cast<T&&>(t).tokenizerNotRegisteredException_ref());
    case Union::Type::tokenizerPrefixException:
      return f(1, *static_cast<T&&>(t).tokenizerPrefixException_ref());
    case Union::Type::modeException:
      return f(2, *static_cast<T&&>(t).modeException_ref());
    case Union::Type::__EMPTY__: ;
    }
  }
};
template <>
struct VisitUnion<::cpp2::FeedResult> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, T&& t) const {
    using Union = std::remove_reference_t<T>;
    switch (t.getType()) {
    case Union::Type::feedParseFailure:
      return f(0, *static_cast<T&&>(t).feedParseFailure_ref());
    case Union::Type::feedTimeoutFailure:
      return f(1, *static_cast<T&&>(t).feedTimeoutFailure_ref());
    case Union::Type::feedPartialSuccess:
      return f(2, *static_cast<T&&>(t).feedPartialSuccess_ref());
    case Union::Type::feedCompleteSuccess:
      return f(3, *static_cast<T&&>(t).feedCompleteSuccess_ref());
    case Union::Type::__EMPTY__: ;
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
