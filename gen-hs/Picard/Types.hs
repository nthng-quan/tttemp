-----------------------------------------------------------------
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
--  @generated
-----------------------------------------------------------------
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE BangPatterns #-}
{-# OPTIONS_GHC -fno-warn-unused-imports#-}
{-# OPTIONS_GHC -fno-warn-overlapping-patterns#-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns#-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
module Picard.Types
       (ColumnId, TableId,
        ColumnType(ColumnType_BOOLEAN, ColumnType_TEXT, ColumnType_NUMBER,
                   ColumnType_TIME, ColumnType_OTHERS, ColumnType__UNKNOWN),
        DBId, Token, InputIds, BatchId,
        SQLSchema(SQLSchema, sQLSchema_columnNames, sQLSchema_columnTypes,
                  sQLSchema_tableNames, sQLSchema_columnToTable,
                  sQLSchema_tableToColumns, sQLSchema_foreignKeys,
                  sQLSchema_primaryKeys),
        RegisterSQLSchemaException(RegisterSQLSchemaException,
                                   registerSQLSchemaException_dbId,
                                   registerSQLSchemaException_message),
        RegisterTokenizerException(RegisterTokenizerException,
                                   registerTokenizerException_message),
        TokenizerNotRegisteredException(TokenizerNotRegisteredException,
                                        tokenizerNotRegisteredException_message),
        TokenizerPrefixException(TokenizerPrefixException,
                                 tokenizerPrefixException_message),
        ModeException(ModeException, modeException_message),
        FeedFatalException(FeedFatalException_EMPTY,
                           FeedFatalException_tokenizerNotRegisteredException,
                           FeedFatalException_tokenizerPrefixException,
                           FeedFatalException_modeException),
        FeedException(FeedException, feedException_feedFatalException),
        FeedParseFailure(FeedParseFailure, feedParseFailure_input,
                         feedParseFailure_contexts, feedParseFailure_description),
        FeedTimeoutFailure(FeedTimeoutFailure, feedTimeoutFailure_message),
        FeedPartialSuccess(FeedPartialSuccess),
        FeedCompleteSuccess(FeedCompleteSuccess,
                            feedCompleteSuccess_leftover),
        FeedResult(FeedResult_EMPTY, FeedResult_feedParseFailure,
                   FeedResult_feedTimeoutFailure, FeedResult_feedPartialSuccess,
                   FeedResult_feedCompleteSuccess),
        BatchFeedResult(BatchFeedResult, batchFeedResult_batchId,
                        batchFeedResult_topToken, batchFeedResult_feedResult),
        Mode(Mode_LEXING, Mode_PARSING_WITHOUT_GUARDS,
             Mode_PARSING_WITH_GUARDS,
             Mode_PARSING_WITH_GUARDS_AND_TYPE_CHECKING, Mode__UNKNOWN))
       where
import qualified Control.DeepSeq as DeepSeq
import qualified Control.Exception as Exception
import qualified Control.Monad as Monad
import qualified Control.Monad.ST.Trans as ST
import qualified Control.Monad.Trans.Class as Trans
import qualified Data.Aeson as Aeson
import qualified Data.Aeson.Types as Aeson
import qualified Data.Default as Default
import qualified Data.Function as Function
import qualified Data.HashMap.Strict as HashMap
import qualified Data.Hashable as Hashable
import qualified Data.Int as Int
import qualified Data.List as List
import qualified Data.Ord as Ord
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text
import qualified Prelude as Prelude
import qualified Thrift.Binary.Parser as Parser
import qualified Thrift.CodegenTypesOnly as Thrift
import Control.Applicative ((<|>), (*>), (<*))
import Data.Aeson ((.:), (.:?), (.=), (.!=))
import Data.Aeson ((.:), (.=))
import Data.Monoid ((<>))
import Prelude ((.), (++), (>), (==))
import Prelude ((.), (<$>), (<*>), (>>=), (==), (++))
import Prelude ((.), (<$>), (<*>), (>>=), (==), (/=), (<), (++))

type ColumnId = Text.Text

type TableId = Text.Text

data ColumnType = ColumnType_BOOLEAN
                | ColumnType_TEXT
                | ColumnType_NUMBER
                | ColumnType_TIME
                | ColumnType_OTHERS
                | ColumnType__UNKNOWN Prelude.Int
                  deriving (Prelude.Eq, Prelude.Show)

instance Aeson.ToJSON ColumnType where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData ColumnType where
  rnf __ColumnType = Prelude.seq __ColumnType ()

instance Default.Default ColumnType where
  def = ColumnType_BOOLEAN

instance Hashable.Hashable ColumnType where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum ColumnType where
  toThriftEnum 1 = ColumnType_BOOLEAN
  toThriftEnum 2 = ColumnType_TEXT
  toThriftEnum 3 = ColumnType_NUMBER
  toThriftEnum 4 = ColumnType_TIME
  toThriftEnum 5 = ColumnType_OTHERS
  toThriftEnum val = ColumnType__UNKNOWN val
  fromThriftEnum ColumnType_BOOLEAN = 1
  fromThriftEnum ColumnType_TEXT = 2
  fromThriftEnum ColumnType_NUMBER = 3
  fromThriftEnum ColumnType_TIME = 4
  fromThriftEnum ColumnType_OTHERS = 5
  fromThriftEnum (ColumnType__UNKNOWN val) = val
  allThriftEnumValues
    = [ColumnType_BOOLEAN, ColumnType_TEXT, ColumnType_NUMBER,
       ColumnType_TIME, ColumnType_OTHERS]
  toThriftEnumEither 1 = Prelude.Right ColumnType_BOOLEAN
  toThriftEnumEither 2 = Prelude.Right ColumnType_TEXT
  toThriftEnumEither 3 = Prelude.Right ColumnType_NUMBER
  toThriftEnumEither 4 = Prelude.Right ColumnType_TIME
  toThriftEnumEither 5 = Prelude.Right ColumnType_OTHERS
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum ColumnType: "
           ++ Prelude.show val)

instance Prelude.Ord ColumnType where
  compare = Function.on Prelude.compare Thrift.fromThriftEnum

type DBId = Text.Text

type Token = Int.Int64

type InputIds = [Token]

type BatchId = Int.Int64

data SQLSchema = SQLSchema{sQLSchema_columnNames ::
                           HashMap.HashMap ColumnId Text.Text,
                           sQLSchema_columnTypes :: HashMap.HashMap ColumnId ColumnType,
                           sQLSchema_tableNames :: HashMap.HashMap TableId Text.Text,
                           sQLSchema_columnToTable :: HashMap.HashMap ColumnId TableId,
                           sQLSchema_tableToColumns :: HashMap.HashMap TableId [ColumnId],
                           sQLSchema_foreignKeys :: HashMap.HashMap ColumnId ColumnId,
                           sQLSchema_primaryKeys :: [ColumnId]}
                 deriving (Prelude.Eq, Prelude.Show)

instance Aeson.ToJSON SQLSchema where
  toJSON
    (SQLSchema __field__columnNames __field__columnTypes
       __field__tableNames __field__columnToTable __field__tableToColumns
       __field__foreignKeys __field__primaryKeys)
    = Aeson.object
        ("columnNames" .=
           Thrift.hmMapKeys Thrift.keyToStr __field__columnNames
           :
           "columnTypes" .=
             Thrift.hmMapKeys Thrift.keyToStr __field__columnTypes
             :
             "tableNames" .=
               Thrift.hmMapKeys Thrift.keyToStr __field__tableNames
               :
               "columnToTable" .=
                 Thrift.hmMapKeys Thrift.keyToStr __field__columnToTable
                 :
                 "tableToColumns" .=
                   Thrift.hmMapKeys Thrift.keyToStr __field__tableToColumns
                   :
                   "foreignKeys" .=
                     Thrift.hmMapKeys Thrift.keyToStr __field__foreignKeys
                     : "primaryKeys" .= __field__primaryKeys : Prelude.mempty)

instance Thrift.ThriftStruct SQLSchema where
  buildStruct _proxy
    (SQLSchema __field__columnNames __field__columnTypes
       __field__tableNames __field__columnToTable __field__tableToColumns
       __field__foreignKeys __field__primaryKeys)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "columnNames" (Thrift.getMapType _proxy) 1
           0
           ((Thrift.genMap _proxy (Thrift.getStringType _proxy)
               (Thrift.getStringType _proxy)
               Prelude.True
               (Thrift.genText _proxy)
               (Thrift.genText _proxy)
               . HashMap.toList)
              __field__columnNames)
           :
           Thrift.genField _proxy "columnTypes" (Thrift.getMapType _proxy) 2 1
             ((Thrift.genMap _proxy (Thrift.getStringType _proxy)
                 (Thrift.getI32Type _proxy)
                 Prelude.True
                 (Thrift.genText _proxy)
                 (Thrift.genI32 _proxy . Prelude.fromIntegral .
                    Thrift.fromThriftEnum)
                 . HashMap.toList)
                __field__columnTypes)
             :
             Thrift.genField _proxy "tableNames" (Thrift.getMapType _proxy) 3 2
               ((Thrift.genMap _proxy (Thrift.getStringType _proxy)
                   (Thrift.getStringType _proxy)
                   Prelude.True
                   (Thrift.genText _proxy)
                   (Thrift.genText _proxy)
                   . HashMap.toList)
                  __field__tableNames)
               :
               Thrift.genField _proxy "columnToTable" (Thrift.getMapType _proxy) 4
                 3
                 ((Thrift.genMap _proxy (Thrift.getStringType _proxy)
                     (Thrift.getStringType _proxy)
                     Prelude.True
                     (Thrift.genText _proxy)
                     (Thrift.genText _proxy)
                     . HashMap.toList)
                    __field__columnToTable)
                 :
                 Thrift.genField _proxy "tableToColumns" (Thrift.getMapType _proxy)
                   5
                   4
                   ((Thrift.genMap _proxy (Thrift.getStringType _proxy)
                       (Thrift.getListType _proxy)
                       Prelude.True
                       (Thrift.genText _proxy)
                       (Thrift.genList _proxy (Thrift.getStringType _proxy)
                          (Thrift.genText _proxy))
                       . HashMap.toList)
                      __field__tableToColumns)
                   :
                   Thrift.genField _proxy "foreignKeys" (Thrift.getMapType _proxy) 6 5
                     ((Thrift.genMap _proxy (Thrift.getStringType _proxy)
                         (Thrift.getStringType _proxy)
                         Prelude.True
                         (Thrift.genText _proxy)
                         (Thrift.genText _proxy)
                         . HashMap.toList)
                        __field__foreignKeys)
                     :
                     Thrift.genField _proxy "primaryKeys" (Thrift.getListType _proxy) 7
                       6
                       (Thrift.genList _proxy (Thrift.getStringType _proxy)
                          (Thrift.genText _proxy)
                          __field__primaryKeys)
                       : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__columnNames <- ST.newSTRef HashMap.empty
            __field__columnTypes <- ST.newSTRef HashMap.empty
            __field__tableNames <- ST.newSTRef HashMap.empty
            __field__columnToTable <- ST.newSTRef HashMap.empty
            __field__tableToColumns <- ST.newSTRef HashMap.empty
            __field__foreignKeys <- ST.newSTRef HashMap.empty
            __field__primaryKeys <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (HashMap.fromList
                                                                                      <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        Prelude.True)
                                                                        ST.writeSTRef
                                                                          __field__columnNames
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (HashMap.fromList
                                                                                      <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        (Thrift.parseEnum
                                                                                           _proxy
                                                                                           "ColumnType")
                                                                                        Prelude.True)
                                                                        ST.writeSTRef
                                                                          __field__columnTypes
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (HashMap.fromList
                                                                                      <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        Prelude.True)
                                                                        ST.writeSTRef
                                                                          __field__tableNames
                                                                          _val
                                                                 4 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (HashMap.fromList
                                                                                      <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        Prelude.True)
                                                                        ST.writeSTRef
                                                                          __field__columnToTable
                                                                          _val
                                                                 5 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (HashMap.fromList
                                                                                      <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        (Prelude.snd
                                                                                           <$>
                                                                                           Thrift.parseList
                                                                                             _proxy
                                                                                             (Thrift.parseText
                                                                                                _proxy))
                                                                                        Prelude.True)
                                                                        ST.writeSTRef
                                                                          __field__tableToColumns
                                                                          _val
                                                                 6 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (HashMap.fromList
                                                                                      <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        Prelude.True)
                                                                        ST.writeSTRef
                                                                          __field__foreignKeys
                                                                          _val
                                                                 7 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__primaryKeys
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__columnNames <- ST.readSTRef
                                                                      __field__columnNames
                                             !__val__columnTypes <- ST.readSTRef
                                                                      __field__columnTypes
                                             !__val__tableNames <- ST.readSTRef __field__tableNames
                                             !__val__columnToTable <- ST.readSTRef
                                                                        __field__columnToTable
                                             !__val__tableToColumns <- ST.readSTRef
                                                                         __field__tableToColumns
                                             !__val__foreignKeys <- ST.readSTRef
                                                                      __field__foreignKeys
                                             !__val__primaryKeys <- ST.readSTRef
                                                                      __field__primaryKeys
                                             Prelude.pure
                                               (SQLSchema __val__columnNames __val__columnTypes
                                                  __val__tableNames
                                                  __val__columnToTable
                                                  __val__tableToColumns
                                                  __val__foreignKeys
                                                  __val__primaryKeys)
              _idMap
                = HashMap.fromList
                    [("columnNames", 1), ("columnTypes", 2), ("tableNames", 3),
                     ("columnToTable", 4), ("tableToColumns", 5), ("foreignKeys", 6),
                     ("primaryKeys", 7)]
            _parse 0)

instance DeepSeq.NFData SQLSchema where
  rnf
    (SQLSchema __field__columnNames __field__columnTypes
       __field__tableNames __field__columnToTable __field__tableToColumns
       __field__foreignKeys __field__primaryKeys)
    = DeepSeq.rnf __field__columnNames `Prelude.seq`
        DeepSeq.rnf __field__columnTypes `Prelude.seq`
          DeepSeq.rnf __field__tableNames `Prelude.seq`
            DeepSeq.rnf __field__columnToTable `Prelude.seq`
              DeepSeq.rnf __field__tableToColumns `Prelude.seq`
                DeepSeq.rnf __field__foreignKeys `Prelude.seq`
                  DeepSeq.rnf __field__primaryKeys `Prelude.seq` ()

instance Default.Default SQLSchema where
  def
    = SQLSchema HashMap.empty HashMap.empty HashMap.empty HashMap.empty
        HashMap.empty
        HashMap.empty
        Default.def

instance Hashable.Hashable SQLSchema where
  hashWithSalt __salt
    (SQLSchema _columnNames _columnTypes _tableNames _columnToTable
       _tableToColumns _foreignKeys _primaryKeys)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt
              (Hashable.hashWithSalt
                 (Hashable.hashWithSalt
                    (Hashable.hashWithSalt
                       (Hashable.hashWithSalt __salt
                          ((List.sort .
                              Prelude.map (\ (_k, _v) -> (_k, _v)) . HashMap.toList)
                             _columnNames))
                       ((List.sort .
                           Prelude.map (\ (_k, _v) -> (_k, _v)) . HashMap.toList)
                          _columnTypes))
                    ((List.sort .
                        Prelude.map (\ (_k, _v) -> (_k, _v)) . HashMap.toList)
                       _tableNames))
                 ((List.sort .
                     Prelude.map (\ (_k, _v) -> (_k, _v)) . HashMap.toList)
                    _columnToTable))
              ((List.sort .
                  Prelude.map (\ (_k, _v) -> (_k, _v)) . HashMap.toList)
                 _tableToColumns))
           ((List.sort .
               Prelude.map (\ (_k, _v) -> (_k, _v)) . HashMap.toList)
              _foreignKeys))
        _primaryKeys

instance Ord.Ord SQLSchema where
  compare __a __b
    = case
        Ord.compare
          ((List.sort .
              Prelude.map (\ (_k, _v) -> (_k, _v)) . HashMap.toList)
             (sQLSchema_columnNames __a))
          ((List.sort .
              Prelude.map (\ (_k, _v) -> (_k, _v)) . HashMap.toList)
             (sQLSchema_columnNames __b))
        of
        Ord.LT -> Ord.LT
        Ord.GT -> Ord.GT
        Ord.EQ -> case
                    Ord.compare
                      ((List.sort .
                          Prelude.map (\ (_k, _v) -> (_k, _v)) . HashMap.toList)
                         (sQLSchema_columnTypes __a))
                      ((List.sort .
                          Prelude.map (\ (_k, _v) -> (_k, _v)) . HashMap.toList)
                         (sQLSchema_columnTypes __b))
                    of
                    Ord.LT -> Ord.LT
                    Ord.GT -> Ord.GT
                    Ord.EQ -> case
                                Ord.compare
                                  ((List.sort .
                                      Prelude.map (\ (_k, _v) -> (_k, _v)) . HashMap.toList)
                                     (sQLSchema_tableNames __a))
                                  ((List.sort .
                                      Prelude.map (\ (_k, _v) -> (_k, _v)) . HashMap.toList)
                                     (sQLSchema_tableNames __b))
                                of
                                Ord.LT -> Ord.LT
                                Ord.GT -> Ord.GT
                                Ord.EQ -> case
                                            Ord.compare
                                              ((List.sort .
                                                  Prelude.map (\ (_k, _v) -> (_k, _v)) .
                                                    HashMap.toList)
                                                 (sQLSchema_columnToTable __a))
                                              ((List.sort .
                                                  Prelude.map (\ (_k, _v) -> (_k, _v)) .
                                                    HashMap.toList)
                                                 (sQLSchema_columnToTable __b))
                                            of
                                            Ord.LT -> Ord.LT
                                            Ord.GT -> Ord.GT
                                            Ord.EQ -> case
                                                        Ord.compare
                                                          ((List.sort .
                                                              Prelude.map (\ (_k, _v) -> (_k, _v)) .
                                                                HashMap.toList)
                                                             (sQLSchema_tableToColumns __a))
                                                          ((List.sort .
                                                              Prelude.map (\ (_k, _v) -> (_k, _v)) .
                                                                HashMap.toList)
                                                             (sQLSchema_tableToColumns __b))
                                                        of
                                                        Ord.LT -> Ord.LT
                                                        Ord.GT -> Ord.GT
                                                        Ord.EQ -> case
                                                                    Ord.compare
                                                                      ((List.sort .
                                                                          Prelude.map
                                                                            (\ (_k, _v) -> (_k, _v))
                                                                            . HashMap.toList)
                                                                         (sQLSchema_foreignKeys
                                                                            __a))
                                                                      ((List.sort .
                                                                          Prelude.map
                                                                            (\ (_k, _v) -> (_k, _v))
                                                                            . HashMap.toList)
                                                                         (sQLSchema_foreignKeys
                                                                            __b))
                                                                    of
                                                                    Ord.LT -> Ord.LT
                                                                    Ord.GT -> Ord.GT
                                                                    Ord.EQ -> Ord.compare
                                                                                (sQLSchema_primaryKeys
                                                                                   __a)
                                                                                (sQLSchema_primaryKeys
                                                                                   __b)

data RegisterSQLSchemaException = RegisterSQLSchemaException{registerSQLSchemaException_dbId
                                                             :: DBId,
                                                             registerSQLSchemaException_message ::
                                                             Text.Text}
                                  deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON RegisterSQLSchemaException where
  toJSON (RegisterSQLSchemaException __field__dbId __field__message)
    = Aeson.object
        ("dbId" .= __field__dbId :
           "message" .= __field__message : Prelude.mempty)

instance Thrift.ThriftStruct RegisterSQLSchemaException where
  buildStruct _proxy
    (RegisterSQLSchemaException __field__dbId __field__message)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "dbId" (Thrift.getStringType _proxy) 1 0
           (Thrift.genText _proxy __field__dbId)
           :
           Thrift.genField _proxy "message" (Thrift.getStringType _proxy) 2 1
             (Thrift.genText _proxy __field__message)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__dbId <- ST.newSTRef ""
            __field__message <- ST.newSTRef ""
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__dbId
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__message
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__dbId <- ST.readSTRef __field__dbId
                                             !__val__message <- ST.readSTRef __field__message
                                             Prelude.pure
                                               (RegisterSQLSchemaException __val__dbId
                                                  __val__message)
              _idMap = HashMap.fromList [("dbId", 1), ("message", 2)]
            _parse 0)

instance DeepSeq.NFData RegisterSQLSchemaException where
  rnf (RegisterSQLSchemaException __field__dbId __field__message)
    = DeepSeq.rnf __field__dbId `Prelude.seq`
        DeepSeq.rnf __field__message `Prelude.seq` ()

instance Default.Default RegisterSQLSchemaException where
  def = RegisterSQLSchemaException "" ""

instance Hashable.Hashable RegisterSQLSchemaException where
  hashWithSalt __salt (RegisterSQLSchemaException _dbId _message)
    = Hashable.hashWithSalt (Hashable.hashWithSalt __salt _dbId)
        _message

instance Exception.Exception RegisterSQLSchemaException

newtype RegisterTokenizerException = RegisterTokenizerException{registerTokenizerException_message
                                                                :: Text.Text}
                                     deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON RegisterTokenizerException where
  toJSON (RegisterTokenizerException __field__message)
    = Aeson.object ("message" .= __field__message : Prelude.mempty)

instance Thrift.ThriftStruct RegisterTokenizerException where
  buildStruct _proxy (RegisterTokenizerException __field__message)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "message" (Thrift.getStringType _proxy) 1 0
           (Thrift.genText _proxy __field__message)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__message <- ST.newSTRef ""
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__message
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__message <- ST.readSTRef
                                                                  __field__message
                                             Prelude.pure
                                               (RegisterTokenizerException __val__message)
              _idMap = HashMap.fromList [("message", 1)]
            _parse 0)

instance DeepSeq.NFData RegisterTokenizerException where
  rnf (RegisterTokenizerException __field__message)
    = DeepSeq.rnf __field__message `Prelude.seq` ()

instance Default.Default RegisterTokenizerException where
  def = RegisterTokenizerException ""

instance Hashable.Hashable RegisterTokenizerException where
  hashWithSalt __salt (RegisterTokenizerException _message)
    = Hashable.hashWithSalt __salt _message

instance Exception.Exception RegisterTokenizerException

newtype TokenizerNotRegisteredException = TokenizerNotRegisteredException{tokenizerNotRegisteredException_message
                                                                          :: Text.Text}
                                          deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON TokenizerNotRegisteredException where
  toJSON (TokenizerNotRegisteredException __field__message)
    = Aeson.object ("message" .= __field__message : Prelude.mempty)

instance Thrift.ThriftStruct TokenizerNotRegisteredException where
  buildStruct _proxy
    (TokenizerNotRegisteredException __field__message)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "message" (Thrift.getStringType _proxy) 1 0
           (Thrift.genText _proxy __field__message)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__message <- ST.newSTRef ""
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__message
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__message <- ST.readSTRef
                                                                  __field__message
                                             Prelude.pure
                                               (TokenizerNotRegisteredException __val__message)
              _idMap = HashMap.fromList [("message", 1)]
            _parse 0)

instance DeepSeq.NFData TokenizerNotRegisteredException where
  rnf (TokenizerNotRegisteredException __field__message)
    = DeepSeq.rnf __field__message `Prelude.seq` ()

instance Default.Default TokenizerNotRegisteredException where
  def = TokenizerNotRegisteredException ""

instance Hashable.Hashable TokenizerNotRegisteredException where
  hashWithSalt __salt (TokenizerNotRegisteredException _message)
    = Hashable.hashWithSalt __salt _message

newtype TokenizerPrefixException = TokenizerPrefixException{tokenizerPrefixException_message
                                                            :: Text.Text}
                                   deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON TokenizerPrefixException where
  toJSON (TokenizerPrefixException __field__message)
    = Aeson.object ("message" .= __field__message : Prelude.mempty)

instance Thrift.ThriftStruct TokenizerPrefixException where
  buildStruct _proxy (TokenizerPrefixException __field__message)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "message" (Thrift.getStringType _proxy) 1 0
           (Thrift.genText _proxy __field__message)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__message <- ST.newSTRef ""
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__message
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__message <- ST.readSTRef
                                                                  __field__message
                                             Prelude.pure (TokenizerPrefixException __val__message)
              _idMap = HashMap.fromList [("message", 1)]
            _parse 0)

instance DeepSeq.NFData TokenizerPrefixException where
  rnf (TokenizerPrefixException __field__message)
    = DeepSeq.rnf __field__message `Prelude.seq` ()

instance Default.Default TokenizerPrefixException where
  def = TokenizerPrefixException ""

instance Hashable.Hashable TokenizerPrefixException where
  hashWithSalt __salt (TokenizerPrefixException _message)
    = Hashable.hashWithSalt __salt _message

newtype ModeException = ModeException{modeException_message ::
                                      Text.Text}
                        deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ModeException where
  toJSON (ModeException __field__message)
    = Aeson.object ("message" .= __field__message : Prelude.mempty)

instance Thrift.ThriftStruct ModeException where
  buildStruct _proxy (ModeException __field__message)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "message" (Thrift.getStringType _proxy) 1 0
           (Thrift.genText _proxy __field__message)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__message <- ST.newSTRef ""
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__message
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__message <- ST.readSTRef
                                                                  __field__message
                                             Prelude.pure (ModeException __val__message)
              _idMap = HashMap.fromList [("message", 1)]
            _parse 0)

instance DeepSeq.NFData ModeException where
  rnf (ModeException __field__message)
    = DeepSeq.rnf __field__message `Prelude.seq` ()

instance Default.Default ModeException where
  def = ModeException ""

instance Hashable.Hashable ModeException where
  hashWithSalt __salt (ModeException _message)
    = Hashable.hashWithSalt __salt _message

data FeedFatalException = FeedFatalException_tokenizerNotRegisteredException TokenizerNotRegisteredException
                        | FeedFatalException_tokenizerPrefixException TokenizerPrefixException
                        | FeedFatalException_modeException ModeException
                        | FeedFatalException_EMPTY
                          deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON FeedFatalException where
  toJSON
    (FeedFatalException_tokenizerNotRegisteredException
       __tokenizerNotRegisteredException)
    = Aeson.object
        ["tokenizerNotRegisteredException" .=
           __tokenizerNotRegisteredException]
  toJSON
    (FeedFatalException_tokenizerPrefixException
       __tokenizerPrefixException)
    = Aeson.object
        ["tokenizerPrefixException" .= __tokenizerPrefixException]
  toJSON (FeedFatalException_modeException __modeException)
    = Aeson.object ["modeException" .= __modeException]
  toJSON FeedFatalException_EMPTY = Aeson.object []

instance Thrift.ThriftStruct FeedFatalException where
  buildStruct _proxy
    (FeedFatalException_tokenizerNotRegisteredException
       __tokenizerNotRegisteredException)
    = Thrift.genStruct _proxy
        [Thrift.genField _proxy "tokenizerNotRegisteredException"
           (Thrift.getStructType _proxy)
           1
           0
           (Thrift.buildStruct _proxy __tokenizerNotRegisteredException)]
  buildStruct _proxy
    (FeedFatalException_tokenizerPrefixException
       __tokenizerPrefixException)
    = Thrift.genStruct _proxy
        [Thrift.genField _proxy "tokenizerPrefixException"
           (Thrift.getStructType _proxy)
           2
           0
           (Thrift.buildStruct _proxy __tokenizerPrefixException)]
  buildStruct _proxy
    (FeedFatalException_modeException __modeException)
    = Thrift.genStruct _proxy
        [Thrift.genField _proxy "modeException"
           (Thrift.getStructType _proxy)
           3
           0
           (Thrift.buildStruct _proxy __modeException)]
  buildStruct _proxy FeedFatalException_EMPTY
    = Thrift.genStruct _proxy []
  parseStruct _proxy
    = do _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
         case _fieldBegin of
           Thrift.FieldBegin _type _id _bool -> do case _id of
                                                     1 | _type == Thrift.getStructType _proxy ->
                                                         do _val <- Thrift.parseStruct _proxy
                                                            Thrift.parseStop _proxy
                                                            Prelude.return
                                                              (FeedFatalException_tokenizerNotRegisteredException
                                                                 _val)
                                                     2 | _type == Thrift.getStructType _proxy ->
                                                         do _val <- Thrift.parseStruct _proxy
                                                            Thrift.parseStop _proxy
                                                            Prelude.return
                                                              (FeedFatalException_tokenizerPrefixException
                                                                 _val)
                                                     3 | _type == Thrift.getStructType _proxy ->
                                                         do _val <- Thrift.parseStruct _proxy
                                                            Thrift.parseStop _proxy
                                                            Prelude.return
                                                              (FeedFatalException_modeException
                                                                 _val)
                                                     _ -> do Thrift.parseSkip _proxy _type
                                                               Prelude.Nothing
                                                             Thrift.parseStop _proxy
                                                             Prelude.return FeedFatalException_EMPTY
           Thrift.FieldEnd -> Prelude.return FeedFatalException_EMPTY
    where
      _idMap
        = HashMap.fromList
            [("tokenizerNotRegisteredException", 1),
             ("tokenizerPrefixException", 2), ("modeException", 3)]

instance DeepSeq.NFData FeedFatalException where
  rnf
    (FeedFatalException_tokenizerNotRegisteredException
       __tokenizerNotRegisteredException)
    = DeepSeq.rnf __tokenizerNotRegisteredException
  rnf
    (FeedFatalException_tokenizerPrefixException
       __tokenizerPrefixException)
    = DeepSeq.rnf __tokenizerPrefixException
  rnf (FeedFatalException_modeException __modeException)
    = DeepSeq.rnf __modeException
  rnf FeedFatalException_EMPTY = ()

instance Default.Default FeedFatalException where
  def = FeedFatalException_EMPTY

instance Hashable.Hashable FeedFatalException where
  hashWithSalt __salt
    (FeedFatalException_tokenizerNotRegisteredException
       _tokenizerNotRegisteredException)
    = Hashable.hashWithSalt __salt
        (Hashable.hashWithSalt 1 _tokenizerNotRegisteredException)
  hashWithSalt __salt
    (FeedFatalException_tokenizerPrefixException
       _tokenizerPrefixException)
    = Hashable.hashWithSalt __salt
        (Hashable.hashWithSalt 2 _tokenizerPrefixException)
  hashWithSalt __salt
    (FeedFatalException_modeException _modeException)
    = Hashable.hashWithSalt __salt
        (Hashable.hashWithSalt 3 _modeException)
  hashWithSalt __salt FeedFatalException_EMPTY
    = Hashable.hashWithSalt __salt (0 :: Prelude.Int)

newtype FeedException = FeedException{feedException_feedFatalException
                                      :: FeedFatalException}
                        deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON FeedException where
  toJSON (FeedException __field__feedFatalException)
    = Aeson.object
        ("feedFatalException" .= __field__feedFatalException :
           Prelude.mempty)

instance Thrift.ThriftStruct FeedException where
  buildStruct _proxy (FeedException __field__feedFatalException)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "feedFatalException"
           (Thrift.getStructType _proxy)
           1
           0
           (Thrift.buildStruct _proxy __field__feedFatalException)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__feedFatalException <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__feedFatalException
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__feedFatalException <- ST.readSTRef
                                                                             __field__feedFatalException
                                             Prelude.pure (FeedException __val__feedFatalException)
              _idMap = HashMap.fromList [("feedFatalException", 1)]
            _parse 0)

instance DeepSeq.NFData FeedException where
  rnf (FeedException __field__feedFatalException)
    = DeepSeq.rnf __field__feedFatalException `Prelude.seq` ()

instance Default.Default FeedException where
  def = FeedException Default.def

instance Hashable.Hashable FeedException where
  hashWithSalt __salt (FeedException _feedFatalException)
    = Hashable.hashWithSalt __salt _feedFatalException

instance Exception.Exception FeedException

data FeedParseFailure = FeedParseFailure{feedParseFailure_input ::
                                         Text.Text,
                                         feedParseFailure_contexts :: [Text.Text],
                                         feedParseFailure_description :: Text.Text}
                        deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON FeedParseFailure where
  toJSON
    (FeedParseFailure __field__input __field__contexts
       __field__description)
    = Aeson.object
        ("input" .= __field__input :
           "contexts" .= __field__contexts :
             "description" .= __field__description : Prelude.mempty)

instance Thrift.ThriftStruct FeedParseFailure where
  buildStruct _proxy
    (FeedParseFailure __field__input __field__contexts
       __field__description)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "input" (Thrift.getStringType _proxy) 1 0
           (Thrift.genText _proxy __field__input)
           :
           Thrift.genField _proxy "contexts" (Thrift.getListType _proxy) 2 1
             (Thrift.genList _proxy (Thrift.getStringType _proxy)
                (Thrift.genText _proxy)
                __field__contexts)
             :
             Thrift.genField _proxy "description" (Thrift.getStringType _proxy)
               3
               2
               (Thrift.genText _proxy __field__description)
               : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__input <- ST.newSTRef ""
            __field__contexts <- ST.newSTRef Default.def
            __field__description <- ST.newSTRef ""
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__input
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__contexts
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__description
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__input <- ST.readSTRef __field__input
                                             !__val__contexts <- ST.readSTRef __field__contexts
                                             !__val__description <- ST.readSTRef
                                                                      __field__description
                                             Prelude.pure
                                               (FeedParseFailure __val__input __val__contexts
                                                  __val__description)
              _idMap
                = HashMap.fromList
                    [("input", 1), ("contexts", 2), ("description", 3)]
            _parse 0)

instance DeepSeq.NFData FeedParseFailure where
  rnf
    (FeedParseFailure __field__input __field__contexts
       __field__description)
    = DeepSeq.rnf __field__input `Prelude.seq`
        DeepSeq.rnf __field__contexts `Prelude.seq`
          DeepSeq.rnf __field__description `Prelude.seq` ()

instance Default.Default FeedParseFailure where
  def = FeedParseFailure "" Default.def ""

instance Hashable.Hashable FeedParseFailure where
  hashWithSalt __salt
    (FeedParseFailure _input _contexts _description)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _input)
           _contexts)
        _description

newtype FeedTimeoutFailure = FeedTimeoutFailure{feedTimeoutFailure_message
                                                :: Text.Text}
                             deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON FeedTimeoutFailure where
  toJSON (FeedTimeoutFailure __field__message)
    = Aeson.object ("message" .= __field__message : Prelude.mempty)

instance Thrift.ThriftStruct FeedTimeoutFailure where
  buildStruct _proxy (FeedTimeoutFailure __field__message)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "message" (Thrift.getStringType _proxy) 1 0
           (Thrift.genText _proxy __field__message)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__message <- ST.newSTRef ""
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__message
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__message <- ST.readSTRef
                                                                  __field__message
                                             Prelude.pure (FeedTimeoutFailure __val__message)
              _idMap = HashMap.fromList [("message", 1)]
            _parse 0)

instance DeepSeq.NFData FeedTimeoutFailure where
  rnf (FeedTimeoutFailure __field__message)
    = DeepSeq.rnf __field__message `Prelude.seq` ()

instance Default.Default FeedTimeoutFailure where
  def = FeedTimeoutFailure ""

instance Hashable.Hashable FeedTimeoutFailure where
  hashWithSalt __salt (FeedTimeoutFailure _message)
    = Hashable.hashWithSalt __salt _message

data FeedPartialSuccess = FeedPartialSuccess{}
                          deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON FeedPartialSuccess where
  toJSON FeedPartialSuccess = Aeson.object Prelude.mempty

instance Thrift.ThriftStruct FeedPartialSuccess where
  buildStruct _proxy FeedPartialSuccess = Thrift.genStruct _proxy []
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do Prelude.pure (FeedPartialSuccess)
              _idMap = HashMap.fromList []
            _parse 0)

instance DeepSeq.NFData FeedPartialSuccess where
  rnf FeedPartialSuccess = ()

instance Default.Default FeedPartialSuccess where
  def = FeedPartialSuccess

instance Hashable.Hashable FeedPartialSuccess where
  hashWithSalt __salt FeedPartialSuccess = __salt

newtype FeedCompleteSuccess = FeedCompleteSuccess{feedCompleteSuccess_leftover
                                                  :: Text.Text}
                              deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON FeedCompleteSuccess where
  toJSON (FeedCompleteSuccess __field__leftover)
    = Aeson.object ("leftover" .= __field__leftover : Prelude.mempty)

instance Thrift.ThriftStruct FeedCompleteSuccess where
  buildStruct _proxy (FeedCompleteSuccess __field__leftover)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "leftover" (Thrift.getStringType _proxy) 1
           0
           (Thrift.genText _proxy __field__leftover)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__leftover <- ST.newSTRef ""
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__leftover
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__leftover <- ST.readSTRef
                                                                   __field__leftover
                                             Prelude.pure (FeedCompleteSuccess __val__leftover)
              _idMap = HashMap.fromList [("leftover", 1)]
            _parse 0)

instance DeepSeq.NFData FeedCompleteSuccess where
  rnf (FeedCompleteSuccess __field__leftover)
    = DeepSeq.rnf __field__leftover `Prelude.seq` ()

instance Default.Default FeedCompleteSuccess where
  def = FeedCompleteSuccess ""

instance Hashable.Hashable FeedCompleteSuccess where
  hashWithSalt __salt (FeedCompleteSuccess _leftover)
    = Hashable.hashWithSalt __salt _leftover

data FeedResult = FeedResult_feedParseFailure FeedParseFailure
                | FeedResult_feedTimeoutFailure FeedTimeoutFailure
                | FeedResult_feedPartialSuccess FeedPartialSuccess
                | FeedResult_feedCompleteSuccess FeedCompleteSuccess
                | FeedResult_EMPTY
                  deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON FeedResult where
  toJSON (FeedResult_feedParseFailure __feedParseFailure)
    = Aeson.object ["feedParseFailure" .= __feedParseFailure]
  toJSON (FeedResult_feedTimeoutFailure __feedTimeoutFailure)
    = Aeson.object ["feedTimeoutFailure" .= __feedTimeoutFailure]
  toJSON (FeedResult_feedPartialSuccess __feedPartialSuccess)
    = Aeson.object ["feedPartialSuccess" .= __feedPartialSuccess]
  toJSON (FeedResult_feedCompleteSuccess __feedCompleteSuccess)
    = Aeson.object ["feedCompleteSuccess" .= __feedCompleteSuccess]
  toJSON FeedResult_EMPTY = Aeson.object []

instance Thrift.ThriftStruct FeedResult where
  buildStruct _proxy (FeedResult_feedParseFailure __feedParseFailure)
    = Thrift.genStruct _proxy
        [Thrift.genField _proxy "feedParseFailure"
           (Thrift.getStructType _proxy)
           1
           0
           (Thrift.buildStruct _proxy __feedParseFailure)]
  buildStruct _proxy
    (FeedResult_feedTimeoutFailure __feedTimeoutFailure)
    = Thrift.genStruct _proxy
        [Thrift.genField _proxy "feedTimeoutFailure"
           (Thrift.getStructType _proxy)
           2
           0
           (Thrift.buildStruct _proxy __feedTimeoutFailure)]
  buildStruct _proxy
    (FeedResult_feedPartialSuccess __feedPartialSuccess)
    = Thrift.genStruct _proxy
        [Thrift.genField _proxy "feedPartialSuccess"
           (Thrift.getStructType _proxy)
           3
           0
           (Thrift.buildStruct _proxy __feedPartialSuccess)]
  buildStruct _proxy
    (FeedResult_feedCompleteSuccess __feedCompleteSuccess)
    = Thrift.genStruct _proxy
        [Thrift.genField _proxy "feedCompleteSuccess"
           (Thrift.getStructType _proxy)
           4
           0
           (Thrift.buildStruct _proxy __feedCompleteSuccess)]
  buildStruct _proxy FeedResult_EMPTY = Thrift.genStruct _proxy []
  parseStruct _proxy
    = do _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
         case _fieldBegin of
           Thrift.FieldBegin _type _id _bool -> do case _id of
                                                     1 | _type == Thrift.getStructType _proxy ->
                                                         do _val <- Thrift.parseStruct _proxy
                                                            Thrift.parseStop _proxy
                                                            Prelude.return
                                                              (FeedResult_feedParseFailure _val)
                                                     2 | _type == Thrift.getStructType _proxy ->
                                                         do _val <- Thrift.parseStruct _proxy
                                                            Thrift.parseStop _proxy
                                                            Prelude.return
                                                              (FeedResult_feedTimeoutFailure _val)
                                                     3 | _type == Thrift.getStructType _proxy ->
                                                         do _val <- Thrift.parseStruct _proxy
                                                            Thrift.parseStop _proxy
                                                            Prelude.return
                                                              (FeedResult_feedPartialSuccess _val)
                                                     4 | _type == Thrift.getStructType _proxy ->
                                                         do _val <- Thrift.parseStruct _proxy
                                                            Thrift.parseStop _proxy
                                                            Prelude.return
                                                              (FeedResult_feedCompleteSuccess _val)
                                                     _ -> do Thrift.parseSkip _proxy _type
                                                               Prelude.Nothing
                                                             Thrift.parseStop _proxy
                                                             Prelude.return FeedResult_EMPTY
           Thrift.FieldEnd -> Prelude.return FeedResult_EMPTY
    where
      _idMap
        = HashMap.fromList
            [("feedParseFailure", 1), ("feedTimeoutFailure", 2),
             ("feedPartialSuccess", 3), ("feedCompleteSuccess", 4)]

instance DeepSeq.NFData FeedResult where
  rnf (FeedResult_feedParseFailure __feedParseFailure)
    = DeepSeq.rnf __feedParseFailure
  rnf (FeedResult_feedTimeoutFailure __feedTimeoutFailure)
    = DeepSeq.rnf __feedTimeoutFailure
  rnf (FeedResult_feedPartialSuccess __feedPartialSuccess)
    = DeepSeq.rnf __feedPartialSuccess
  rnf (FeedResult_feedCompleteSuccess __feedCompleteSuccess)
    = DeepSeq.rnf __feedCompleteSuccess
  rnf FeedResult_EMPTY = ()

instance Default.Default FeedResult where
  def = FeedResult_EMPTY

instance Hashable.Hashable FeedResult where
  hashWithSalt __salt (FeedResult_feedParseFailure _feedParseFailure)
    = Hashable.hashWithSalt __salt
        (Hashable.hashWithSalt 1 _feedParseFailure)
  hashWithSalt __salt
    (FeedResult_feedTimeoutFailure _feedTimeoutFailure)
    = Hashable.hashWithSalt __salt
        (Hashable.hashWithSalt 2 _feedTimeoutFailure)
  hashWithSalt __salt
    (FeedResult_feedPartialSuccess _feedPartialSuccess)
    = Hashable.hashWithSalt __salt
        (Hashable.hashWithSalt 3 _feedPartialSuccess)
  hashWithSalt __salt
    (FeedResult_feedCompleteSuccess _feedCompleteSuccess)
    = Hashable.hashWithSalt __salt
        (Hashable.hashWithSalt 4 _feedCompleteSuccess)
  hashWithSalt __salt FeedResult_EMPTY
    = Hashable.hashWithSalt __salt (0 :: Prelude.Int)

data BatchFeedResult = BatchFeedResult{batchFeedResult_batchId ::
                                       BatchId,
                                       batchFeedResult_topToken :: Token,
                                       batchFeedResult_feedResult :: FeedResult}
                       deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON BatchFeedResult where
  toJSON
    (BatchFeedResult __field__batchId __field__topToken
       __field__feedResult)
    = Aeson.object
        ("batchId" .= __field__batchId :
           "topToken" .= __field__topToken :
             "feedResult" .= __field__feedResult : Prelude.mempty)

instance Thrift.ThriftStruct BatchFeedResult where
  buildStruct _proxy
    (BatchFeedResult __field__batchId __field__topToken
       __field__feedResult)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "batchId" (Thrift.getI64Type _proxy) 1 0
           (Thrift.genI64 _proxy __field__batchId)
           :
           Thrift.genField _proxy "topToken" (Thrift.getI64Type _proxy) 2 1
             (Thrift.genI64 _proxy __field__topToken)
             :
             Thrift.genField _proxy "feedResult" (Thrift.getStructType _proxy) 3
               2
               (Thrift.buildStruct _proxy __field__feedResult)
               : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__batchId <- ST.newSTRef Default.def
            __field__topToken <- ST.newSTRef Default.def
            __field__feedResult <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__batchId
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__topToken
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__feedResult
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__batchId <- ST.readSTRef
                                                                  __field__batchId
                                             !__val__topToken <- ST.readSTRef __field__topToken
                                             !__val__feedResult <- ST.readSTRef __field__feedResult
                                             Prelude.pure
                                               (BatchFeedResult __val__batchId __val__topToken
                                                  __val__feedResult)
              _idMap
                = HashMap.fromList
                    [("batchId", 1), ("topToken", 2), ("feedResult", 3)]
            _parse 0)

instance DeepSeq.NFData BatchFeedResult where
  rnf
    (BatchFeedResult __field__batchId __field__topToken
       __field__feedResult)
    = DeepSeq.rnf __field__batchId `Prelude.seq`
        DeepSeq.rnf __field__topToken `Prelude.seq`
          DeepSeq.rnf __field__feedResult `Prelude.seq` ()

instance Default.Default BatchFeedResult where
  def = BatchFeedResult Default.def Default.def Default.def

instance Hashable.Hashable BatchFeedResult where
  hashWithSalt __salt
    (BatchFeedResult _batchId _topToken _feedResult)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _batchId)
           _topToken)
        _feedResult

data Mode = Mode_LEXING
          | Mode_PARSING_WITHOUT_GUARDS
          | Mode_PARSING_WITH_GUARDS
          | Mode_PARSING_WITH_GUARDS_AND_TYPE_CHECKING
          | Mode__UNKNOWN Prelude.Int
            deriving (Prelude.Eq, Prelude.Show)

instance Aeson.ToJSON Mode where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData Mode where
  rnf __Mode = Prelude.seq __Mode ()

instance Default.Default Mode where
  def = Mode_LEXING

instance Hashable.Hashable Mode where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum Mode where
  toThriftEnum 1 = Mode_LEXING
  toThriftEnum 2 = Mode_PARSING_WITHOUT_GUARDS
  toThriftEnum 3 = Mode_PARSING_WITH_GUARDS
  toThriftEnum 4 = Mode_PARSING_WITH_GUARDS_AND_TYPE_CHECKING
  toThriftEnum val = Mode__UNKNOWN val
  fromThriftEnum Mode_LEXING = 1
  fromThriftEnum Mode_PARSING_WITHOUT_GUARDS = 2
  fromThriftEnum Mode_PARSING_WITH_GUARDS = 3
  fromThriftEnum Mode_PARSING_WITH_GUARDS_AND_TYPE_CHECKING = 4
  fromThriftEnum (Mode__UNKNOWN val) = val
  allThriftEnumValues
    = [Mode_LEXING, Mode_PARSING_WITHOUT_GUARDS,
       Mode_PARSING_WITH_GUARDS,
       Mode_PARSING_WITH_GUARDS_AND_TYPE_CHECKING]
  toThriftEnumEither 1 = Prelude.Right Mode_LEXING
  toThriftEnumEither 2 = Prelude.Right Mode_PARSING_WITHOUT_GUARDS
  toThriftEnumEither 3 = Prelude.Right Mode_PARSING_WITH_GUARDS
  toThriftEnumEither 4
    = Prelude.Right Mode_PARSING_WITH_GUARDS_AND_TYPE_CHECKING
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum Mode: " ++
           Prelude.show val)

instance Prelude.Ord Mode where
  compare = Function.on Prelude.compare Thrift.fromThriftEnum