-----------------------------------------------------------------
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
--  @generated
-----------------------------------------------------------------
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE BangPatterns #-}
{-# OPTIONS_GHC -fno-warn-unused-imports#-}
{-# OPTIONS_GHC -fno-warn-overlapping-patterns#-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns#-}
{-# LANGUAGE GADTs #-}
module Picard.Picard.Service
       (PicardCommand(..), reqName', reqParser', respWriter',
        onewayFunctions')
       where
import qualified Control.Exception as Exception
import qualified Control.Monad.ST.Trans as ST
import qualified Control.Monad.Trans.Class as Trans
import qualified Data.ByteString.Builder as Builder
import qualified Data.Default as Default
import qualified Data.HashMap.Strict as HashMap
import qualified Data.Int as Int
import qualified Data.Proxy as Proxy
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text
import qualified Picard.Types as Types
import qualified Prelude as Prelude
import qualified Thrift.Binary.Parser as Parser
import qualified Thrift.Codegen as Thrift
import qualified Thrift.Processor as Thrift
import qualified Thrift.Protocol.ApplicationException.Types
       as Thrift
import Control.Applicative ((<*), (*>))
import Data.Monoid ((<>))
import Prelude ((<$>), (<*>), (++), (.), (==))

data PicardCommand a where
  RegisterSQLSchema ::
    Types.DBId -> Types.SQLSchema -> PicardCommand ()
  RegisterTokenizer :: Text.Text -> PicardCommand ()
  Feed ::
    Types.InputIds ->
      Types.Token -> Types.Mode -> PicardCommand Types.FeedResult
  BatchFeed ::
    [Types.InputIds] ->
      [[Types.Token]] ->
        Types.Mode -> PicardCommand [Types.BatchFeedResult]

instance Thrift.Processor PicardCommand where
  reqName = reqName'
  reqParser = reqParser'
  respWriter = respWriter'
  onewayFns _ = onewayFunctions'

reqName' :: PicardCommand a -> Text.Text
reqName' (RegisterSQLSchema __field__dbId __field__sqlSchema)
  = "registerSQLSchema"
reqName' (RegisterTokenizer __field__jsonConfig)
  = "registerTokenizer"
reqName' (Feed __field__inputIds __field__token __field__mode)
  = "feed"
reqName'
  (BatchFeed __field__inputIds __field__topTokens __field__mode)
  = "batchFeed"

reqParser' ::
             Thrift.Protocol p =>
             Proxy.Proxy p ->
               Text.Text -> Parser.Parser (Thrift.Some PicardCommand)
reqParser' _proxy "registerSQLSchema"
  = ST.runSTT
      (do Prelude.return ()
          __field__dbId <- ST.newSTRef ""
          __field__sqlSchema <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStringType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseText
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__dbId
                                                                        _val
                                                               2 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef
                                                                        __field__sqlSchema
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__dbId <- ST.readSTRef __field__dbId
                                           !__val__sqlSchema <- ST.readSTRef __field__sqlSchema
                                           Prelude.pure
                                             (Thrift.Some
                                                (RegisterSQLSchema __val__dbId __val__sqlSchema))
            _idMap = HashMap.fromList [("dbId", 1), ("sqlSchema", 2)]
          _parse 0)
reqParser' _proxy "registerTokenizer"
  = ST.runSTT
      (do Prelude.return ()
          __field__jsonConfig <- ST.newSTRef ""
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStringType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseText
                                                                                    _proxy)
                                                                      ST.writeSTRef
                                                                        __field__jsonConfig
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__jsonConfig <- ST.readSTRef
                                                                   __field__jsonConfig
                                           Prelude.pure
                                             (Thrift.Some (RegisterTokenizer __val__jsonConfig))
            _idMap = HashMap.fromList [("jsonConfig", 1)]
          _parse 0)
reqParser' _proxy "feed"
  = ST.runSTT
      (do Prelude.return ()
          __field__inputIds <- ST.newSTRef Default.def
          __field__token <- ST.newSTRef Default.def
          __field__mode <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getListType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Prelude.snd <$>
                                                                                    Thrift.parseList
                                                                                      _proxy
                                                                                      (Thrift.parseI64
                                                                                         _proxy))
                                                                      ST.writeSTRef
                                                                        __field__inputIds
                                                                        _val
                                                               2 | _type == Thrift.getI64Type _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseI64
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__token
                                                                        _val
                                                               3 | _type == Thrift.getI32Type _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseEnum
                                                                                    _proxy
                                                                                    "Mode")
                                                                      ST.writeSTRef __field__mode
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__inputIds <- ST.readSTRef
                                                                 __field__inputIds
                                           !__val__token <- ST.readSTRef __field__token
                                           !__val__mode <- ST.readSTRef __field__mode
                                           Prelude.pure
                                             (Thrift.Some
                                                (Feed __val__inputIds __val__token __val__mode))
            _idMap
              = HashMap.fromList [("inputIds", 1), ("token", 2), ("mode", 3)]
          _parse 0)
reqParser' _proxy "batchFeed"
  = ST.runSTT
      (do Prelude.return ()
          __field__inputIds <- ST.newSTRef Default.def
          __field__topTokens <- ST.newSTRef Default.def
          __field__mode <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getListType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Prelude.snd <$>
                                                                                    Thrift.parseList
                                                                                      _proxy
                                                                                      (Prelude.snd
                                                                                         <$>
                                                                                         Thrift.parseList
                                                                                           _proxy
                                                                                           (Thrift.parseI64
                                                                                              _proxy)))
                                                                      ST.writeSTRef
                                                                        __field__inputIds
                                                                        _val
                                                               2 | _type ==
                                                                     Thrift.getListType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Prelude.snd <$>
                                                                                    Thrift.parseList
                                                                                      _proxy
                                                                                      (Prelude.snd
                                                                                         <$>
                                                                                         Thrift.parseList
                                                                                           _proxy
                                                                                           (Thrift.parseI64
                                                                                              _proxy)))
                                                                      ST.writeSTRef
                                                                        __field__topTokens
                                                                        _val
                                                               3 | _type == Thrift.getI32Type _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseEnum
                                                                                    _proxy
                                                                                    "Mode")
                                                                      ST.writeSTRef __field__mode
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__inputIds <- ST.readSTRef
                                                                 __field__inputIds
                                           !__val__topTokens <- ST.readSTRef __field__topTokens
                                           !__val__mode <- ST.readSTRef __field__mode
                                           Prelude.pure
                                             (Thrift.Some
                                                (BatchFeed __val__inputIds __val__topTokens
                                                   __val__mode))
            _idMap
              = HashMap.fromList [("inputIds", 1), ("topTokens", 2), ("mode", 3)]
          _parse 0)
reqParser' _ funName
  = Prelude.errorWithoutStackTrace
      ("unknown function call: " ++ Text.unpack funName)

respWriter' ::
              Thrift.Protocol p =>
              Proxy.Proxy p ->
                Int.Int32 ->
                  PicardCommand a ->
                    Prelude.Either Exception.SomeException a ->
                      (Builder.Builder,
                       Prelude.Maybe (Exception.SomeException, Thrift.Blame))
respWriter' _proxy _seqNum RegisterSQLSchema{} _r
  = (Thrift.genMsgBegin _proxy "registerSQLSchema" _msgType _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Types.RegisterSQLSchemaException{} <- Exception.fromException
                                                                          _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "fail" (Thrift.getStructType _proxy) 1 0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2, Thrift.genStruct _proxy [],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum RegisterTokenizer{} _r
  = (Thrift.genMsgBegin _proxy "registerTokenizer" _msgType _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Types.RegisterTokenizerException{} <- Exception.fromException
                                                                          _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "fail" (Thrift.getStructType _proxy) 1 0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2, Thrift.genStruct _proxy [],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum Feed{} _r
  = (Thrift.genMsgBegin _proxy "feed" _msgType _seqNum <> _msgBody <>
       Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just _e@Types.FeedException{} <- Exception.fromException
                                                                        _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "fail" (Thrift.getStructType _proxy) 1 0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum BatchFeed{} _r
  = (Thrift.genMsgBegin _proxy "batchFeed" _msgType _seqNum <>
       _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just _e@Types.FeedException{} <- Exception.fromException
                                                                        _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "fail" (Thrift.getStructType _proxy) 1 0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getListType _proxy) 0 0
                                         (Thrift.genList _proxy (Thrift.getStructType _proxy)
                                            (Thrift.buildStruct _proxy)
                                            _result)],
                                    Prelude.Nothing)

onewayFunctions' :: [Text.Text]
onewayFunctions' = []