/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <gen-py3/picard/clients_wrapper.h>

namespace cpp2 {


folly::Future<folly::Unit>
PicardClientWrapper::registerSQLSchema(
    apache::thrift::RpcOptions& rpcOptions,
    std::string arg_dbId,
    ::cpp2::SQLSchema arg_sqlSchema) {
  auto* client = static_cast<::cpp2::PicardAsyncClient*>(async_client_.get());
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<folly::Unit>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_registerSQLSchema, channel_);
  client->registerSQLSchema(
    rpcOptions,
    std::move(callback),
    arg_dbId,
    arg_sqlSchema
  );
  return _future;
}

folly::Future<folly::Unit>
PicardClientWrapper::registerTokenizer(
    apache::thrift::RpcOptions& rpcOptions,
    std::string arg_jsonConfig) {
  auto* client = static_cast<::cpp2::PicardAsyncClient*>(async_client_.get());
  folly::Promise<folly::Unit> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<folly::Unit>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_registerTokenizer, channel_);
  client->registerTokenizer(
    rpcOptions,
    std::move(callback),
    arg_jsonConfig
  );
  return _future;
}

folly::Future<::cpp2::FeedResult>
PicardClientWrapper::feed(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<int64_t> arg_inputIds,
    int64_t arg_token,
    ::cpp2::Mode arg_mode) {
  auto* client = static_cast<::cpp2::PicardAsyncClient*>(async_client_.get());
  folly::Promise<::cpp2::FeedResult> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<::cpp2::FeedResult>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_feed, channel_);
  client->feed(
    rpcOptions,
    std::move(callback),
    arg_inputIds,
    arg_token,
    arg_mode
  );
  return _future;
}

folly::Future<std::vector<::cpp2::BatchFeedResult>>
PicardClientWrapper::batchFeed(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<std::vector<int64_t>> arg_inputIds,
    std::vector<std::vector<int64_t>> arg_topTokens,
    ::cpp2::Mode arg_mode) {
  auto* client = static_cast<::cpp2::PicardAsyncClient*>(async_client_.get());
  folly::Promise<std::vector<::cpp2::BatchFeedResult>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<::thrift::py3::FutureCallback<std::vector<::cpp2::BatchFeedResult>>>(
    std::move(_promise), rpcOptions, client->recv_wrapped_batchFeed, channel_);
  client->batchFeed(
    rpcOptions,
    std::move(callback),
    arg_inputIds,
    arg_topTokens,
    arg_mode
  );
  return _future;
}

} // namespace cpp2
