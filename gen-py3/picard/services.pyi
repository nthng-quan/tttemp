#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import folly.iobuf as _fbthrift_iobuf
import typing as _typing
from thrift.py3.server import RequestContext, ServiceInterface
from abc import abstractmethod, ABCMeta

import picard.types as _picard_types

_PicardInterfaceT = _typing.TypeVar('_PicardInterfaceT', bound='PicardInterface')


class PicardInterface(
    ServiceInterface,
    metaclass=ABCMeta,
):

    @staticmethod
    def pass_context_registerSQLSchema(
        fn: _typing.Callable[
                [_PicardInterfaceT, RequestContext, str, _picard_types.SQLSchema],
                _typing.Coroutine[_typing.Any, _typing.Any, None]
        ]
    ) -> _typing.Callable[
        [_PicardInterfaceT, str, _picard_types.SQLSchema],
        _typing.Coroutine[_typing.Any, _typing.Any, None]
    ]: ...

    @abstractmethod
    async def registerSQLSchema(
        self,
        dbId: str,
        sqlSchema: _picard_types.SQLSchema
    ) -> None: ...

    @staticmethod
    def pass_context_registerTokenizer(
        fn: _typing.Callable[
                [_PicardInterfaceT, RequestContext, str],
                _typing.Coroutine[_typing.Any, _typing.Any, None]
        ]
    ) -> _typing.Callable[
        [_PicardInterfaceT, str],
        _typing.Coroutine[_typing.Any, _typing.Any, None]
    ]: ...

    @abstractmethod
    async def registerTokenizer(
        self,
        jsonConfig: str
    ) -> None: ...

    @staticmethod
    def pass_context_feed(
        fn: _typing.Callable[
                [_PicardInterfaceT, RequestContext, _typing.Sequence[int], int, _picard_types.Mode],
                _typing.Coroutine[_typing.Any, _typing.Any, _picard_types.FeedResult]
        ]
    ) -> _typing.Callable[
        [_PicardInterfaceT, _typing.Sequence[int], int, _picard_types.Mode],
        _typing.Coroutine[_typing.Any, _typing.Any, _picard_types.FeedResult]
    ]: ...

    @abstractmethod
    async def feed(
        self,
        inputIds: _typing.Sequence[int],
        token: int,
        mode: _picard_types.Mode
    ) -> _picard_types.FeedResult: ...

    @staticmethod
    def pass_context_batchFeed(
        fn: _typing.Callable[
                [_PicardInterfaceT, RequestContext, _typing.Sequence[_typing.Sequence[int]], _typing.Sequence[_typing.Sequence[int]], _picard_types.Mode],
                _typing.Coroutine[_typing.Any, _typing.Any, _typing.Sequence[_picard_types.BatchFeedResult]]
        ]
    ) -> _typing.Callable[
        [_PicardInterfaceT, _typing.Sequence[_typing.Sequence[int]], _typing.Sequence[_typing.Sequence[int]], _picard_types.Mode],
        _typing.Coroutine[_typing.Any, _typing.Any, _typing.Sequence[_picard_types.BatchFeedResult]]
    ]: ...

    @abstractmethod
    async def batchFeed(
        self,
        inputIds: _typing.Sequence[_typing.Sequence[int]],
        topTokens: _typing.Sequence[_typing.Sequence[int]],
        mode: _picard_types.Mode
    ) -> _typing.Sequence[_picard_types.BatchFeedResult]: ...
    pass


