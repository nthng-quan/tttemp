/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once

#include <functional>
#include <folly/Range.h>

#include <thrift/lib/py3/enums.h>
#include "gen-cpp2/picard_data.h"
#include "gen-cpp2/picard_types.h"
#include "gen-cpp2/picard_metadata.h"
namespace thrift {
namespace py3 {


template<>
const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::cpp2::ColumnType>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::cpp2::Mode>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::cpp2::FeedFatalException::Type>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}

template<>
const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::cpp2::FeedResult::Type>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}


template<>
void reset_field<::cpp2::SQLSchema>(
    ::cpp2::SQLSchema& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.columnNames_ref().copy_from(default_inst<::cpp2::SQLSchema>().columnNames_ref());
      return;
    case 1:
      obj.columnTypes_ref().copy_from(default_inst<::cpp2::SQLSchema>().columnTypes_ref());
      return;
    case 2:
      obj.tableNames_ref().copy_from(default_inst<::cpp2::SQLSchema>().tableNames_ref());
      return;
    case 3:
      obj.columnToTable_ref().copy_from(default_inst<::cpp2::SQLSchema>().columnToTable_ref());
      return;
    case 4:
      obj.tableToColumns_ref().copy_from(default_inst<::cpp2::SQLSchema>().tableToColumns_ref());
      return;
    case 5:
      obj.foreignKeys_ref().copy_from(default_inst<::cpp2::SQLSchema>().foreignKeys_ref());
      return;
    case 6:
      obj.primaryKeys_ref().copy_from(default_inst<::cpp2::SQLSchema>().primaryKeys_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::RegisterSQLSchemaException>(
    ::cpp2::RegisterSQLSchemaException& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.dbId_ref().copy_from(default_inst<::cpp2::RegisterSQLSchemaException>().dbId_ref());
      return;
    case 1:
      obj.message_ref().copy_from(default_inst<::cpp2::RegisterSQLSchemaException>().message_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::RegisterTokenizerException>(
    ::cpp2::RegisterTokenizerException& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.message_ref().copy_from(default_inst<::cpp2::RegisterTokenizerException>().message_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::TokenizerNotRegisteredException>(
    ::cpp2::TokenizerNotRegisteredException& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.message_ref().copy_from(default_inst<::cpp2::TokenizerNotRegisteredException>().message_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::TokenizerPrefixException>(
    ::cpp2::TokenizerPrefixException& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.message_ref().copy_from(default_inst<::cpp2::TokenizerPrefixException>().message_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::ModeException>(
    ::cpp2::ModeException& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.message_ref().copy_from(default_inst<::cpp2::ModeException>().message_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::FeedException>(
    ::cpp2::FeedException& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.feedFatalException_ref().copy_from(default_inst<::cpp2::FeedException>().feedFatalException_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::FeedParseFailure>(
    ::cpp2::FeedParseFailure& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.input_ref().copy_from(default_inst<::cpp2::FeedParseFailure>().input_ref());
      return;
    case 1:
      obj.contexts_ref().copy_from(default_inst<::cpp2::FeedParseFailure>().contexts_ref());
      return;
    case 2:
      obj.description_ref().copy_from(default_inst<::cpp2::FeedParseFailure>().description_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::FeedTimeoutFailure>(
    ::cpp2::FeedTimeoutFailure& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.message_ref().copy_from(default_inst<::cpp2::FeedTimeoutFailure>().message_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::FeedPartialSuccess>(
    ::cpp2::FeedPartialSuccess& obj, uint16_t index) {
  switch (index) {
  }
}

template<>
void reset_field<::cpp2::FeedCompleteSuccess>(
    ::cpp2::FeedCompleteSuccess& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.leftover_ref().copy_from(default_inst<::cpp2::FeedCompleteSuccess>().leftover_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::BatchFeedResult>(
    ::cpp2::BatchFeedResult& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.batchId_ref().copy_from(default_inst<::cpp2::BatchFeedResult>().batchId_ref());
      return;
    case 1:
      obj.topToken_ref().copy_from(default_inst<::cpp2::BatchFeedResult>().topToken_ref());
      return;
    case 2:
      obj.feedResult_ref().copy_from(default_inst<::cpp2::BatchFeedResult>().feedResult_ref());
      return;
  }
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::SQLSchema>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::RegisterSQLSchemaException>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::RegisterTokenizerException>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::TokenizerNotRegisteredException>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::TokenizerPrefixException>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::ModeException>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::FeedFatalException>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::FeedException>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::FeedParseFailure>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::FeedTimeoutFailure>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::FeedPartialSuccess>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::FeedCompleteSuccess>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::FeedResult>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::BatchFeedResult>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}
} // namespace py3
} // namespace thrift
