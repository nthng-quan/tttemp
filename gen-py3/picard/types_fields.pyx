#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cython.operator cimport dereference as deref
from libcpp.memory cimport make_unique, unique_ptr, shared_ptr

cimport thrift.py3.types
from thrift.py3.types cimport (
    reset_field as __reset_field,
    StructFieldsSetter as __StructFieldsSetter
)

from thrift.py3.types cimport const_pointer_cast


@__cython.auto_pickle(False)
cdef class __SQLSchema_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __SQLSchema_FieldsSetter create(_picard_types.cSQLSchema* struct_cpp_obj):
        cdef __SQLSchema_FieldsSetter __fbthrift_inst = __SQLSchema_FieldsSetter.__new__(__SQLSchema_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"columnNames")] = __SQLSchema_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"columnTypes")] = __SQLSchema_FieldsSetter._set_field_1
        __fbthrift_inst._setters[__cstring_view(<const char*>"tableNames")] = __SQLSchema_FieldsSetter._set_field_2
        __fbthrift_inst._setters[__cstring_view(<const char*>"columnToTable")] = __SQLSchema_FieldsSetter._set_field_3
        __fbthrift_inst._setters[__cstring_view(<const char*>"tableToColumns")] = __SQLSchema_FieldsSetter._set_field_4
        __fbthrift_inst._setters[__cstring_view(<const char*>"foreignKeys")] = __SQLSchema_FieldsSetter._set_field_5
        __fbthrift_inst._setters[__cstring_view(<const char*>"primaryKeys")] = __SQLSchema_FieldsSetter._set_field_6
        return __fbthrift_inst

    cdef void set_field(__SQLSchema_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __SQLSchema_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field columnNames
        if _fbthrift_value is None:
            __reset_field[_picard_types.cSQLSchema](deref(self._struct_cpp_obj), 0)
            return
        deref(self._struct_cpp_obj).columnNames_ref().assign(deref(_picard_types.Map__string_string(_fbthrift_value)._cpp_obj))

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field columnTypes
        if _fbthrift_value is None:
            __reset_field[_picard_types.cSQLSchema](deref(self._struct_cpp_obj), 1)
            return
        deref(self._struct_cpp_obj).columnTypes_ref().assign(deref(_picard_types.Map__string_ColumnType(_fbthrift_value)._cpp_obj))

    cdef void _set_field_2(self, _fbthrift_value) except *:
        # for field tableNames
        if _fbthrift_value is None:
            __reset_field[_picard_types.cSQLSchema](deref(self._struct_cpp_obj), 2)
            return
        deref(self._struct_cpp_obj).tableNames_ref().assign(deref(_picard_types.Map__string_string(_fbthrift_value)._cpp_obj))

    cdef void _set_field_3(self, _fbthrift_value) except *:
        # for field columnToTable
        if _fbthrift_value is None:
            __reset_field[_picard_types.cSQLSchema](deref(self._struct_cpp_obj), 3)
            return
        deref(self._struct_cpp_obj).columnToTable_ref().assign(deref(_picard_types.Map__string_string(_fbthrift_value)._cpp_obj))

    cdef void _set_field_4(self, _fbthrift_value) except *:
        # for field tableToColumns
        if _fbthrift_value is None:
            __reset_field[_picard_types.cSQLSchema](deref(self._struct_cpp_obj), 4)
            return
        deref(self._struct_cpp_obj).tableToColumns_ref().assign(deref(_picard_types.Map__string_List__string(_fbthrift_value)._cpp_obj))

    cdef void _set_field_5(self, _fbthrift_value) except *:
        # for field foreignKeys
        if _fbthrift_value is None:
            __reset_field[_picard_types.cSQLSchema](deref(self._struct_cpp_obj), 5)
            return
        deref(self._struct_cpp_obj).foreignKeys_ref().assign(deref(_picard_types.Map__string_string(_fbthrift_value)._cpp_obj))

    cdef void _set_field_6(self, _fbthrift_value) except *:
        # for field primaryKeys
        if _fbthrift_value is None:
            __reset_field[_picard_types.cSQLSchema](deref(self._struct_cpp_obj), 6)
            return
        deref(self._struct_cpp_obj).primaryKeys_ref().assign(deref(_picard_types.List__string(_fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __RegisterSQLSchemaException_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __RegisterSQLSchemaException_FieldsSetter create(_picard_types.cRegisterSQLSchemaException* struct_cpp_obj):
        cdef __RegisterSQLSchemaException_FieldsSetter __fbthrift_inst = __RegisterSQLSchemaException_FieldsSetter.__new__(__RegisterSQLSchemaException_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"dbId")] = __RegisterSQLSchemaException_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"message")] = __RegisterSQLSchemaException_FieldsSetter._set_field_1
        return __fbthrift_inst

    cdef void set_field(__RegisterSQLSchemaException_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __RegisterSQLSchemaException_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field dbId
        if _fbthrift_value is None:
            __reset_field[_picard_types.cRegisterSQLSchemaException](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'dbId is not a { str !r}.')
        deref(self._struct_cpp_obj).dbId_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field message
        if _fbthrift_value is None:
            __reset_field[_picard_types.cRegisterSQLSchemaException](deref(self._struct_cpp_obj), 1)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'message is not a { str !r}.')
        deref(self._struct_cpp_obj).message_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))


@__cython.auto_pickle(False)
cdef class __RegisterTokenizerException_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __RegisterTokenizerException_FieldsSetter create(_picard_types.cRegisterTokenizerException* struct_cpp_obj):
        cdef __RegisterTokenizerException_FieldsSetter __fbthrift_inst = __RegisterTokenizerException_FieldsSetter.__new__(__RegisterTokenizerException_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"message")] = __RegisterTokenizerException_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__RegisterTokenizerException_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __RegisterTokenizerException_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field message
        if _fbthrift_value is None:
            __reset_field[_picard_types.cRegisterTokenizerException](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'message is not a { str !r}.')
        deref(self._struct_cpp_obj).message_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))


@__cython.auto_pickle(False)
cdef class __TokenizerNotRegisteredException_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __TokenizerNotRegisteredException_FieldsSetter create(_picard_types.cTokenizerNotRegisteredException* struct_cpp_obj):
        cdef __TokenizerNotRegisteredException_FieldsSetter __fbthrift_inst = __TokenizerNotRegisteredException_FieldsSetter.__new__(__TokenizerNotRegisteredException_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"message")] = __TokenizerNotRegisteredException_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__TokenizerNotRegisteredException_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __TokenizerNotRegisteredException_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field message
        if _fbthrift_value is None:
            __reset_field[_picard_types.cTokenizerNotRegisteredException](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'message is not a { str !r}.')
        deref(self._struct_cpp_obj).message_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))


@__cython.auto_pickle(False)
cdef class __TokenizerPrefixException_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __TokenizerPrefixException_FieldsSetter create(_picard_types.cTokenizerPrefixException* struct_cpp_obj):
        cdef __TokenizerPrefixException_FieldsSetter __fbthrift_inst = __TokenizerPrefixException_FieldsSetter.__new__(__TokenizerPrefixException_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"message")] = __TokenizerPrefixException_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__TokenizerPrefixException_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __TokenizerPrefixException_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field message
        if _fbthrift_value is None:
            __reset_field[_picard_types.cTokenizerPrefixException](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'message is not a { str !r}.')
        deref(self._struct_cpp_obj).message_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))


@__cython.auto_pickle(False)
cdef class __ModeException_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __ModeException_FieldsSetter create(_picard_types.cModeException* struct_cpp_obj):
        cdef __ModeException_FieldsSetter __fbthrift_inst = __ModeException_FieldsSetter.__new__(__ModeException_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"message")] = __ModeException_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__ModeException_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __ModeException_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field message
        if _fbthrift_value is None:
            __reset_field[_picard_types.cModeException](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'message is not a { str !r}.')
        deref(self._struct_cpp_obj).message_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))


@__cython.auto_pickle(False)
cdef class __FeedException_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __FeedException_FieldsSetter create(_picard_types.cFeedException* struct_cpp_obj):
        cdef __FeedException_FieldsSetter __fbthrift_inst = __FeedException_FieldsSetter.__new__(__FeedException_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"feedFatalException")] = __FeedException_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__FeedException_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __FeedException_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field feedFatalException
        if _fbthrift_value is None:
            __reset_field[_picard_types.cFeedException](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, _picard_types.FeedFatalException):
            raise TypeError(f'feedFatalException is not a { _picard_types.FeedFatalException !r}.')
        deref(self._struct_cpp_obj).feedFatalException_ref().assign(deref((<_picard_types.FeedFatalException?> _fbthrift_value)._cpp_obj))


@__cython.auto_pickle(False)
cdef class __FeedParseFailure_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __FeedParseFailure_FieldsSetter create(_picard_types.cFeedParseFailure* struct_cpp_obj):
        cdef __FeedParseFailure_FieldsSetter __fbthrift_inst = __FeedParseFailure_FieldsSetter.__new__(__FeedParseFailure_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"input")] = __FeedParseFailure_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"contexts")] = __FeedParseFailure_FieldsSetter._set_field_1
        __fbthrift_inst._setters[__cstring_view(<const char*>"description")] = __FeedParseFailure_FieldsSetter._set_field_2
        return __fbthrift_inst

    cdef void set_field(__FeedParseFailure_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __FeedParseFailure_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field input
        if _fbthrift_value is None:
            __reset_field[_picard_types.cFeedParseFailure](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'input is not a { str !r}.')
        deref(self._struct_cpp_obj).input_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field contexts
        if _fbthrift_value is None:
            __reset_field[_picard_types.cFeedParseFailure](deref(self._struct_cpp_obj), 1)
            return
        deref(self._struct_cpp_obj).contexts_ref().assign(deref(_picard_types.List__string(_fbthrift_value)._cpp_obj))

    cdef void _set_field_2(self, _fbthrift_value) except *:
        # for field description
        if _fbthrift_value is None:
            __reset_field[_picard_types.cFeedParseFailure](deref(self._struct_cpp_obj), 2)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'description is not a { str !r}.')
        deref(self._struct_cpp_obj).description_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))


@__cython.auto_pickle(False)
cdef class __FeedTimeoutFailure_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __FeedTimeoutFailure_FieldsSetter create(_picard_types.cFeedTimeoutFailure* struct_cpp_obj):
        cdef __FeedTimeoutFailure_FieldsSetter __fbthrift_inst = __FeedTimeoutFailure_FieldsSetter.__new__(__FeedTimeoutFailure_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"message")] = __FeedTimeoutFailure_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__FeedTimeoutFailure_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __FeedTimeoutFailure_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field message
        if _fbthrift_value is None:
            __reset_field[_picard_types.cFeedTimeoutFailure](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'message is not a { str !r}.')
        deref(self._struct_cpp_obj).message_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))


@__cython.auto_pickle(False)
cdef class __FeedPartialSuccess_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __FeedPartialSuccess_FieldsSetter create(_picard_types.cFeedPartialSuccess* struct_cpp_obj):
        cdef __FeedPartialSuccess_FieldsSetter __fbthrift_inst = __FeedPartialSuccess_FieldsSetter.__new__(__FeedPartialSuccess_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        return __fbthrift_inst

    cdef void set_field(__FeedPartialSuccess_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __FeedPartialSuccess_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)


@__cython.auto_pickle(False)
cdef class __FeedCompleteSuccess_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __FeedCompleteSuccess_FieldsSetter create(_picard_types.cFeedCompleteSuccess* struct_cpp_obj):
        cdef __FeedCompleteSuccess_FieldsSetter __fbthrift_inst = __FeedCompleteSuccess_FieldsSetter.__new__(__FeedCompleteSuccess_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"leftover")] = __FeedCompleteSuccess_FieldsSetter._set_field_0
        return __fbthrift_inst

    cdef void set_field(__FeedCompleteSuccess_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __FeedCompleteSuccess_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field leftover
        if _fbthrift_value is None:
            __reset_field[_picard_types.cFeedCompleteSuccess](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, str):
            raise TypeError(f'leftover is not a { str !r}.')
        deref(self._struct_cpp_obj).leftover_ref().assign(cmove(bytes_to_string(_fbthrift_value.encode('utf-8'))))


@__cython.auto_pickle(False)
cdef class __BatchFeedResult_FieldsSetter(__StructFieldsSetter):

    @staticmethod
    cdef __BatchFeedResult_FieldsSetter create(_picard_types.cBatchFeedResult* struct_cpp_obj):
        cdef __BatchFeedResult_FieldsSetter __fbthrift_inst = __BatchFeedResult_FieldsSetter.__new__(__BatchFeedResult_FieldsSetter)
        __fbthrift_inst._struct_cpp_obj = struct_cpp_obj
        __fbthrift_inst._setters[__cstring_view(<const char*>"batchId")] = __BatchFeedResult_FieldsSetter._set_field_0
        __fbthrift_inst._setters[__cstring_view(<const char*>"topToken")] = __BatchFeedResult_FieldsSetter._set_field_1
        __fbthrift_inst._setters[__cstring_view(<const char*>"feedResult")] = __BatchFeedResult_FieldsSetter._set_field_2
        return __fbthrift_inst

    cdef void set_field(__BatchFeedResult_FieldsSetter self, const char* name, object value) except *:
        cdef __cstring_view cname = __cstring_view(name)
        cdef cumap[__cstring_view, __BatchFeedResult_FieldsSetterFunc].iterator found = self._setters.find(cname)
        if found == self._setters.end():
            raise TypeError(f"invalid field name {name.decode('utf-8')}")
        deref(found).second(self, value)

    cdef void _set_field_0(self, _fbthrift_value) except *:
        # for field batchId
        if _fbthrift_value is None:
            __reset_field[_picard_types.cBatchFeedResult](deref(self._struct_cpp_obj), 0)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'batchId is not a { int !r}.')
        _fbthrift_value = <cint64_t> _fbthrift_value
        deref(self._struct_cpp_obj).batchId_ref().assign(_fbthrift_value)

    cdef void _set_field_1(self, _fbthrift_value) except *:
        # for field topToken
        if _fbthrift_value is None:
            __reset_field[_picard_types.cBatchFeedResult](deref(self._struct_cpp_obj), 1)
            return
        if not isinstance(_fbthrift_value, int):
            raise TypeError(f'topToken is not a { int !r}.')
        _fbthrift_value = <cint64_t> _fbthrift_value
        deref(self._struct_cpp_obj).topToken_ref().assign(_fbthrift_value)

    cdef void _set_field_2(self, _fbthrift_value) except *:
        # for field feedResult
        if _fbthrift_value is None:
            __reset_field[_picard_types.cBatchFeedResult](deref(self._struct_cpp_obj), 2)
            return
        if not isinstance(_fbthrift_value, _picard_types.FeedResult):
            raise TypeError(f'feedResult is not a { _picard_types.FeedResult !r}.')
        deref(self._struct_cpp_obj).feedResult_ref().assign(deref((<_picard_types.FeedResult?> _fbthrift_value)._cpp_obj))

