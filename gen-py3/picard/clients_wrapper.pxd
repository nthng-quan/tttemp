#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from cpython.ref cimport PyObject
from libc.stdint cimport (
    int8_t as cint8_t,
    int16_t as cint16_t,
    int32_t as cint32_t,
    int64_t as cint64_t,
)
from libcpp cimport bool as cbool
from libcpp.map cimport map as cmap, pair as cpair
from libcpp.memory cimport shared_ptr, unique_ptr
from libcpp.set cimport set as cset
from libcpp.string cimport string
from libcpp.vector cimport vector

from folly cimport cFollyFuture, cFollyTry, cFollyUnit
cimport folly.iobuf as _fbthrift_iobuf
from thrift.py3.common cimport cRpcOptions
from thrift.py3.client cimport cClientWrapper

cimport picard.types as _picard_types


cdef extern from "gen-cpp2/Picard.h" namespace "::cpp2":
  cdef cppclass cPicardAsyncClient "::cpp2::PicardAsyncClient":
      pass

cdef extern from "<utility>" namespace "std":
  cdef unique_ptr[cPicardClientWrapper] move(unique_ptr[cPicardClientWrapper])

cdef extern from "thrift/lib/cpp/TProcessorEventHandler.h" namespace "::apache::thrift":
  cdef cppclass cTProcessorEventHandler "apache::thrift::TProcessorEventHandler":
    pass

cdef extern from "gen-py3/picard/clients_wrapper.h" namespace "::cpp2":
  cdef cppclass cPicardClientWrapper "::cpp2::PicardClientWrapper":
    void setPersistentHeader(const string& key, const string& value)
    void addEventHandler(const shared_ptr[cTProcessorEventHandler]& handler)

    cFollyFuture[cFollyUnit] registerSQLSchema(cRpcOptions, 
      string arg_dbId,
      _picard_types.cSQLSchema arg_sqlSchema,)
    cFollyFuture[cFollyUnit] registerTokenizer(cRpcOptions, 
      string arg_jsonConfig,)
    cFollyFuture[_picard_types.cFeedResult] feed(cRpcOptions, 
      vector[cint64_t] arg_inputIds,
      cint64_t arg_token,
      _picard_types.cMode arg_mode,)
    cFollyFuture[vector[_picard_types.cBatchFeedResult]] batchFeed(cRpcOptions, 
      vector[vector[cint64_t]] arg_inputIds,
      vector[vector[cint64_t]] arg_topTokens,
      _picard_types.cMode arg_mode,)

