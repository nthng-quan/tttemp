/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <gen-py3/picard/services_wrapper.h>
#include <gen-py3/picard/services_api.h>
#include <thrift/lib/cpp2/async/AsyncProcessor.h>

namespace cpp2 {

PicardWrapper::PicardWrapper(PyObject *obj, folly::Executor* exc)
  : if_object(obj), executor(exc)
  {
    import_picard__services();
  }


void PicardWrapper::async_tm_registerSQLSchema(
  std::unique_ptr<apache::thrift::HandlerCallback<void>> callback
    , std::unique_ptr<std::string> dbId
    , std::unique_ptr<::cpp2::SQLSchema> sqlSchema
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
dbId = std::move(dbId),
sqlSchema = std::move(sqlSchema)    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<folly::Unit>();
        call_cy_Picard_registerSQLSchema(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(dbId),
            std::move(sqlSchema)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<folly::Unit>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void PicardWrapper::async_tm_registerTokenizer(
  std::unique_ptr<apache::thrift::HandlerCallback<void>> callback
    , std::unique_ptr<std::string> jsonConfig
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
jsonConfig = std::move(jsonConfig)    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<folly::Unit>();
        call_cy_Picard_registerTokenizer(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(jsonConfig)        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<folly::Unit>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void PicardWrapper::async_tm_feed(
  std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<::cpp2::FeedResult>>> callback
    , std::unique_ptr<std::vector<int64_t>> inputIds
    , int64_t token
    , ::cpp2::Mode mode
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
inputIds = std::move(inputIds),
token,
mode    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<::cpp2::FeedResult>>();
        call_cy_Picard_feed(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(inputIds),
            token,
            mode        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<::cpp2::FeedResult>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
void PicardWrapper::async_tm_batchFeed(
  std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr<std::vector<::cpp2::BatchFeedResult>>>> callback
    , std::unique_ptr<std::vector<std::vector<int64_t>>> inputIds
    , std::unique_ptr<std::vector<std::vector<int64_t>>> topTokens
    , ::cpp2::Mode mode
) {
  auto ctx = callback->getRequestContext();
  folly::via(
    this->executor,
    [this, ctx,
     callback = std::move(callback),
inputIds = std::move(inputIds),
topTokens = std::move(topTokens),
mode    ]() mutable {
        auto [promise, future] = folly::makePromiseContract<std::unique_ptr<std::vector<::cpp2::BatchFeedResult>>>();
        call_cy_Picard_batchFeed(
            this->if_object,
            ctx,
            std::move(promise),
            std::move(inputIds),
            std::move(topTokens),
            mode        );
        std::move(future).via(this->executor).thenTry([callback = std::move(callback)](folly::Try<std::unique_ptr<std::vector<::cpp2::BatchFeedResult>>>&& t) {
          (void)t;
          callback->complete(std::move(t));
        });
    });
}
std::shared_ptr<apache::thrift::ServerInterface> PicardInterface(PyObject *if_object, folly::Executor *exc) {
  return std::make_shared<PicardWrapper>(if_object, exc);
}
} // namespace cpp2
