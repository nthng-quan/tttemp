/* Generated by Cython 0.29.28 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "../gen-cpp2/picard_metadata.h",
            "../gen-cpp2/picard_types.h",
            "../gen-cpp2/picard_types_custom_protocol.h",
            "../gen-py3/picard/types.h"
        ],
        "extra_compile_args": [
            "--std=c++17"
        ],
        "include_dirs": [
            "../."
        ],
        "language": "c++",
        "libraries": [
            "folly",
            "thriftcpp2",
            "picard.cpython-37m-x86_64-linux-gnu"
        ],
        "library_dirs": [
            "build/lib.linux-x86_64-3.7/picard"
        ],
        "name": "picard.types",
        "sources": [
            "picard/types.pyx",
            "/app/third_party/fbthrift/thrift/lib/py3/metadata.cpp",
            "/app/third_party/fbthrift/thrift/lib/py3/enums.cpp"
        ]
    },
    "module_name": "picard.types"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_28"
#define CYTHON_HEX_VERSION 0x001D1CF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 0
  #elif !defined(CYTHON_FAST_THREAD_STATE)
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030B00A1)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #if PY_VERSION_HEX >= 0x030B00A4
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__picard__types
#define __PYX_HAVE_API__picard__types
/* Early includes */
#include <stdint.h>
#include <string.h>
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <stdio.h>
#include "pythread.h"
#include <memory>
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <vector>
#include <set>
#include <map>
#include "folly/ExceptionWrapper.h"
#include "folly/Try.h"
#include "folly/futures/Future.h"
#include "folly/Unit.h"
#include "folly/futures/Promise.h"
#include "folly/Executor.h"
#include <chrono>
#include <iterator>
#include <algorithm>
#include <optional>
#include <string_view>
#include "thrift/lib/cpp/protocol/TProtocolTypes.h"
#include "thrift/lib/cpp/concurrency/Thread.h"
#include "thrift/lib/cpp2/async/RequestChannel.h"
#include "thrift/lib/cpp2/gen/module_metadata_h.h"
#include <thrift/lib/py3/metadata.h>
#include "thrift/lib/cpp/Thrift.h"
#include "thrift/lib/cpp/protocol/TProtocolException.h"
#include "thrift/lib/cpp/TApplicationException.h"
#include "thrift/lib/cpp/transport/TTransportException.h"
#include "thrift/lib/py3/exceptions.h"
#include "folly/io/IOBuf.h"
#include "folly/io/IOBufQueue.h"
#include "folly/python/iobuf.h"
#include "folly/Range.h"

    // Py_SET_TYPE is new in Python 3.9 and this is a suggested replacement for
    // older versions.
    #if defined(Py_SET_TYPE)
    #define APACHE_THRIFT_DETAIL_Py_SET_TYPE(obj, type)         Py_SET_TYPE(obj, type)
    #else
    #define APACHE_THRIFT_DETAIL_Py_SET_TYPE(obj, type)         ((Py_TYPE(obj) = (type)), (void)0)
    #endif
    static CYTHON_INLINE void SetMetaClass(PyTypeObject* t, PyTypeObject* m)
    {
        APACHE_THRIFT_DETAIL_Py_SET_TYPE(t, m);
        PyType_Modified(t);
    }
    
#include "thrift/lib/py3/types.h"
#include "thrift/lib/py3/enums.h"
#include "thrift/lib/cpp2/FieldRef.h"
#include "folly/Optional.h"
#include <unordered_map>
#include "gen-py3/picard/types.h"
#include "gen-cpp2/picard_metadata.h"
#include "gen-cpp2/picard_types.h"
#include "gen-cpp2/picard_types_custom_protocol.h"
#include "thrift/lib/py3/serializer.h"
#include "thrift/lib/cpp/transport/THeader.h"
#include "folly/Memory.h"
#include <stdlib.h>
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "picard/types.pyx",
  "std_libcpp.pxd",
  "common.pxd",
  "range.pxd",
  "types.pxd",
  "stringsource",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "iobuf.pxd",
  "exceptions.pxd",
  "picard/types_fields.pxd",
  "reflection.pxd",
};
/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) &&\
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && 0
    #include <Windows.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])


/*--- Type declarations ---*/
struct __pyx_obj_5folly_5iobuf_IOBuf;
struct __pyx_obj_6thrift_3py3_6common_Headers;
struct __pyx_obj_6thrift_3py3_6common_RpcOptions;
struct __pyx_obj_6thrift_3py3_6common_ReadHeaders;
struct __pyx_obj_6thrift_3py3_6common_WriteHeaders;
struct __pyx_obj_6thrift_3py3_6common_MetadataBox;
struct __pyx_obj_6thrift_3py3_10exceptions_Error;
struct __pyx_obj_6thrift_3py3_10exceptions_LibraryError;
struct __pyx_obj_6thrift_3py3_10exceptions_ProtocolError;
struct __pyx_obj_6thrift_3py3_10exceptions_ApplicationError;
struct __pyx_obj_6thrift_3py3_10exceptions_TransportError;
struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError;
struct __pyx_obj_6thrift_3py3_5types_EnumData;
struct __pyx_obj_6thrift_3py3_5types_EnumFlagsData;
struct __pyx_obj_6thrift_3py3_5types_UnionTypeEnumData;
struct __pyx_obj_6thrift_3py3_5types_EnumMeta;
struct __pyx_obj_6thrift_3py3_5types___NotSet;
struct __pyx_obj_6thrift_3py3_5types_Struct;
struct __pyx_obj_6thrift_3py3_5types_Union;
struct __pyx_obj_6thrift_3py3_5types_Container;
struct __pyx_obj_6thrift_3py3_5types_List;
struct __pyx_obj_6thrift_3py3_5types_Set;
struct __pyx_obj_6thrift_3py3_5types_Map;
struct __pyx_obj_6thrift_3py3_5types_CompiledEnum;
struct __pyx_obj_6thrift_3py3_5types_Flag;
struct __pyx_obj_6thrift_3py3_5types_BadEnum;
struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter;
struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter;
struct __pyx_obj_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter;
struct __pyx_obj_6picard_12types_fields___RegisterTokenizerException_FieldsSetter;
struct __pyx_obj_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter;
struct __pyx_obj_6picard_12types_fields___TokenizerPrefixException_FieldsSetter;
struct __pyx_obj_6picard_12types_fields___ModeException_FieldsSetter;
struct __pyx_obj_6picard_12types_fields___FeedException_FieldsSetter;
struct __pyx_obj_6picard_12types_fields___FeedParseFailure_FieldsSetter;
struct __pyx_obj_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter;
struct __pyx_obj_6picard_12types_fields___FeedPartialSuccess_FieldsSetter;
struct __pyx_obj_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter;
struct __pyx_obj_6picard_12types_fields___BatchFeedResult_FieldsSetter;
struct __pyx_obj_6thrift_3py3_10reflection_StructSpec;
struct __pyx_obj_6thrift_3py3_10reflection_FieldSpec;
struct __pyx_obj_6thrift_3py3_10reflection_ListSpec;
struct __pyx_obj_6thrift_3py3_10reflection_SetSpec;
struct __pyx_obj_6thrift_3py3_10reflection_MapSpec;
struct __pyx_obj_6thrift_3py3_10reflection_InterfaceSpec;
struct __pyx_obj_6thrift_3py3_10reflection_MethodSpec;
struct __pyx_obj_6thrift_3py3_10reflection_ArgumentSpec;
struct __pyx_obj_6picard_5types_ColumnType;
struct __pyx_obj_6picard_5types_Mode;
struct __pyx_obj_6picard_5types_SQLSchema;
struct __pyx_obj_6picard_5types_RegisterSQLSchemaException;
struct __pyx_obj_6picard_5types_RegisterTokenizerException;
struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException;
struct __pyx_obj_6picard_5types_TokenizerPrefixException;
struct __pyx_obj_6picard_5types_ModeException;
struct __pyx_obj_6picard_5types___FeedFatalExceptionType;
struct __pyx_obj_6picard_5types_FeedFatalException;
struct __pyx_obj_6picard_5types_FeedException;
struct __pyx_obj_6picard_5types_FeedParseFailure;
struct __pyx_obj_6picard_5types_FeedTimeoutFailure;
struct __pyx_obj_6picard_5types_FeedPartialSuccess;
struct __pyx_obj_6picard_5types_FeedCompleteSuccess;
struct __pyx_obj_6picard_5types___FeedResultType;
struct __pyx_obj_6picard_5types_FeedResult;
struct __pyx_obj_6picard_5types_BatchFeedResult;
struct __pyx_obj_6picard_5types_List__i64;
struct __pyx_obj_6picard_5types_List__List__i64;
struct __pyx_obj_6picard_5types_List__BatchFeedResult;
struct __pyx_obj_6picard_5types_Map__string_string;
struct __pyx_obj_6picard_5types_Map__string_ColumnType;
struct __pyx_obj_6picard_5types_List__string;
struct __pyx_obj_6picard_5types_Map__string_List__string;
struct __pyx_obj_6picard_5types___ColumnTypeMeta;
struct __pyx_obj_6picard_5types___ModeMeta;
struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta;
struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta;
struct __pyx_obj_6picard_5types___pyx_scope_struct__create;
struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr;
struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create;
struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr;
struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create;
struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr;
struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__;
struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values;
struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items;
struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__;
struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values;
struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items;
struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__;
struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values;
struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "thrift/py3/exceptions.pxd":112
 * 
 * 
 * ctypedef object(*Handler)(const cFollyExceptionWrapper& ex, PyObject* user_data)             # <<<<<<<<<<<<<<
 * cdef void addHandler(Handler handler)
 * cdef object runHandlers(const cFollyExceptionWrapper& ex, RpcOptions options)
 */
typedef PyObject *(*__pyx_t_6thrift_3py3_10exceptions_Handler)(folly::exception_wrapper const &, PyObject *);

/* "folly/range.pxd":10
 *         int size()
 * 
 * ctypedef Range[const char*] StringPiece             # <<<<<<<<<<<<<<
 * ctypedef Range[const unsigned char*] ByteRange
 * 
 */
typedef folly::Range<char const *>  __pyx_t_5folly_5range_StringPiece;

/* "folly/range.pxd":11
 * 
 * ctypedef Range[const char*] StringPiece
 * ctypedef Range[const unsigned char*] ByteRange             # <<<<<<<<<<<<<<
 * 
 * ctypedef fused R:
 */
typedef folly::Range<unsigned char const *>  __pyx_t_5folly_5range_ByteRange;

/* "thrift/py3/types.pxd":85
 * 
 * 
 * ctypedef PyObject* PyObjectPtr             # <<<<<<<<<<<<<<
 * ctypedef optional[int] cOptionalInt
 * 
 */
typedef PyObject *__pyx_t_6thrift_3py3_5types_PyObjectPtr;

/* "thrift/py3/types.pxd":86
 * 
 * ctypedef PyObject* PyObjectPtr
 * ctypedef optional[int] cOptionalInt             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "thrift/lib/py3/enums.h" namespace "::thrift::py3" nogil:
 */
typedef std::optional<int>  __pyx_t_6thrift_3py3_5types_cOptionalInt;

/* "picard/types_fields.pxd":46
 * 
 * 
 * ctypedef void (*__SQLSchema_FieldsSetterFunc)(__SQLSchema_FieldsSetter, object) except *             # <<<<<<<<<<<<<<
 * 
 * cdef class __SQLSchema_FieldsSetter(__StructFieldsSetter):
 */
typedef void (*__pyx_t_6picard_12types_fields___SQLSchema_FieldsSetterFunc)(struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter *, PyObject *);

/* "picard/types_fields.pxd":63
 * 
 * 
 * ctypedef void (*__RegisterSQLSchemaException_FieldsSetterFunc)(__RegisterSQLSchemaException_FieldsSetter, object) except *             # <<<<<<<<<<<<<<
 * 
 * cdef class __RegisterSQLSchemaException_FieldsSetter(__StructFieldsSetter):
 */
typedef void (*__pyx_t_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetterFunc)(struct __pyx_obj_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter *, PyObject *);

/* "picard/types_fields.pxd":75
 * 
 * 
 * ctypedef void (*__RegisterTokenizerException_FieldsSetterFunc)(__RegisterTokenizerException_FieldsSetter, object) except *             # <<<<<<<<<<<<<<
 * 
 * cdef class __RegisterTokenizerException_FieldsSetter(__StructFieldsSetter):
 */
typedef void (*__pyx_t_6picard_12types_fields___RegisterTokenizerException_FieldsSetterFunc)(struct __pyx_obj_6picard_12types_fields___RegisterTokenizerException_FieldsSetter *, PyObject *);

/* "picard/types_fields.pxd":86
 * 
 * 
 * ctypedef void (*__TokenizerNotRegisteredException_FieldsSetterFunc)(__TokenizerNotRegisteredException_FieldsSetter, object) except *             # <<<<<<<<<<<<<<
 * 
 * cdef class __TokenizerNotRegisteredException_FieldsSetter(__StructFieldsSetter):
 */
typedef void (*__pyx_t_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetterFunc)(struct __pyx_obj_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter *, PyObject *);

/* "picard/types_fields.pxd":97
 * 
 * 
 * ctypedef void (*__TokenizerPrefixException_FieldsSetterFunc)(__TokenizerPrefixException_FieldsSetter, object) except *             # <<<<<<<<<<<<<<
 * 
 * cdef class __TokenizerPrefixException_FieldsSetter(__StructFieldsSetter):
 */
typedef void (*__pyx_t_6picard_12types_fields___TokenizerPrefixException_FieldsSetterFunc)(struct __pyx_obj_6picard_12types_fields___TokenizerPrefixException_FieldsSetter *, PyObject *);

/* "picard/types_fields.pxd":108
 * 
 * 
 * ctypedef void (*__ModeException_FieldsSetterFunc)(__ModeException_FieldsSetter, object) except *             # <<<<<<<<<<<<<<
 * 
 * cdef class __ModeException_FieldsSetter(__StructFieldsSetter):
 */
typedef void (*__pyx_t_6picard_12types_fields___ModeException_FieldsSetterFunc)(struct __pyx_obj_6picard_12types_fields___ModeException_FieldsSetter *, PyObject *);

/* "picard/types_fields.pxd":119
 * 
 * 
 * ctypedef void (*__FeedException_FieldsSetterFunc)(__FeedException_FieldsSetter, object) except *             # <<<<<<<<<<<<<<
 * 
 * cdef class __FeedException_FieldsSetter(__StructFieldsSetter):
 */
typedef void (*__pyx_t_6picard_12types_fields___FeedException_FieldsSetterFunc)(struct __pyx_obj_6picard_12types_fields___FeedException_FieldsSetter *, PyObject *);

/* "picard/types_fields.pxd":130
 * 
 * 
 * ctypedef void (*__FeedParseFailure_FieldsSetterFunc)(__FeedParseFailure_FieldsSetter, object) except *             # <<<<<<<<<<<<<<
 * 
 * cdef class __FeedParseFailure_FieldsSetter(__StructFieldsSetter):
 */
typedef void (*__pyx_t_6picard_12types_fields___FeedParseFailure_FieldsSetterFunc)(struct __pyx_obj_6picard_12types_fields___FeedParseFailure_FieldsSetter *, PyObject *);

/* "picard/types_fields.pxd":143
 * 
 * 
 * ctypedef void (*__FeedTimeoutFailure_FieldsSetterFunc)(__FeedTimeoutFailure_FieldsSetter, object) except *             # <<<<<<<<<<<<<<
 * 
 * cdef class __FeedTimeoutFailure_FieldsSetter(__StructFieldsSetter):
 */
typedef void (*__pyx_t_6picard_12types_fields___FeedTimeoutFailure_FieldsSetterFunc)(struct __pyx_obj_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter *, PyObject *);

/* "picard/types_fields.pxd":154
 * 
 * 
 * ctypedef void (*__FeedPartialSuccess_FieldsSetterFunc)(__FeedPartialSuccess_FieldsSetter, object) except *             # <<<<<<<<<<<<<<
 * 
 * cdef class __FeedPartialSuccess_FieldsSetter(__StructFieldsSetter):
 */
typedef void (*__pyx_t_6picard_12types_fields___FeedPartialSuccess_FieldsSetterFunc)(struct __pyx_obj_6picard_12types_fields___FeedPartialSuccess_FieldsSetter *, PyObject *);

/* "picard/types_fields.pxd":164
 * 
 * 
 * ctypedef void (*__FeedCompleteSuccess_FieldsSetterFunc)(__FeedCompleteSuccess_FieldsSetter, object) except *             # <<<<<<<<<<<<<<
 * 
 * cdef class __FeedCompleteSuccess_FieldsSetter(__StructFieldsSetter):
 */
typedef void (*__pyx_t_6picard_12types_fields___FeedCompleteSuccess_FieldsSetterFunc)(struct __pyx_obj_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter *, PyObject *);

/* "picard/types_fields.pxd":175
 * 
 * 
 * ctypedef void (*__BatchFeedResult_FieldsSetterFunc)(__BatchFeedResult_FieldsSetter, object) except *             # <<<<<<<<<<<<<<
 * 
 * cdef class __BatchFeedResult_FieldsSetter(__StructFieldsSetter):
 */
typedef void (*__pyx_t_6picard_12types_fields___BatchFeedResult_FieldsSetterFunc)(struct __pyx_obj_6picard_12types_fields___BatchFeedResult_FieldsSetter *, PyObject *);

/* "thrift/py3/reflection.pxd":20
 * from libcpp.vector cimport vector as cvector
 * 
 * cpdef enum NumberType:             # <<<<<<<<<<<<<<
 *     NOT_A_NUMBER = 0
 *     BYTE = 1
 */
enum __pyx_t_6thrift_3py3_10reflection_NumberType {
  __pyx_e_6thrift_3py3_10reflection_NOT_A_NUMBER = 0,
  __pyx_e_6thrift_3py3_10reflection_BYTE = 1,
  __pyx_e_6thrift_3py3_10reflection_I08 = 1,
  __pyx_e_6thrift_3py3_10reflection_I16 = 2,
  __pyx_e_6thrift_3py3_10reflection_I32 = 3,
  __pyx_e_6thrift_3py3_10reflection_I64 = 4,
  __pyx_e_6thrift_3py3_10reflection_FLOAT = 5,
  __pyx_e_6thrift_3py3_10reflection_DOUBLE = 6
};

/* "thrift/py3/reflection.pxd":31
 * 
 * 
 * cpdef enum Qualifier:             # <<<<<<<<<<<<<<
 *     UNQUALIFIED = 1
 *     REQUIRED = 2
 */
enum __pyx_t_6thrift_3py3_10reflection_Qualifier {
  __pyx_e_6thrift_3py3_10reflection_UNQUALIFIED = 1,
  __pyx_e_6thrift_3py3_10reflection_REQUIRED = 2,
  __pyx_e_6thrift_3py3_10reflection_OPTIONAL = 3
};

/* "thrift/py3/reflection.pxd":37
 * 
 * 
 * cpdef enum StructType:             # <<<<<<<<<<<<<<
 *   STRUCT = 1
 *   UNION = 2
 */
enum __pyx_t_6thrift_3py3_10reflection_StructType {
  __pyx_e_6thrift_3py3_10reflection_STRUCT = 1,
  __pyx_e_6thrift_3py3_10reflection_UNION = 2,
  __pyx_e_6thrift_3py3_10reflection_EXCEPTION = 3
};
struct __pyx_ctuple_int__and_int__and_int;
typedef struct __pyx_ctuple_int__and_int__and_int __pyx_ctuple_int__and_int__and_int;

/* "picard/types.pyx":1656
 *         if item is None:
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())             # <<<<<<<<<<<<<<
 *         cdef cint64_t citem = item
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[cint64_t]](self._cpp_obj, indices[0], indices[1], citem)
 */
struct __pyx_ctuple_int__and_int__and_int {
  int f0;
  int f1;
  int f2;
};

/* "folly/iobuf.pxd":57
 * 
 * 
 * cdef class IOBuf:             # <<<<<<<<<<<<<<
 *     cdef object __weakref__
 *     cdef cIOBuf* _this
 */
struct __pyx_obj_5folly_5iobuf_IOBuf {
  PyObject_HEAD
  struct __pyx_vtabstruct_5folly_5iobuf_IOBuf *__pyx_vtab;
  PyObject *__weakref__;
  folly::IOBuf *_this;
  PyObject *_parent;
  PyObject *_hash;
  std::unique_ptr<folly::IOBuf>  _ours;
  Py_ssize_t shape[1];
  Py_ssize_t strides[1];
};


/* "thrift/py3/common.pxd":48
 * 
 * 
 * cdef class Headers:             # <<<<<<<<<<<<<<
 *     cdef object __weakref__
 *     cdef const cmap[string, string]* _getMap(self)
 */
struct __pyx_obj_6thrift_3py3_6common_Headers {
  PyObject_HEAD
  struct __pyx_vtabstruct_6thrift_3py3_6common_Headers *__pyx_vtab;
  PyObject *__weakref__;
};


/* "thrift/py3/common.pxd":85
 * 
 * 
 * cdef class RpcOptions:             # <<<<<<<<<<<<<<
 *     cdef object __weakref__
 *     cdef object _readheaders
 */
struct __pyx_obj_6thrift_3py3_6common_RpcOptions {
  PyObject_HEAD
  PyObject *__weakref__;
  PyObject *_readheaders;
  PyObject *_writeheaders;
  apache::thrift::RpcOptions _cpp_obj;
};


/* "thrift/py3/common.pxd":92
 * 
 * 
 * cdef class ReadHeaders(Headers):             # <<<<<<<<<<<<<<
 *     cdef RpcOptions _parent
 *     @staticmethod
 */
struct __pyx_obj_6thrift_3py3_6common_ReadHeaders {
  struct __pyx_obj_6thrift_3py3_6common_Headers __pyx_base;
  struct __pyx_obj_6thrift_3py3_6common_RpcOptions *_parent;
};


/* "thrift/py3/common.pxd":98
 * 
 * 
 * cdef class WriteHeaders(Headers):             # <<<<<<<<<<<<<<
 *     cdef RpcOptions _parent
 *     @staticmethod
 */
struct __pyx_obj_6thrift_3py3_6common_WriteHeaders {
  struct __pyx_obj_6thrift_3py3_6common_Headers __pyx_base;
  struct __pyx_obj_6thrift_3py3_6common_RpcOptions *_parent;
};


/* "thrift/py3/common.pxd":104
 * 
 * 
 * cdef class MetadataBox:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cThriftMetadata] _cpp_obj
 *     @staticmethod
 */
struct __pyx_obj_6thrift_3py3_6common_MetadataBox {
  PyObject_HEAD
  struct __pyx_vtabstruct_6thrift_3py3_6common_MetadataBox *__pyx_vtab;
  std::shared_ptr<::apache::thrift::metadata::ThriftMetadata>  _cpp_obj;
};


/* "thrift/py3/exceptions.pxd":125
 * 
 * 
 * cdef class Error(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6thrift_3py3_10exceptions_Error {
  PyBaseExceptionObject __pyx_base;
};


/* "thrift/py3/exceptions.pxd":128
 *     pass
 * 
 * cdef class LibraryError(Error):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6thrift_3py3_10exceptions_LibraryError {
  struct __pyx_obj_6thrift_3py3_10exceptions_Error __pyx_base;
};


/* "thrift/py3/exceptions.pxd":131
 *     pass
 * 
 * cdef class ProtocolError(LibraryError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6thrift_3py3_10exceptions_ProtocolError {
  struct __pyx_obj_6thrift_3py3_10exceptions_LibraryError __pyx_base;
};


/* "thrift/py3/exceptions.pxd":134
 *     pass
 * 
 * cdef class ApplicationError(Error):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6thrift_3py3_10exceptions_ApplicationError {
  struct __pyx_obj_6thrift_3py3_10exceptions_Error __pyx_base;
};


/* "thrift/py3/exceptions.pxd":137
 *     pass
 * 
 * cdef class TransportError(LibraryError):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6thrift_3py3_10exceptions_TransportError {
  struct __pyx_obj_6thrift_3py3_10exceptions_LibraryError __pyx_base;
};


/* "thrift/py3/exceptions.pxd":140
 *     pass
 * 
 * cdef class GeneratedError(Error):             # <<<<<<<<<<<<<<
 *     cdef object __weakref__
 *     cdef size_t _fbthrift_struct_size
 */
struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError {
  struct __pyx_obj_6thrift_3py3_10exceptions_Error __pyx_base;
  struct __pyx_vtabstruct_6thrift_3py3_10exceptions_GeneratedError *__pyx_vtab;
  PyObject *__weakref__;
  size_t _fbthrift_struct_size;
};


/* "thrift/py3/types.pxd":106
 * 
 * 
 * cdef class EnumData:             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[cEnumData] _cpp_obj
 *     cdef type _py_type
 */
struct __pyx_obj_6thrift_3py3_5types_EnumData {
  PyObject_HEAD
  struct __pyx_vtabstruct_6thrift_3py3_5types_EnumData *__pyx_vtab;
  std::unique_ptr<::thrift::py3::EnumData>  _cpp_obj;
  PyTypeObject *_py_type;
};


/* "thrift/py3/types.pxd":117
 *     cdef EnumData create(cEnumData* ptr, py_type)
 * 
 * cdef class EnumFlagsData(EnumData):             # <<<<<<<<<<<<<<
 *     cdef get_invert(self, uint32_t value)
 *     @staticmethod
 */
struct __pyx_obj_6thrift_3py3_5types_EnumFlagsData {
  struct __pyx_obj_6thrift_3py3_5types_EnumData __pyx_base;
};


/* "thrift/py3/types.pxd":122
 *     cdef EnumFlagsData create(cEnumFlagsData* ptr, py_type)
 * 
 * cdef class UnionTypeEnumData(EnumData):             # <<<<<<<<<<<<<<
 *     cdef object __empty
 *     @staticmethod
 */
struct __pyx_obj_6thrift_3py3_5types_UnionTypeEnumData {
  struct __pyx_obj_6thrift_3py3_5types_EnumData __pyx_base;
  PyObject *__pyx___empty;
};


/* "thrift/py3/types.pxd":127
 *     cdef UnionTypeEnumData create(cEnumData* ptr, py_type)
 * 
 * cdef class EnumMeta(type):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6thrift_3py3_5types_EnumMeta {
  PyHeapTypeObject __pyx_base;
};


/* "thrift/py3/types.pxd":131
 * 
 * 
 * cdef class __NotSet:             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6thrift_3py3_5types___NotSet {
  PyObject_HEAD
};


/* "thrift/py3/types.pxd":137
 * 
 * 
 * cdef class Struct:             # <<<<<<<<<<<<<<
 *     cdef object _fbthrift_hash
 *     cdef object __weakref__
 */
struct __pyx_obj_6thrift_3py3_5types_Struct {
  PyObject_HEAD
  struct __pyx_vtabstruct_6thrift_3py3_5types_Struct *__pyx_vtab;
  PyObject *_fbthrift_hash;
  PyObject *__weakref__;
  size_t _fbthrift_struct_size;
};


/* "thrift/py3/types.pxd":150
 * 
 * 
 * cdef class Union(Struct):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6thrift_3py3_5types_Union {
  struct __pyx_obj_6thrift_3py3_5types_Struct __pyx_base;
};


/* "thrift/py3/types.pxd":154
 * 
 * 
 * cdef class Container:             # <<<<<<<<<<<<<<
 *     cdef object _fbthrift_hash
 *     cdef object __weakref__
 */
struct __pyx_obj_6thrift_3py3_5types_Container {
  PyObject_HEAD
  PyObject *_fbthrift_hash;
  PyObject *__weakref__;
};


/* "thrift/py3/types.pxd":159
 * 
 * 
 * cdef class List(Container):             # <<<<<<<<<<<<<<
 *     cdef int _normalize_index(self, int index) except *
 *     cdef _get_slice(self, slice index_obj)
 */
struct __pyx_obj_6thrift_3py3_5types_List {
  struct __pyx_obj_6thrift_3py3_5types_Container __pyx_base;
  struct __pyx_vtabstruct_6thrift_3py3_5types_List *__pyx_vtab;
};


/* "thrift/py3/types.pxd":165
 *     cdef _check_item_type(self, item)
 * 
 * cdef class Set(Container):             # <<<<<<<<<<<<<<
 *     cdef _fbthrift_py_richcmp(self, other, int op)
 *     cdef _fbthrift_do_set_op(self, other, cSetOp op)
 */
struct __pyx_obj_6thrift_3py3_5types_Set {
  struct __pyx_obj_6thrift_3py3_5types_Container __pyx_base;
  struct __pyx_vtabstruct_6thrift_3py3_5types_Set *__pyx_vtab;
};


/* "thrift/py3/types.pxd":170
 * 
 * 
 * cdef class Map(Container):             # <<<<<<<<<<<<<<
 *     cdef _check_key_type(self, key)
 * 
 */
struct __pyx_obj_6thrift_3py3_5types_Map {
  struct __pyx_obj_6thrift_3py3_5types_Container __pyx_base;
  struct __pyx_vtabstruct_6thrift_3py3_5types_Map *__pyx_vtab;
};


/* "thrift/py3/types.pxd":174
 * 
 * 
 * cdef class CompiledEnum:             # <<<<<<<<<<<<<<
 *     cdef object __weakref__
 *     cdef readonly int value
 */
struct __pyx_obj_6thrift_3py3_5types_CompiledEnum {
  PyObject_HEAD
  struct __pyx_vtabstruct_6thrift_3py3_5types_CompiledEnum *__pyx_vtab;
  PyObject *__weakref__;
  int value;
  PyObject *name;
  PyObject *_fbthrift_hash;
  PyObject *__pyx___str;
  PyObject *__pyx___repr;
};


/* "thrift/py3/types.pxd":184
 * 
 * 
 * cdef class Flag(CompiledEnum):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6thrift_3py3_5types_Flag {
  struct __pyx_obj_6thrift_3py3_5types_CompiledEnum __pyx_base;
};


/* "thrift/py3/types.pxd":187
 *     pass
 * 
 * cdef class BadEnum:             # <<<<<<<<<<<<<<
 *     cdef object _enum
 *     cdef readonly int value
 */
struct __pyx_obj_6thrift_3py3_5types_BadEnum {
  PyObject_HEAD
  PyObject *_enum;
  int value;
  PyObject *name;
};


/* "thrift/py3/types.pxd":193
 * 
 * 
 * cdef class StructFieldsSetter:             # <<<<<<<<<<<<<<
 *     cdef void set_field(StructFieldsSetter self, const char* name, object value) except *
 * 
 */
struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter {
  PyObject_HEAD
  struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter *__pyx_vtab;
};


/* "picard/types_fields.pxd":48
 * ctypedef void (*__SQLSchema_FieldsSetterFunc)(__SQLSchema_FieldsSetter, object) except *
 * 
 * cdef class __SQLSchema_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cSQLSchema* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __SQLSchema_FieldsSetterFunc] _setters
 */
struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter {
  struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  ::cpp2::SQLSchema *_struct_cpp_obj;
  std::unordered_map<std::string_view,__pyx_t_6picard_12types_fields___SQLSchema_FieldsSetterFunc>  _setters;
};


/* "picard/types_fields.pxd":65
 * ctypedef void (*__RegisterSQLSchemaException_FieldsSetterFunc)(__RegisterSQLSchemaException_FieldsSetter, object) except *
 * 
 * cdef class __RegisterSQLSchemaException_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cRegisterSQLSchemaException* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __RegisterSQLSchemaException_FieldsSetterFunc] _setters
 */
struct __pyx_obj_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter {
  struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  ::cpp2::RegisterSQLSchemaException *_struct_cpp_obj;
  std::unordered_map<std::string_view,__pyx_t_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetterFunc>  _setters;
};


/* "picard/types_fields.pxd":77
 * ctypedef void (*__RegisterTokenizerException_FieldsSetterFunc)(__RegisterTokenizerException_FieldsSetter, object) except *
 * 
 * cdef class __RegisterTokenizerException_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cRegisterTokenizerException* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __RegisterTokenizerException_FieldsSetterFunc] _setters
 */
struct __pyx_obj_6picard_12types_fields___RegisterTokenizerException_FieldsSetter {
  struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  ::cpp2::RegisterTokenizerException *_struct_cpp_obj;
  std::unordered_map<std::string_view,__pyx_t_6picard_12types_fields___RegisterTokenizerException_FieldsSetterFunc>  _setters;
};


/* "picard/types_fields.pxd":88
 * ctypedef void (*__TokenizerNotRegisteredException_FieldsSetterFunc)(__TokenizerNotRegisteredException_FieldsSetter, object) except *
 * 
 * cdef class __TokenizerNotRegisteredException_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cTokenizerNotRegisteredException* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __TokenizerNotRegisteredException_FieldsSetterFunc] _setters
 */
struct __pyx_obj_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter {
  struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  ::cpp2::TokenizerNotRegisteredException *_struct_cpp_obj;
  std::unordered_map<std::string_view,__pyx_t_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetterFunc>  _setters;
};


/* "picard/types_fields.pxd":99
 * ctypedef void (*__TokenizerPrefixException_FieldsSetterFunc)(__TokenizerPrefixException_FieldsSetter, object) except *
 * 
 * cdef class __TokenizerPrefixException_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cTokenizerPrefixException* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __TokenizerPrefixException_FieldsSetterFunc] _setters
 */
struct __pyx_obj_6picard_12types_fields___TokenizerPrefixException_FieldsSetter {
  struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  ::cpp2::TokenizerPrefixException *_struct_cpp_obj;
  std::unordered_map<std::string_view,__pyx_t_6picard_12types_fields___TokenizerPrefixException_FieldsSetterFunc>  _setters;
};


/* "picard/types_fields.pxd":110
 * ctypedef void (*__ModeException_FieldsSetterFunc)(__ModeException_FieldsSetter, object) except *
 * 
 * cdef class __ModeException_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cModeException* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __ModeException_FieldsSetterFunc] _setters
 */
struct __pyx_obj_6picard_12types_fields___ModeException_FieldsSetter {
  struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  ::cpp2::ModeException *_struct_cpp_obj;
  std::unordered_map<std::string_view,__pyx_t_6picard_12types_fields___ModeException_FieldsSetterFunc>  _setters;
};


/* "picard/types_fields.pxd":121
 * ctypedef void (*__FeedException_FieldsSetterFunc)(__FeedException_FieldsSetter, object) except *
 * 
 * cdef class __FeedException_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cFeedException* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __FeedException_FieldsSetterFunc] _setters
 */
struct __pyx_obj_6picard_12types_fields___FeedException_FieldsSetter {
  struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  ::cpp2::FeedException *_struct_cpp_obj;
  std::unordered_map<std::string_view,__pyx_t_6picard_12types_fields___FeedException_FieldsSetterFunc>  _setters;
};


/* "picard/types_fields.pxd":132
 * ctypedef void (*__FeedParseFailure_FieldsSetterFunc)(__FeedParseFailure_FieldsSetter, object) except *
 * 
 * cdef class __FeedParseFailure_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cFeedParseFailure* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __FeedParseFailure_FieldsSetterFunc] _setters
 */
struct __pyx_obj_6picard_12types_fields___FeedParseFailure_FieldsSetter {
  struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  ::cpp2::FeedParseFailure *_struct_cpp_obj;
  std::unordered_map<std::string_view,__pyx_t_6picard_12types_fields___FeedParseFailure_FieldsSetterFunc>  _setters;
};


/* "picard/types_fields.pxd":145
 * ctypedef void (*__FeedTimeoutFailure_FieldsSetterFunc)(__FeedTimeoutFailure_FieldsSetter, object) except *
 * 
 * cdef class __FeedTimeoutFailure_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cFeedTimeoutFailure* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __FeedTimeoutFailure_FieldsSetterFunc] _setters
 */
struct __pyx_obj_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter {
  struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  ::cpp2::FeedTimeoutFailure *_struct_cpp_obj;
  std::unordered_map<std::string_view,__pyx_t_6picard_12types_fields___FeedTimeoutFailure_FieldsSetterFunc>  _setters;
};


/* "picard/types_fields.pxd":156
 * ctypedef void (*__FeedPartialSuccess_FieldsSetterFunc)(__FeedPartialSuccess_FieldsSetter, object) except *
 * 
 * cdef class __FeedPartialSuccess_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cFeedPartialSuccess* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __FeedPartialSuccess_FieldsSetterFunc] _setters
 */
struct __pyx_obj_6picard_12types_fields___FeedPartialSuccess_FieldsSetter {
  struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  ::cpp2::FeedPartialSuccess *_struct_cpp_obj;
  std::unordered_map<std::string_view,__pyx_t_6picard_12types_fields___FeedPartialSuccess_FieldsSetterFunc>  _setters;
};


/* "picard/types_fields.pxd":166
 * ctypedef void (*__FeedCompleteSuccess_FieldsSetterFunc)(__FeedCompleteSuccess_FieldsSetter, object) except *
 * 
 * cdef class __FeedCompleteSuccess_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cFeedCompleteSuccess* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __FeedCompleteSuccess_FieldsSetterFunc] _setters
 */
struct __pyx_obj_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter {
  struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  ::cpp2::FeedCompleteSuccess *_struct_cpp_obj;
  std::unordered_map<std::string_view,__pyx_t_6picard_12types_fields___FeedCompleteSuccess_FieldsSetterFunc>  _setters;
};


/* "picard/types_fields.pxd":177
 * ctypedef void (*__BatchFeedResult_FieldsSetterFunc)(__BatchFeedResult_FieldsSetter, object) except *
 * 
 * cdef class __BatchFeedResult_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cBatchFeedResult* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __BatchFeedResult_FieldsSetterFunc] _setters
 */
struct __pyx_obj_6picard_12types_fields___BatchFeedResult_FieldsSetter {
  struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  ::cpp2::BatchFeedResult *_struct_cpp_obj;
  std::unordered_map<std::string_view,__pyx_t_6picard_12types_fields___BatchFeedResult_FieldsSetterFunc>  _setters;
};


/* "thrift/py3/reflection.pxd":43
 * 
 * 
 * cdef class StructSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly str name
 *     cdef cvector[PyObject*] _fields
 */
struct __pyx_obj_6thrift_3py3_10reflection_StructSpec {
  PyObject_HEAD
  struct __pyx_vtabstruct_6thrift_3py3_10reflection_StructSpec *__pyx_vtab;
  PyObject *name;
  std::vector<PyObject *>  _fields;
  PyObject *kind;
  PyObject *annotations;
};


/* "thrift/py3/reflection.pxd":54
 * 
 * 
 * cdef class FieldSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly int id
 *     cdef readonly str name
 */
struct __pyx_obj_6thrift_3py3_10reflection_FieldSpec {
  PyObject_HEAD
  struct __pyx_vtabstruct_6thrift_3py3_10reflection_FieldSpec *__pyx_vtab;
  int id;
  PyObject *name;
  PyObject *type;
  PyObject *kind;
  PyObject *qualifier;
  PyObject *default_;
  PyObject *annotations;
};


/* "thrift/py3/reflection.pxd":75
 * 
 * 
 * cdef class ListSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly object value
 *     cdef readonly object kind
 */
struct __pyx_obj_6thrift_3py3_10reflection_ListSpec {
  PyObject_HEAD
  struct __pyx_vtabstruct_6thrift_3py3_10reflection_ListSpec *__pyx_vtab;
  PyObject *value;
  PyObject *kind;
};


/* "thrift/py3/reflection.pxd":83
 * 
 * 
 * cdef class SetSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly object value
 *     cdef readonly object kind
 */
struct __pyx_obj_6thrift_3py3_10reflection_SetSpec {
  PyObject_HEAD
  struct __pyx_vtabstruct_6thrift_3py3_10reflection_SetSpec *__pyx_vtab;
  PyObject *value;
  PyObject *kind;
};


/* "thrift/py3/reflection.pxd":91
 * 
 * 
 * cdef class MapSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly object key
 *     cdef readonly object key_kind
 */
struct __pyx_obj_6thrift_3py3_10reflection_MapSpec {
  PyObject_HEAD
  struct __pyx_vtabstruct_6thrift_3py3_10reflection_MapSpec *__pyx_vtab;
  PyObject *key;
  PyObject *key_kind;
  PyObject *value;
  PyObject *value_kind;
};


/* "thrift/py3/reflection.pxd":106
 * 
 * 
 * cdef class InterfaceSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly str name
 *     cdef cvector[PyObject*] _methods
 */
struct __pyx_obj_6thrift_3py3_10reflection_InterfaceSpec {
  PyObject_HEAD
  struct __pyx_vtabstruct_6thrift_3py3_10reflection_InterfaceSpec *__pyx_vtab;
  PyObject *name;
  std::vector<PyObject *>  _methods;
  PyObject *annotations;
};


/* "thrift/py3/reflection.pxd":116
 * 
 * 
 * cdef class MethodSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly str name
 *     cdef readonly tuple arguments
 */
struct __pyx_obj_6thrift_3py3_10reflection_MethodSpec {
  PyObject_HEAD
  struct __pyx_vtabstruct_6thrift_3py3_10reflection_MethodSpec *__pyx_vtab;
  PyObject *name;
  PyObject *arguments;
  PyObject *result_kind;
  PyObject *result;
  PyObject *exceptions;
  PyObject *annotations;
};


/* "thrift/py3/reflection.pxd":135
 * 
 * 
 * cdef class ArgumentSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly str name
 *     cdef readonly object kind
 */
struct __pyx_obj_6thrift_3py3_10reflection_ArgumentSpec {
  PyObject_HEAD
  struct __pyx_vtabstruct_6thrift_3py3_10reflection_ArgumentSpec *__pyx_vtab;
  PyObject *name;
  PyObject *kind;
  PyObject *type;
  PyObject *annotations;
};


/* "picard/types.pxd":63
 * 
 * 
 * cdef class ColumnType(thrift.py3.types.CompiledEnum):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6picard_5types_ColumnType {
  struct __pyx_obj_6thrift_3py3_5types_CompiledEnum __pyx_base;
};


/* "picard/types.pxd":67
 * 
 * 
 * cdef class Mode(thrift.py3.types.CompiledEnum):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6picard_5types_Mode {
  struct __pyx_obj_6thrift_3py3_5types_CompiledEnum __pyx_base;
};


/* "picard/types.pxd":307
 * 
 * 
 * cdef class SQLSchema(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cSQLSchema] _cpp_obj
 *     cdef _fbthrift_types_fields.__SQLSchema_FieldsSetter _fields_setter
 */
struct __pyx_obj_6picard_5types_SQLSchema {
  struct __pyx_obj_6thrift_3py3_5types_Struct __pyx_base;
  std::shared_ptr<::cpp2::SQLSchema>  _cpp_obj;
  struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter *_fields_setter;
  struct __pyx_obj_6picard_5types_Map__string_string *__pyx___fbthrift_cached_columnNames;
  struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx___fbthrift_cached_columnTypes;
  struct __pyx_obj_6picard_5types_Map__string_string *__pyx___fbthrift_cached_tableNames;
  struct __pyx_obj_6picard_5types_Map__string_string *__pyx___fbthrift_cached_columnToTable;
  struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx___fbthrift_cached_tableToColumns;
  struct __pyx_obj_6picard_5types_Map__string_string *__pyx___fbthrift_cached_foreignKeys;
  struct __pyx_obj_6picard_5types_List__string *__pyx___fbthrift_cached_primaryKeys;
};


/* "picard/types.pxd":323
 * 
 * 
 * cdef class RegisterSQLSchemaException(thrift.py3.exceptions.GeneratedError):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cRegisterSQLSchemaException] _cpp_obj
 *     cdef _fbthrift_types_fields.__RegisterSQLSchemaException_FieldsSetter _fields_setter
 */
struct __pyx_obj_6picard_5types_RegisterSQLSchemaException {
  struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError __pyx_base;
  std::shared_ptr<::cpp2::RegisterSQLSchemaException>  _cpp_obj;
  struct __pyx_obj_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter *_fields_setter;
};


/* "picard/types.pxd":332
 * 
 * 
 * cdef class RegisterTokenizerException(thrift.py3.exceptions.GeneratedError):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cRegisterTokenizerException] _cpp_obj
 *     cdef _fbthrift_types_fields.__RegisterTokenizerException_FieldsSetter _fields_setter
 */
struct __pyx_obj_6picard_5types_RegisterTokenizerException {
  struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError __pyx_base;
  std::shared_ptr<::cpp2::RegisterTokenizerException>  _cpp_obj;
  struct __pyx_obj_6picard_12types_fields___RegisterTokenizerException_FieldsSetter *_fields_setter;
};


/* "picard/types.pxd":341
 * 
 * 
 * cdef class TokenizerNotRegisteredException(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cTokenizerNotRegisteredException] _cpp_obj
 *     cdef _fbthrift_types_fields.__TokenizerNotRegisteredException_FieldsSetter _fields_setter
 */
struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException {
  struct __pyx_obj_6thrift_3py3_5types_Struct __pyx_base;
  std::shared_ptr<::cpp2::TokenizerNotRegisteredException>  _cpp_obj;
  struct __pyx_obj_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter *_fields_setter;
};


/* "picard/types.pxd":350
 * 
 * 
 * cdef class TokenizerPrefixException(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cTokenizerPrefixException] _cpp_obj
 *     cdef _fbthrift_types_fields.__TokenizerPrefixException_FieldsSetter _fields_setter
 */
struct __pyx_obj_6picard_5types_TokenizerPrefixException {
  struct __pyx_obj_6thrift_3py3_5types_Struct __pyx_base;
  std::shared_ptr<::cpp2::TokenizerPrefixException>  _cpp_obj;
  struct __pyx_obj_6picard_12types_fields___TokenizerPrefixException_FieldsSetter *_fields_setter;
};


/* "picard/types.pxd":359
 * 
 * 
 * cdef class ModeException(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cModeException] _cpp_obj
 *     cdef _fbthrift_types_fields.__ModeException_FieldsSetter _fields_setter
 */
struct __pyx_obj_6picard_5types_ModeException {
  struct __pyx_obj_6thrift_3py3_5types_Struct __pyx_base;
  std::shared_ptr<::cpp2::ModeException>  _cpp_obj;
  struct __pyx_obj_6picard_12types_fields___ModeException_FieldsSetter *_fields_setter;
};


/* "picard/types.pxd":366
 *     cdef create(shared_ptr[cModeException])
 * 
 * cdef class __FeedFatalExceptionType(thrift.py3.types.CompiledEnum):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6picard_5types___FeedFatalExceptionType {
  struct __pyx_obj_6thrift_3py3_5types_CompiledEnum __pyx_base;
};


/* "picard/types.pxd":372
 * 
 * 
 * cdef class FeedFatalException(thrift.py3.types.Union):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cFeedFatalException] _cpp_obj
 *     cdef readonly __FeedFatalExceptionType type
 */
struct __pyx_obj_6picard_5types_FeedFatalException {
  struct __pyx_obj_6thrift_3py3_5types_Union __pyx_base;
  std::shared_ptr<::cpp2::FeedFatalException>  _cpp_obj;
  struct __pyx_obj_6picard_5types___FeedFatalExceptionType *type;
  PyObject *value;
};


/* "picard/types.pxd":391
 * 
 * 
 * cdef class FeedException(thrift.py3.exceptions.GeneratedError):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cFeedException] _cpp_obj
 *     cdef _fbthrift_types_fields.__FeedException_FieldsSetter _fields_setter
 */
struct __pyx_obj_6picard_5types_FeedException {
  struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError __pyx_base;
  std::shared_ptr<::cpp2::FeedException>  _cpp_obj;
  struct __pyx_obj_6picard_12types_fields___FeedException_FieldsSetter *_fields_setter;
  struct __pyx_obj_6picard_5types_FeedFatalException *__pyx___fbthrift_cached_feedFatalException;
};


/* "picard/types.pxd":401
 * 
 * 
 * cdef class FeedParseFailure(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cFeedParseFailure] _cpp_obj
 *     cdef _fbthrift_types_fields.__FeedParseFailure_FieldsSetter _fields_setter
 */
struct __pyx_obj_6picard_5types_FeedParseFailure {
  struct __pyx_obj_6thrift_3py3_5types_Struct __pyx_base;
  std::shared_ptr<::cpp2::FeedParseFailure>  _cpp_obj;
  struct __pyx_obj_6picard_12types_fields___FeedParseFailure_FieldsSetter *_fields_setter;
  struct __pyx_obj_6picard_5types_List__string *__pyx___fbthrift_cached_contexts;
};


/* "picard/types.pxd":411
 * 
 * 
 * cdef class FeedTimeoutFailure(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cFeedTimeoutFailure] _cpp_obj
 *     cdef _fbthrift_types_fields.__FeedTimeoutFailure_FieldsSetter _fields_setter
 */
struct __pyx_obj_6picard_5types_FeedTimeoutFailure {
  struct __pyx_obj_6thrift_3py3_5types_Struct __pyx_base;
  std::shared_ptr<::cpp2::FeedTimeoutFailure>  _cpp_obj;
  struct __pyx_obj_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter *_fields_setter;
};


/* "picard/types.pxd":420
 * 
 * 
 * cdef class FeedPartialSuccess(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cFeedPartialSuccess] _cpp_obj
 *     cdef _fbthrift_types_fields.__FeedPartialSuccess_FieldsSetter _fields_setter
 */
struct __pyx_obj_6picard_5types_FeedPartialSuccess {
  struct __pyx_obj_6thrift_3py3_5types_Struct __pyx_base;
  std::shared_ptr<::cpp2::FeedPartialSuccess>  _cpp_obj;
  struct __pyx_obj_6picard_12types_fields___FeedPartialSuccess_FieldsSetter *_fields_setter;
};


/* "picard/types.pxd":429
 * 
 * 
 * cdef class FeedCompleteSuccess(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cFeedCompleteSuccess] _cpp_obj
 *     cdef _fbthrift_types_fields.__FeedCompleteSuccess_FieldsSetter _fields_setter
 */
struct __pyx_obj_6picard_5types_FeedCompleteSuccess {
  struct __pyx_obj_6thrift_3py3_5types_Struct __pyx_base;
  std::shared_ptr<::cpp2::FeedCompleteSuccess>  _cpp_obj;
  struct __pyx_obj_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter *_fields_setter;
};


/* "picard/types.pxd":436
 *     cdef create(shared_ptr[cFeedCompleteSuccess])
 * 
 * cdef class __FeedResultType(thrift.py3.types.CompiledEnum):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
struct __pyx_obj_6picard_5types___FeedResultType {
  struct __pyx_obj_6thrift_3py3_5types_CompiledEnum __pyx_base;
};


/* "picard/types.pxd":442
 * 
 * 
 * cdef class FeedResult(thrift.py3.types.Union):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cFeedResult] _cpp_obj
 *     cdef readonly __FeedResultType type
 */
struct __pyx_obj_6picard_5types_FeedResult {
  struct __pyx_obj_6thrift_3py3_5types_Union __pyx_base;
  std::shared_ptr<::cpp2::FeedResult>  _cpp_obj;
  struct __pyx_obj_6picard_5types___FeedResultType *type;
  PyObject *value;
};


/* "picard/types.pxd":462
 * 
 * 
 * cdef class BatchFeedResult(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cBatchFeedResult] _cpp_obj
 *     cdef _fbthrift_types_fields.__BatchFeedResult_FieldsSetter _fields_setter
 */
struct __pyx_obj_6picard_5types_BatchFeedResult {
  struct __pyx_obj_6thrift_3py3_5types_Struct __pyx_base;
  std::shared_ptr<::cpp2::BatchFeedResult>  _cpp_obj;
  struct __pyx_obj_6picard_12types_fields___BatchFeedResult_FieldsSetter *_fields_setter;
  struct __pyx_obj_6picard_5types_FeedResult *__pyx___fbthrift_cached_feedResult;
};


/* "picard/types.pxd":471
 * 
 * 
 * cdef class List__i64(thrift.py3.types.List):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[vector[cint64_t]] _cpp_obj
 *     @staticmethod
 */
struct __pyx_obj_6picard_5types_List__i64 {
  struct __pyx_obj_6thrift_3py3_5types_List __pyx_base;
  std::shared_ptr<std::vector<int64_t> >  _cpp_obj;
};


/* "picard/types.pxd":478
 *     cdef shared_ptr[vector[cint64_t]] _make_instance(object items) except *
 * 
 * cdef class List__List__i64(thrift.py3.types.List):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[vector[vector[cint64_t]]] _cpp_obj
 *     @staticmethod
 */
struct __pyx_obj_6picard_5types_List__List__i64 {
  struct __pyx_obj_6thrift_3py3_5types_List __pyx_base;
  std::shared_ptr<std::vector<std::vector<int64_t> > >  _cpp_obj;
};


/* "picard/types.pxd":485
 *     cdef shared_ptr[vector[vector[cint64_t]]] _make_instance(object items) except *
 * 
 * cdef class List__BatchFeedResult(thrift.py3.types.List):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[vector[cBatchFeedResult]] _cpp_obj
 *     @staticmethod
 */
struct __pyx_obj_6picard_5types_List__BatchFeedResult {
  struct __pyx_obj_6thrift_3py3_5types_List __pyx_base;
  std::shared_ptr<std::vector<::cpp2::BatchFeedResult> >  _cpp_obj;
};


/* "picard/types.pxd":492
 *     cdef shared_ptr[vector[cBatchFeedResult]] _make_instance(object items) except *
 * 
 * cdef class Map__string_string(thrift.py3.types.Map):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cmap[string,string]] _cpp_obj
 *     @staticmethod
 */
struct __pyx_obj_6picard_5types_Map__string_string {
  struct __pyx_obj_6thrift_3py3_5types_Map __pyx_base;
  std::shared_ptr<std::map<std::string,std::string> >  _cpp_obj;
};


/* "picard/types.pxd":499
 *     cdef shared_ptr[cmap[string,string]] _make_instance(object items) except *
 * 
 * cdef class Map__string_ColumnType(thrift.py3.types.Map):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cmap[string,cColumnType]] _cpp_obj
 *     @staticmethod
 */
struct __pyx_obj_6picard_5types_Map__string_ColumnType {
  struct __pyx_obj_6thrift_3py3_5types_Map __pyx_base;
  std::shared_ptr<std::map<std::string,::cpp2::ColumnType> >  _cpp_obj;
};


/* "picard/types.pxd":506
 *     cdef shared_ptr[cmap[string,cColumnType]] _make_instance(object items) except *
 * 
 * cdef class List__string(thrift.py3.types.List):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[vector[string]] _cpp_obj
 *     @staticmethod
 */
struct __pyx_obj_6picard_5types_List__string {
  struct __pyx_obj_6thrift_3py3_5types_List __pyx_base;
  std::shared_ptr<std::vector<std::string> >  _cpp_obj;
};


/* "picard/types.pxd":513
 *     cdef shared_ptr[vector[string]] _make_instance(object items) except *
 * 
 * cdef class Map__string_List__string(thrift.py3.types.Map):             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cmap[string,vector[string]]] _cpp_obj
 *     @staticmethod
 */
struct __pyx_obj_6picard_5types_Map__string_List__string {
  struct __pyx_obj_6thrift_3py3_5types_Map __pyx_base;
  std::shared_ptr<std::map<std::string,std::vector<std::string> > >  _cpp_obj;
};


/* "picard/types.pyx":65
 * @__cython.internal
 * @__cython.auto_pickle(False)
 * cdef class __ColumnTypeMeta(thrift.py3.types.EnumMeta):             # <<<<<<<<<<<<<<
 *     def _fbthrift_get_by_value(cls, int value):
 *         return __ColumnType_enum_data.get_by_value(value)
 */
struct __pyx_obj_6picard_5types___ColumnTypeMeta {
  struct __pyx_obj_6thrift_3py3_5types_EnumMeta __pyx_base;
};


/* "picard/types.pyx":107
 * @__cython.internal
 * @__cython.auto_pickle(False)
 * cdef class __ModeMeta(thrift.py3.types.EnumMeta):             # <<<<<<<<<<<<<<
 *     def _fbthrift_get_by_value(cls, int value):
 *         return __Mode_enum_data.get_by_value(value)
 */
struct __pyx_obj_6picard_5types___ModeMeta {
  struct __pyx_obj_6thrift_3py3_5types_EnumMeta __pyx_base;
};


/* "picard/types.pyx":153
 * @__cython.internal
 * @__cython.auto_pickle(False)
 * cdef class __FeedFatalException_Union_TypeMeta(thrift.py3.types.EnumMeta):             # <<<<<<<<<<<<<<
 *     def _fbthrift_get_by_value(cls, int value):
 *         return __FeedFatalException_union_type_enum_data.get_by_value(value)
 */
struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta {
  struct __pyx_obj_6thrift_3py3_5types_EnumMeta __pyx_base;
};


/* "picard/types.pyx":187
 * @__cython.internal
 * @__cython.auto_pickle(False)
 * cdef class __FeedResult_Union_TypeMeta(thrift.py3.types.EnumMeta):             # <<<<<<<<<<<<<<
 *     def _fbthrift_get_by_value(cls, int value):
 *         return __FeedResult_union_type_enum_data.get_by_value(value)
 */
struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta {
  struct __pyx_obj_6thrift_3py3_5types_EnumMeta __pyx_base;
};


/* "picard/types.pyx":368
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cRegisterSQLSchemaException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <RegisterSQLSchemaException>RegisterSQLSchemaException.__new__(RegisterSQLSchemaException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct__create {
  PyObject_HEAD
  struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v___fbthrift_inst;
};


/* "picard/types.pyx":371
 *         __fbthrift_inst = <RegisterSQLSchemaException>RegisterSQLSchemaException.__new__(RegisterSQLSchemaException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6picard_5types___pyx_scope_struct__create *__pyx_outer_scope;
  PyObject *__pyx_v__;
  PyObject *__pyx_v_v;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "picard/types.pyx":440
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cRegisterTokenizerException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <RegisterTokenizerException>RegisterTokenizerException.__new__(RegisterTokenizerException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create {
  PyObject_HEAD
  struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v___fbthrift_inst;
};


/* "picard/types.pyx":443
 *         __fbthrift_inst = <RegisterTokenizerException>RegisterTokenizerException.__new__(RegisterTokenizerException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create *__pyx_outer_scope;
  PyObject *__pyx_v__;
  PyObject *__pyx_v_v;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "picard/types.pyx":922
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedException>FeedException.__new__(FeedException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create {
  PyObject_HEAD
  struct __pyx_obj_6picard_5types_FeedException *__pyx_v___fbthrift_inst;
};


/* "picard/types.pyx":925
 *         __fbthrift_inst = <FeedException>FeedException.__new__(FeedException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create *__pyx_outer_scope;
  PyObject *__pyx_v__;
  PyObject *__pyx_v_v;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "picard/types.pyx":1891
 *         return bytes(citem).decode('UTF-8')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__ {
  PyObject_HEAD
  std::string __pyx_v_citem;
  size_t __pyx_v_i;
  ::thrift::py3::map_iter<std::map<std::string,std::string> >  __pyx_v_itr;
  struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self;
  size_t __pyx_t_0;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
};


/* "picard/types.pyx":1907
 *         return __map_contains(self._cpp_obj, ckey)
 * 
 *     def values(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values {
  PyObject_HEAD
  std::string __pyx_v_citem;
  size_t __pyx_v_i;
  ::thrift::py3::map_iter<std::map<std::string,std::string> >  __pyx_v_itr;
  struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self;
  size_t __pyx_t_0;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
};


/* "picard/types.pyx":1916
 *             yield bytes(citem).decode('UTF-8')
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items {
  PyObject_HEAD
  std::string __pyx_v_citem;
  std::string __pyx_v_ckey;
  size_t __pyx_v_i;
  ::thrift::py3::map_iter<std::map<std::string,std::string> >  __pyx_v_itr;
  struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self;
  size_t __pyx_t_0;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
};


/* "picard/types.pyx":1986
 *         return translate_cpp_enum_to_python(ColumnType, <int> citem)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__ {
  PyObject_HEAD
  std::string __pyx_v_citem;
  size_t __pyx_v_i;
  ::thrift::py3::map_iter<std::map<std::string,::cpp2::ColumnType> >  __pyx_v_itr;
  struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self;
  size_t __pyx_t_0;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
};


/* "picard/types.pyx":2002
 *         return __map_contains(self._cpp_obj, ckey)
 * 
 *     def values(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values {
  PyObject_HEAD
  ::cpp2::ColumnType __pyx_v_citem;
  size_t __pyx_v_i;
  ::thrift::py3::map_iter<std::map<std::string,::cpp2::ColumnType> >  __pyx_v_itr;
  struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self;
  size_t __pyx_t_0;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
};


/* "picard/types.pyx":2011
 *             yield translate_cpp_enum_to_python(ColumnType, <int> citem)
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items {
  PyObject_HEAD
  ::cpp2::ColumnType __pyx_v_citem;
  std::string __pyx_v_ckey;
  size_t __pyx_v_i;
  ::thrift::py3::map_iter<std::map<std::string,::cpp2::ColumnType> >  __pyx_v_itr;
  struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self;
  size_t __pyx_t_0;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
};


/* "picard/types.pyx":2160
 *         return List__string.create(citem)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__ {
  PyObject_HEAD
  std::string __pyx_v_citem;
  size_t __pyx_v_i;
  ::thrift::py3::map_iter<std::map<std::string,std::vector<std::string> > >  __pyx_v_itr;
  struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self;
  size_t __pyx_t_0;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
};


/* "picard/types.pyx":2176
 *         return __map_contains(self._cpp_obj, ckey)
 * 
 *     def values(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values {
  PyObject_HEAD
  std::shared_ptr<std::vector<std::string> >  __pyx_v_citem;
  size_t __pyx_v_i;
  ::thrift::py3::map_iter<std::map<std::string,std::vector<std::string> > >  __pyx_v_itr;
  struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self;
  size_t __pyx_t_0;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
};


/* "picard/types.pyx":2185
 *             yield List__string.create(citem)
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */
struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items {
  PyObject_HEAD
  std::shared_ptr<std::vector<std::string> >  __pyx_v_citem;
  std::string __pyx_v_ckey;
  size_t __pyx_v_i;
  ::thrift::py3::map_iter<std::map<std::string,std::vector<std::string> > >  __pyx_v_itr;
  struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self;
  size_t __pyx_t_0;
  size_t __pyx_t_1;
  size_t __pyx_t_2;
};


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":279
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "folly/iobuf.pxd":57
 * 
 * 
 * cdef class IOBuf:             # <<<<<<<<<<<<<<
 *     cdef object __weakref__
 *     cdef cIOBuf* _this
 */

struct __pyx_vtabstruct_5folly_5iobuf_IOBuf {
  struct __pyx_obj_5folly_5iobuf_IOBuf *(*create)(folly::IOBuf *, PyObject *);
  void (*cleanup)(struct __pyx_obj_5folly_5iobuf_IOBuf *);
  std::unique_ptr<folly::IOBuf>  (*c_clone)(struct __pyx_obj_5folly_5iobuf_IOBuf *);
};
static struct __pyx_vtabstruct_5folly_5iobuf_IOBuf *__pyx_vtabptr_5folly_5iobuf_IOBuf;


/* "thrift/py3/common.pxd":48
 * 
 * 
 * cdef class Headers:             # <<<<<<<<<<<<<<
 *     cdef object __weakref__
 *     cdef const cmap[string, string]* _getMap(self)
 */

struct __pyx_vtabstruct_6thrift_3py3_6common_Headers {
  std::map<std::string,std::string>  const *(*_getMap)(struct __pyx_obj_6thrift_3py3_6common_Headers *);
};
static struct __pyx_vtabstruct_6thrift_3py3_6common_Headers *__pyx_vtabptr_6thrift_3py3_6common_Headers;


/* "thrift/py3/common.pxd":92
 * 
 * 
 * cdef class ReadHeaders(Headers):             # <<<<<<<<<<<<<<
 *     cdef RpcOptions _parent
 *     @staticmethod
 */

struct __pyx_vtabstruct_6thrift_3py3_6common_ReadHeaders {
  struct __pyx_vtabstruct_6thrift_3py3_6common_Headers __pyx_base;
  PyObject *(*create)(struct __pyx_obj_6thrift_3py3_6common_RpcOptions *);
};
static struct __pyx_vtabstruct_6thrift_3py3_6common_ReadHeaders *__pyx_vtabptr_6thrift_3py3_6common_ReadHeaders;


/* "thrift/py3/common.pxd":98
 * 
 * 
 * cdef class WriteHeaders(Headers):             # <<<<<<<<<<<<<<
 *     cdef RpcOptions _parent
 *     @staticmethod
 */

struct __pyx_vtabstruct_6thrift_3py3_6common_WriteHeaders {
  struct __pyx_vtabstruct_6thrift_3py3_6common_Headers __pyx_base;
  PyObject *(*create)(struct __pyx_obj_6thrift_3py3_6common_RpcOptions *);
};
static struct __pyx_vtabstruct_6thrift_3py3_6common_WriteHeaders *__pyx_vtabptr_6thrift_3py3_6common_WriteHeaders;


/* "thrift/py3/common.pxd":104
 * 
 * 
 * cdef class MetadataBox:             # <<<<<<<<<<<<<<
 *     cdef shared_ptr[cThriftMetadata] _cpp_obj
 *     @staticmethod
 */

struct __pyx_vtabstruct_6thrift_3py3_6common_MetadataBox {
  PyObject *(*box)(::apache::thrift::metadata::ThriftMetadata &&);
};
static struct __pyx_vtabstruct_6thrift_3py3_6common_MetadataBox *__pyx_vtabptr_6thrift_3py3_6common_MetadataBox;


/* "thrift/py3/exceptions.pxd":140
 *     pass
 * 
 * cdef class GeneratedError(Error):             # <<<<<<<<<<<<<<
 *     cdef object __weakref__
 *     cdef size_t _fbthrift_struct_size
 */

struct __pyx_vtabstruct_6thrift_3py3_10exceptions_GeneratedError {
  PyObject *(*_fbthrift_isset)(struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *);
  PyObject *(*_fbthrift_cmp_sametype)(struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *, PyObject *, int);
  void (*_fbthrift_set_field)(struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *, PyObject *, PyObject *);
  std::string_view (*_fbthrift_get_field_name_by_index)(struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *, size_t);
};
static struct __pyx_vtabstruct_6thrift_3py3_10exceptions_GeneratedError *__pyx_vtabptr_6thrift_3py3_10exceptions_GeneratedError;


/* "thrift/py3/types.pxd":106
 * 
 * 
 * cdef class EnumData:             # <<<<<<<<<<<<<<
 *     cdef unique_ptr[cEnumData] _cpp_obj
 *     cdef type _py_type
 */

struct __pyx_vtabstruct_6thrift_3py3_5types_EnumData {
  PyObject *(*get_by_name)(struct __pyx_obj_6thrift_3py3_5types_EnumData *, PyObject *);
  PyObject *(*get_by_value)(struct __pyx_obj_6thrift_3py3_5types_EnumData *, int);
  PyObject *(*_add_to_cache)(struct __pyx_obj_6thrift_3py3_5types_EnumData *, PyObject *, int);
  int (*size)(struct __pyx_obj_6thrift_3py3_5types_EnumData *);
  void (*_value_error)(struct __pyx_obj_6thrift_3py3_5types_EnumData *, int);
  struct __pyx_obj_6thrift_3py3_5types_EnumData *(*create)(::thrift::py3::EnumData *, PyObject *);
};
static struct __pyx_vtabstruct_6thrift_3py3_5types_EnumData *__pyx_vtabptr_6thrift_3py3_5types_EnumData;


/* "thrift/py3/types.pxd":117
 *     cdef EnumData create(cEnumData* ptr, py_type)
 * 
 * cdef class EnumFlagsData(EnumData):             # <<<<<<<<<<<<<<
 *     cdef get_invert(self, uint32_t value)
 *     @staticmethod
 */

struct __pyx_vtabstruct_6thrift_3py3_5types_EnumFlagsData {
  struct __pyx_vtabstruct_6thrift_3py3_5types_EnumData __pyx_base;
  PyObject *(*get_invert)(struct __pyx_obj_6thrift_3py3_5types_EnumFlagsData *, uint32_t);
  struct __pyx_obj_6thrift_3py3_5types_EnumFlagsData *(*create)(::thrift::py3::EnumFlagsData *, PyObject *);
};
static struct __pyx_vtabstruct_6thrift_3py3_5types_EnumFlagsData *__pyx_vtabptr_6thrift_3py3_5types_EnumFlagsData;


/* "thrift/py3/types.pxd":122
 *     cdef EnumFlagsData create(cEnumFlagsData* ptr, py_type)
 * 
 * cdef class UnionTypeEnumData(EnumData):             # <<<<<<<<<<<<<<
 *     cdef object __empty
 *     @staticmethod
 */

struct __pyx_vtabstruct_6thrift_3py3_5types_UnionTypeEnumData {
  struct __pyx_vtabstruct_6thrift_3py3_5types_EnumData __pyx_base;
  struct __pyx_obj_6thrift_3py3_5types_UnionTypeEnumData *(*create)(::thrift::py3::EnumData *, PyObject *);
};
static struct __pyx_vtabstruct_6thrift_3py3_5types_UnionTypeEnumData *__pyx_vtabptr_6thrift_3py3_5types_UnionTypeEnumData;


/* "thrift/py3/types.pxd":137
 * 
 * 
 * cdef class Struct:             # <<<<<<<<<<<<<<
 *     cdef object _fbthrift_hash
 *     cdef object __weakref__
 */

struct __pyx_vtabstruct_6thrift_3py3_5types_Struct {
  struct __pyx_obj_5folly_5iobuf_IOBuf *(*_serialize)(struct __pyx_obj_6thrift_3py3_5types_Struct *, enum apache::thrift::protocol::PROTOCOL_TYPES);
  uint32_t (*_deserialize)(struct __pyx_obj_6thrift_3py3_5types_Struct *, folly::IOBuf const *, enum apache::thrift::protocol::PROTOCOL_TYPES);
  PyObject *(*_fbthrift_isset)(struct __pyx_obj_6thrift_3py3_5types_Struct *);
  int (*_fbthrift_noncomparable_eq)(struct __pyx_obj_6thrift_3py3_5types_Struct *, PyObject *);
  PyObject *(*_fbthrift_cmp_sametype)(struct __pyx_obj_6thrift_3py3_5types_Struct *, PyObject *, int);
  void (*_fbthrift_set_field)(struct __pyx_obj_6thrift_3py3_5types_Struct *, PyObject *, PyObject *);
  std::string_view (*_fbthrift_get_field_name_by_index)(struct __pyx_obj_6thrift_3py3_5types_Struct *, size_t);
};
static struct __pyx_vtabstruct_6thrift_3py3_5types_Struct *__pyx_vtabptr_6thrift_3py3_5types_Struct;


/* "thrift/py3/types.pxd":150
 * 
 * 
 * cdef class Union(Struct):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_6thrift_3py3_5types_Union {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Struct __pyx_base;
};
static struct __pyx_vtabstruct_6thrift_3py3_5types_Union *__pyx_vtabptr_6thrift_3py3_5types_Union;


/* "thrift/py3/types.pxd":159
 * 
 * 
 * cdef class List(Container):             # <<<<<<<<<<<<<<
 *     cdef int _normalize_index(self, int index) except *
 *     cdef _get_slice(self, slice index_obj)
 */

struct __pyx_vtabstruct_6thrift_3py3_5types_List {
  int (*_normalize_index)(struct __pyx_obj_6thrift_3py3_5types_List *, int);
  PyObject *(*_get_slice)(struct __pyx_obj_6thrift_3py3_5types_List *, PyObject *);
  PyObject *(*_get_single_item)(struct __pyx_obj_6thrift_3py3_5types_List *, size_t);
  PyObject *(*_check_item_type)(struct __pyx_obj_6thrift_3py3_5types_List *, PyObject *);
};
static struct __pyx_vtabstruct_6thrift_3py3_5types_List *__pyx_vtabptr_6thrift_3py3_5types_List;


/* "thrift/py3/types.pxd":165
 *     cdef _check_item_type(self, item)
 * 
 * cdef class Set(Container):             # <<<<<<<<<<<<<<
 *     cdef _fbthrift_py_richcmp(self, other, int op)
 *     cdef _fbthrift_do_set_op(self, other, cSetOp op)
 */

struct __pyx_vtabstruct_6thrift_3py3_5types_Set {
  PyObject *(*_fbthrift_py_richcmp)(struct __pyx_obj_6thrift_3py3_5types_Set *, PyObject *, int);
  PyObject *(*_fbthrift_do_set_op)(struct __pyx_obj_6thrift_3py3_5types_Set *, PyObject *, enum ::thrift::py3::SetOp);
};
static struct __pyx_vtabstruct_6thrift_3py3_5types_Set *__pyx_vtabptr_6thrift_3py3_5types_Set;


/* "thrift/py3/types.pxd":170
 * 
 * 
 * cdef class Map(Container):             # <<<<<<<<<<<<<<
 *     cdef _check_key_type(self, key)
 * 
 */

struct __pyx_vtabstruct_6thrift_3py3_5types_Map {
  PyObject *(*_check_key_type)(struct __pyx_obj_6thrift_3py3_5types_Map *, PyObject *);
};
static struct __pyx_vtabstruct_6thrift_3py3_5types_Map *__pyx_vtabptr_6thrift_3py3_5types_Map;


/* "thrift/py3/types.pxd":174
 * 
 * 
 * cdef class CompiledEnum:             # <<<<<<<<<<<<<<
 *     cdef object __weakref__
 *     cdef readonly int value
 */

struct __pyx_vtabstruct_6thrift_3py3_5types_CompiledEnum {
  PyObject *(*get_by_name)(struct __pyx_obj_6thrift_3py3_5types_CompiledEnum *, PyObject *);
};
static struct __pyx_vtabstruct_6thrift_3py3_5types_CompiledEnum *__pyx_vtabptr_6thrift_3py3_5types_CompiledEnum;


/* "thrift/py3/types.pxd":184
 * 
 * 
 * cdef class Flag(CompiledEnum):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_vtabstruct_6thrift_3py3_5types_Flag {
  struct __pyx_vtabstruct_6thrift_3py3_5types_CompiledEnum __pyx_base;
};
static struct __pyx_vtabstruct_6thrift_3py3_5types_Flag *__pyx_vtabptr_6thrift_3py3_5types_Flag;


/* "thrift/py3/types.pxd":193
 * 
 * 
 * cdef class StructFieldsSetter:             # <<<<<<<<<<<<<<
 *     cdef void set_field(StructFieldsSetter self, const char* name, object value) except *
 * 
 */

struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter {
  void (*set_field)(struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter *, char const *, PyObject *);
};
static struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter *__pyx_vtabptr_6thrift_3py3_5types_StructFieldsSetter;


/* "picard/types_fields.pxd":48
 * ctypedef void (*__SQLSchema_FieldsSetterFunc)(__SQLSchema_FieldsSetter, object) except *
 * 
 * cdef class __SQLSchema_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cSQLSchema* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __SQLSchema_FieldsSetterFunc] _setters
 */

struct __pyx_vtabstruct_6picard_12types_fields___SQLSchema_FieldsSetter {
  struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter *(*create)(::cpp2::SQLSchema *);
  void (*_set_field_0)(struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter *, PyObject *);
  void (*_set_field_1)(struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter *, PyObject *);
  void (*_set_field_2)(struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter *, PyObject *);
  void (*_set_field_3)(struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter *, PyObject *);
  void (*_set_field_4)(struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter *, PyObject *);
  void (*_set_field_5)(struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter *, PyObject *);
  void (*_set_field_6)(struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter *, PyObject *);
};
static struct __pyx_vtabstruct_6picard_12types_fields___SQLSchema_FieldsSetter *__pyx_vtabptr_6picard_12types_fields___SQLSchema_FieldsSetter;


/* "picard/types_fields.pxd":65
 * ctypedef void (*__RegisterSQLSchemaException_FieldsSetterFunc)(__RegisterSQLSchemaException_FieldsSetter, object) except *
 * 
 * cdef class __RegisterSQLSchemaException_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cRegisterSQLSchemaException* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __RegisterSQLSchemaException_FieldsSetterFunc] _setters
 */

struct __pyx_vtabstruct_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter {
  struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  struct __pyx_obj_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter *(*create)(::cpp2::RegisterSQLSchemaException *);
  void (*_set_field_0)(struct __pyx_obj_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter *, PyObject *);
  void (*_set_field_1)(struct __pyx_obj_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter *, PyObject *);
};
static struct __pyx_vtabstruct_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter *__pyx_vtabptr_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter;


/* "picard/types_fields.pxd":77
 * ctypedef void (*__RegisterTokenizerException_FieldsSetterFunc)(__RegisterTokenizerException_FieldsSetter, object) except *
 * 
 * cdef class __RegisterTokenizerException_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cRegisterTokenizerException* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __RegisterTokenizerException_FieldsSetterFunc] _setters
 */

struct __pyx_vtabstruct_6picard_12types_fields___RegisterTokenizerException_FieldsSetter {
  struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  struct __pyx_obj_6picard_12types_fields___RegisterTokenizerException_FieldsSetter *(*create)(::cpp2::RegisterTokenizerException *);
  void (*_set_field_0)(struct __pyx_obj_6picard_12types_fields___RegisterTokenizerException_FieldsSetter *, PyObject *);
};
static struct __pyx_vtabstruct_6picard_12types_fields___RegisterTokenizerException_FieldsSetter *__pyx_vtabptr_6picard_12types_fields___RegisterTokenizerException_FieldsSetter;


/* "picard/types_fields.pxd":88
 * ctypedef void (*__TokenizerNotRegisteredException_FieldsSetterFunc)(__TokenizerNotRegisteredException_FieldsSetter, object) except *
 * 
 * cdef class __TokenizerNotRegisteredException_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cTokenizerNotRegisteredException* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __TokenizerNotRegisteredException_FieldsSetterFunc] _setters
 */

struct __pyx_vtabstruct_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter {
  struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  struct __pyx_obj_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter *(*create)(::cpp2::TokenizerNotRegisteredException *);
  void (*_set_field_0)(struct __pyx_obj_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter *, PyObject *);
};
static struct __pyx_vtabstruct_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter *__pyx_vtabptr_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter;


/* "picard/types_fields.pxd":99
 * ctypedef void (*__TokenizerPrefixException_FieldsSetterFunc)(__TokenizerPrefixException_FieldsSetter, object) except *
 * 
 * cdef class __TokenizerPrefixException_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cTokenizerPrefixException* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __TokenizerPrefixException_FieldsSetterFunc] _setters
 */

struct __pyx_vtabstruct_6picard_12types_fields___TokenizerPrefixException_FieldsSetter {
  struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  struct __pyx_obj_6picard_12types_fields___TokenizerPrefixException_FieldsSetter *(*create)(::cpp2::TokenizerPrefixException *);
  void (*_set_field_0)(struct __pyx_obj_6picard_12types_fields___TokenizerPrefixException_FieldsSetter *, PyObject *);
};
static struct __pyx_vtabstruct_6picard_12types_fields___TokenizerPrefixException_FieldsSetter *__pyx_vtabptr_6picard_12types_fields___TokenizerPrefixException_FieldsSetter;


/* "picard/types_fields.pxd":110
 * ctypedef void (*__ModeException_FieldsSetterFunc)(__ModeException_FieldsSetter, object) except *
 * 
 * cdef class __ModeException_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cModeException* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __ModeException_FieldsSetterFunc] _setters
 */

struct __pyx_vtabstruct_6picard_12types_fields___ModeException_FieldsSetter {
  struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  struct __pyx_obj_6picard_12types_fields___ModeException_FieldsSetter *(*create)(::cpp2::ModeException *);
  void (*_set_field_0)(struct __pyx_obj_6picard_12types_fields___ModeException_FieldsSetter *, PyObject *);
};
static struct __pyx_vtabstruct_6picard_12types_fields___ModeException_FieldsSetter *__pyx_vtabptr_6picard_12types_fields___ModeException_FieldsSetter;


/* "picard/types_fields.pxd":121
 * ctypedef void (*__FeedException_FieldsSetterFunc)(__FeedException_FieldsSetter, object) except *
 * 
 * cdef class __FeedException_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cFeedException* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __FeedException_FieldsSetterFunc] _setters
 */

struct __pyx_vtabstruct_6picard_12types_fields___FeedException_FieldsSetter {
  struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  struct __pyx_obj_6picard_12types_fields___FeedException_FieldsSetter *(*create)(::cpp2::FeedException *);
  void (*_set_field_0)(struct __pyx_obj_6picard_12types_fields___FeedException_FieldsSetter *, PyObject *);
};
static struct __pyx_vtabstruct_6picard_12types_fields___FeedException_FieldsSetter *__pyx_vtabptr_6picard_12types_fields___FeedException_FieldsSetter;


/* "picard/types_fields.pxd":132
 * ctypedef void (*__FeedParseFailure_FieldsSetterFunc)(__FeedParseFailure_FieldsSetter, object) except *
 * 
 * cdef class __FeedParseFailure_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cFeedParseFailure* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __FeedParseFailure_FieldsSetterFunc] _setters
 */

struct __pyx_vtabstruct_6picard_12types_fields___FeedParseFailure_FieldsSetter {
  struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  struct __pyx_obj_6picard_12types_fields___FeedParseFailure_FieldsSetter *(*create)(::cpp2::FeedParseFailure *);
  void (*_set_field_0)(struct __pyx_obj_6picard_12types_fields___FeedParseFailure_FieldsSetter *, PyObject *);
  void (*_set_field_1)(struct __pyx_obj_6picard_12types_fields___FeedParseFailure_FieldsSetter *, PyObject *);
  void (*_set_field_2)(struct __pyx_obj_6picard_12types_fields___FeedParseFailure_FieldsSetter *, PyObject *);
};
static struct __pyx_vtabstruct_6picard_12types_fields___FeedParseFailure_FieldsSetter *__pyx_vtabptr_6picard_12types_fields___FeedParseFailure_FieldsSetter;


/* "picard/types_fields.pxd":145
 * ctypedef void (*__FeedTimeoutFailure_FieldsSetterFunc)(__FeedTimeoutFailure_FieldsSetter, object) except *
 * 
 * cdef class __FeedTimeoutFailure_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cFeedTimeoutFailure* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __FeedTimeoutFailure_FieldsSetterFunc] _setters
 */

struct __pyx_vtabstruct_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter {
  struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  struct __pyx_obj_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter *(*create)(::cpp2::FeedTimeoutFailure *);
  void (*_set_field_0)(struct __pyx_obj_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter *, PyObject *);
};
static struct __pyx_vtabstruct_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter *__pyx_vtabptr_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter;


/* "picard/types_fields.pxd":156
 * ctypedef void (*__FeedPartialSuccess_FieldsSetterFunc)(__FeedPartialSuccess_FieldsSetter, object) except *
 * 
 * cdef class __FeedPartialSuccess_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cFeedPartialSuccess* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __FeedPartialSuccess_FieldsSetterFunc] _setters
 */

struct __pyx_vtabstruct_6picard_12types_fields___FeedPartialSuccess_FieldsSetter {
  struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  struct __pyx_obj_6picard_12types_fields___FeedPartialSuccess_FieldsSetter *(*create)(::cpp2::FeedPartialSuccess *);
};
static struct __pyx_vtabstruct_6picard_12types_fields___FeedPartialSuccess_FieldsSetter *__pyx_vtabptr_6picard_12types_fields___FeedPartialSuccess_FieldsSetter;


/* "picard/types_fields.pxd":166
 * ctypedef void (*__FeedCompleteSuccess_FieldsSetterFunc)(__FeedCompleteSuccess_FieldsSetter, object) except *
 * 
 * cdef class __FeedCompleteSuccess_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cFeedCompleteSuccess* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __FeedCompleteSuccess_FieldsSetterFunc] _setters
 */

struct __pyx_vtabstruct_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter {
  struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  struct __pyx_obj_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter *(*create)(::cpp2::FeedCompleteSuccess *);
  void (*_set_field_0)(struct __pyx_obj_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter *, PyObject *);
};
static struct __pyx_vtabstruct_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter *__pyx_vtabptr_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter;


/* "picard/types_fields.pxd":177
 * ctypedef void (*__BatchFeedResult_FieldsSetterFunc)(__BatchFeedResult_FieldsSetter, object) except *
 * 
 * cdef class __BatchFeedResult_FieldsSetter(__StructFieldsSetter):             # <<<<<<<<<<<<<<
 *     cdef _picard_types.cBatchFeedResult* _struct_cpp_obj
 *     cdef cumap[__cstring_view, __BatchFeedResult_FieldsSetterFunc] _setters
 */

struct __pyx_vtabstruct_6picard_12types_fields___BatchFeedResult_FieldsSetter {
  struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter __pyx_base;
  struct __pyx_obj_6picard_12types_fields___BatchFeedResult_FieldsSetter *(*create)(::cpp2::BatchFeedResult *);
  void (*_set_field_0)(struct __pyx_obj_6picard_12types_fields___BatchFeedResult_FieldsSetter *, PyObject *);
  void (*_set_field_1)(struct __pyx_obj_6picard_12types_fields___BatchFeedResult_FieldsSetter *, PyObject *);
  void (*_set_field_2)(struct __pyx_obj_6picard_12types_fields___BatchFeedResult_FieldsSetter *, PyObject *);
};
static struct __pyx_vtabstruct_6picard_12types_fields___BatchFeedResult_FieldsSetter *__pyx_vtabptr_6picard_12types_fields___BatchFeedResult_FieldsSetter;


/* "thrift/py3/reflection.pxd":43
 * 
 * 
 * cdef class StructSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly str name
 *     cdef cvector[PyObject*] _fields
 */

struct __pyx_vtabstruct_6thrift_3py3_10reflection_StructSpec {
  PyObject *(*create)(PyObject *, enum __pyx_t_6thrift_3py3_10reflection_StructType, PyObject *);
  void (*add_field)(struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *, struct __pyx_obj_6thrift_3py3_10reflection_FieldSpec *);
};
static struct __pyx_vtabstruct_6thrift_3py3_10reflection_StructSpec *__pyx_vtabptr_6thrift_3py3_10reflection_StructSpec;


/* "thrift/py3/reflection.pxd":54
 * 
 * 
 * cdef class FieldSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly int id
 *     cdef readonly str name
 */

struct __pyx_vtabstruct_6thrift_3py3_10reflection_FieldSpec {
  PyObject *(*create)(int, PyObject *, PyObject *, enum __pyx_t_6thrift_3py3_10reflection_NumberType, enum __pyx_t_6thrift_3py3_10reflection_Qualifier, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_6thrift_3py3_10reflection_FieldSpec *__pyx_vtabptr_6thrift_3py3_10reflection_FieldSpec;


/* "thrift/py3/reflection.pxd":75
 * 
 * 
 * cdef class ListSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly object value
 *     cdef readonly object kind
 */

struct __pyx_vtabstruct_6thrift_3py3_10reflection_ListSpec {
  PyObject *(*create)(PyObject *, enum __pyx_t_6thrift_3py3_10reflection_NumberType);
};
static struct __pyx_vtabstruct_6thrift_3py3_10reflection_ListSpec *__pyx_vtabptr_6thrift_3py3_10reflection_ListSpec;


/* "thrift/py3/reflection.pxd":83
 * 
 * 
 * cdef class SetSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly object value
 *     cdef readonly object kind
 */

struct __pyx_vtabstruct_6thrift_3py3_10reflection_SetSpec {
  PyObject *(*create)(PyObject *, enum __pyx_t_6thrift_3py3_10reflection_NumberType);
};
static struct __pyx_vtabstruct_6thrift_3py3_10reflection_SetSpec *__pyx_vtabptr_6thrift_3py3_10reflection_SetSpec;


/* "thrift/py3/reflection.pxd":91
 * 
 * 
 * cdef class MapSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly object key
 *     cdef readonly object key_kind
 */

struct __pyx_vtabstruct_6thrift_3py3_10reflection_MapSpec {
  PyObject *(*create)(PyObject *, enum __pyx_t_6thrift_3py3_10reflection_NumberType, PyObject *, enum __pyx_t_6thrift_3py3_10reflection_NumberType);
};
static struct __pyx_vtabstruct_6thrift_3py3_10reflection_MapSpec *__pyx_vtabptr_6thrift_3py3_10reflection_MapSpec;


/* "thrift/py3/reflection.pxd":106
 * 
 * 
 * cdef class InterfaceSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly str name
 *     cdef cvector[PyObject*] _methods
 */

struct __pyx_vtabstruct_6thrift_3py3_10reflection_InterfaceSpec {
  PyObject *(*create)(PyObject *, PyObject *);
  void (*add_method)(struct __pyx_obj_6thrift_3py3_10reflection_InterfaceSpec *, struct __pyx_obj_6thrift_3py3_10reflection_MethodSpec *);
};
static struct __pyx_vtabstruct_6thrift_3py3_10reflection_InterfaceSpec *__pyx_vtabptr_6thrift_3py3_10reflection_InterfaceSpec;


/* "thrift/py3/reflection.pxd":116
 * 
 * 
 * cdef class MethodSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly str name
 *     cdef readonly tuple arguments
 */

struct __pyx_vtabstruct_6thrift_3py3_10reflection_MethodSpec {
  PyObject *(*create)(PyObject *, PyObject *, enum __pyx_t_6thrift_3py3_10reflection_NumberType, PyObject *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_6thrift_3py3_10reflection_MethodSpec *__pyx_vtabptr_6thrift_3py3_10reflection_MethodSpec;


/* "thrift/py3/reflection.pxd":135
 * 
 * 
 * cdef class ArgumentSpec:             # <<<<<<<<<<<<<<
 *     cdef readonly str name
 *     cdef readonly object kind
 */

struct __pyx_vtabstruct_6thrift_3py3_10reflection_ArgumentSpec {
  PyObject *(*create)(PyObject *, enum __pyx_t_6thrift_3py3_10reflection_NumberType, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_6thrift_3py3_10reflection_ArgumentSpec *__pyx_vtabptr_6thrift_3py3_10reflection_ArgumentSpec;


/* "picard/types.pyx":83
 * @__cython.final
 * @__cython.auto_pickle(False)
 * cdef class ColumnType(thrift.py3.types.CompiledEnum):             # <<<<<<<<<<<<<<
 *     cdef get_by_name(self, str name):
 *         return __ColumnType_enum_data.get_by_name(name)
 */

struct __pyx_vtabstruct_6picard_5types_ColumnType {
  struct __pyx_vtabstruct_6thrift_3py3_5types_CompiledEnum __pyx_base;
};
static struct __pyx_vtabstruct_6picard_5types_ColumnType *__pyx_vtabptr_6picard_5types_ColumnType;


/* "picard/types.pyx":125
 * @__cython.final
 * @__cython.auto_pickle(False)
 * cdef class Mode(thrift.py3.types.CompiledEnum):             # <<<<<<<<<<<<<<
 *     cdef get_by_name(self, str name):
 *         return __Mode_enum_data.get_by_name(name)
 */

struct __pyx_vtabstruct_6picard_5types_Mode {
  struct __pyx_vtabstruct_6thrift_3py3_5types_CompiledEnum __pyx_base;
};
static struct __pyx_vtabstruct_6picard_5types_Mode *__pyx_vtabptr_6picard_5types_Mode;


/* "picard/types.pyx":214
 * 
 * @__cython.auto_pickle(False)
 * cdef class SQLSchema(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     def __init__(SQLSchema self, **kwargs):
 *         self._cpp_obj = make_shared[cSQLSchema]()
 */

struct __pyx_vtabstruct_6picard_5types_SQLSchema {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Struct __pyx_base;
  PyObject *(*create)(std::shared_ptr<::cpp2::SQLSchema> );
};
static struct __pyx_vtabstruct_6picard_5types_SQLSchema *__pyx_vtabptr_6picard_5types_SQLSchema;


/* "picard/types.pyx":352
 * 
 * @__cython.auto_pickle(False)
 * cdef class RegisterSQLSchemaException(thrift.py3.exceptions.GeneratedError):             # <<<<<<<<<<<<<<
 *     def __init__(RegisterSQLSchemaException self, *args, **kwargs):
 *         self._cpp_obj = make_shared[cRegisterSQLSchemaException]()
 */

struct __pyx_vtabstruct_6picard_5types_RegisterSQLSchemaException {
  struct __pyx_vtabstruct_6thrift_3py3_10exceptions_GeneratedError __pyx_base;
  PyObject *(*create)(std::shared_ptr<::cpp2::RegisterSQLSchemaException> );
};
static struct __pyx_vtabstruct_6picard_5types_RegisterSQLSchemaException *__pyx_vtabptr_6picard_5types_RegisterSQLSchemaException;


/* "picard/types.pyx":425
 * 
 * @__cython.auto_pickle(False)
 * cdef class RegisterTokenizerException(thrift.py3.exceptions.GeneratedError):             # <<<<<<<<<<<<<<
 *     def __init__(RegisterTokenizerException self, *args, **kwargs):
 *         self._cpp_obj = make_shared[cRegisterTokenizerException]()
 */

struct __pyx_vtabstruct_6picard_5types_RegisterTokenizerException {
  struct __pyx_vtabstruct_6thrift_3py3_10exceptions_GeneratedError __pyx_base;
  PyObject *(*create)(std::shared_ptr<::cpp2::RegisterTokenizerException> );
};
static struct __pyx_vtabstruct_6picard_5types_RegisterTokenizerException *__pyx_vtabptr_6picard_5types_RegisterTokenizerException;


/* "picard/types.pyx":492
 * 
 * @__cython.auto_pickle(False)
 * cdef class TokenizerNotRegisteredException(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     def __init__(TokenizerNotRegisteredException self, **kwargs):
 *         self._cpp_obj = make_shared[cTokenizerNotRegisteredException]()
 */

struct __pyx_vtabstruct_6picard_5types_TokenizerNotRegisteredException {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Struct __pyx_base;
  PyObject *(*create)(std::shared_ptr<::cpp2::TokenizerNotRegisteredException> );
};
static struct __pyx_vtabstruct_6picard_5types_TokenizerNotRegisteredException *__pyx_vtabptr_6picard_5types_TokenizerNotRegisteredException;


/* "picard/types.pyx":580
 * 
 * @__cython.auto_pickle(False)
 * cdef class TokenizerPrefixException(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     def __init__(TokenizerPrefixException self, **kwargs):
 *         self._cpp_obj = make_shared[cTokenizerPrefixException]()
 */

struct __pyx_vtabstruct_6picard_5types_TokenizerPrefixException {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Struct __pyx_base;
  PyObject *(*create)(std::shared_ptr<::cpp2::TokenizerPrefixException> );
};
static struct __pyx_vtabstruct_6picard_5types_TokenizerPrefixException *__pyx_vtabptr_6picard_5types_TokenizerPrefixException;


/* "picard/types.pyx":668
 * 
 * @__cython.auto_pickle(False)
 * cdef class ModeException(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     def __init__(ModeException self, **kwargs):
 *         self._cpp_obj = make_shared[cModeException]()
 */

struct __pyx_vtabstruct_6picard_5types_ModeException {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Struct __pyx_base;
  PyObject *(*create)(std::shared_ptr<::cpp2::ModeException> );
};
static struct __pyx_vtabstruct_6picard_5types_ModeException *__pyx_vtabptr_6picard_5types_ModeException;


/* "picard/types.pyx":171
 * @__cython.final
 * @__cython.auto_pickle(False)
 * cdef class __FeedFatalExceptionType(thrift.py3.types.CompiledEnum):             # <<<<<<<<<<<<<<
 *     cdef get_by_name(self, str name):
 *         return __FeedFatalException_union_type_enum_data.get_by_name(name)
 */

struct __pyx_vtabstruct_6picard_5types___FeedFatalExceptionType {
  struct __pyx_vtabstruct_6thrift_3py3_5types_CompiledEnum __pyx_base;
};
static struct __pyx_vtabstruct_6picard_5types___FeedFatalExceptionType *__pyx_vtabptr_6picard_5types___FeedFatalExceptionType;


/* "picard/types.pyx":758
 * 
 * @__cython.auto_pickle(False)
 * cdef class FeedFatalException(thrift.py3.types.Union):             # <<<<<<<<<<<<<<
 *     Type = __FeedFatalExceptionType
 * 
 */

struct __pyx_vtabstruct_6picard_5types_FeedFatalException {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Union __pyx_base;
  PyObject *(*_load_cache)(struct __pyx_obj_6picard_5types_FeedFatalException *);
  std::unique_ptr<::cpp2::FeedFatalException>  (*_make_instance)(::cpp2::FeedFatalException *, struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *, struct __pyx_obj_6picard_5types_TokenizerPrefixException *, struct __pyx_obj_6picard_5types_ModeException *);
  PyObject *(*create)(std::shared_ptr<::cpp2::FeedFatalException> );
};
static struct __pyx_vtabstruct_6picard_5types_FeedFatalException *__pyx_vtabptr_6picard_5types_FeedFatalException;


/* "picard/types.pyx":907
 * 
 * @__cython.auto_pickle(False)
 * cdef class FeedException(thrift.py3.exceptions.GeneratedError):             # <<<<<<<<<<<<<<
 *     def __init__(FeedException self, *args, **kwargs):
 *         self._cpp_obj = make_shared[cFeedException]()
 */

struct __pyx_vtabstruct_6picard_5types_FeedException {
  struct __pyx_vtabstruct_6thrift_3py3_10exceptions_GeneratedError __pyx_base;
  PyObject *(*create)(std::shared_ptr<::cpp2::FeedException> );
};
static struct __pyx_vtabstruct_6picard_5types_FeedException *__pyx_vtabptr_6picard_5types_FeedException;


/* "picard/types.pyx":976
 * 
 * @__cython.auto_pickle(False)
 * cdef class FeedParseFailure(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     def __init__(FeedParseFailure self, **kwargs):
 *         self._cpp_obj = make_shared[cFeedParseFailure]()
 */

struct __pyx_vtabstruct_6picard_5types_FeedParseFailure {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Struct __pyx_base;
  PyObject *(*create)(std::shared_ptr<::cpp2::FeedParseFailure> );
};
static struct __pyx_vtabstruct_6picard_5types_FeedParseFailure *__pyx_vtabptr_6picard_5types_FeedParseFailure;


/* "picard/types.pyx":1078
 * 
 * @__cython.auto_pickle(False)
 * cdef class FeedTimeoutFailure(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     def __init__(FeedTimeoutFailure self, **kwargs):
 *         self._cpp_obj = make_shared[cFeedTimeoutFailure]()
 */

struct __pyx_vtabstruct_6picard_5types_FeedTimeoutFailure {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Struct __pyx_base;
  PyObject *(*create)(std::shared_ptr<::cpp2::FeedTimeoutFailure> );
};
static struct __pyx_vtabstruct_6picard_5types_FeedTimeoutFailure *__pyx_vtabptr_6picard_5types_FeedTimeoutFailure;


/* "picard/types.pyx":1166
 * 
 * @__cython.auto_pickle(False)
 * cdef class FeedPartialSuccess(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     def __init__(FeedPartialSuccess self, **kwargs):
 *         self._cpp_obj = make_shared[cFeedPartialSuccess]()
 */

struct __pyx_vtabstruct_6picard_5types_FeedPartialSuccess {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Struct __pyx_base;
  PyObject *(*create)(std::shared_ptr<::cpp2::FeedPartialSuccess> );
};
static struct __pyx_vtabstruct_6picard_5types_FeedPartialSuccess *__pyx_vtabptr_6picard_5types_FeedPartialSuccess;


/* "picard/types.pyx":1241
 * 
 * @__cython.auto_pickle(False)
 * cdef class FeedCompleteSuccess(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     def __init__(FeedCompleteSuccess self, **kwargs):
 *         self._cpp_obj = make_shared[cFeedCompleteSuccess]()
 */

struct __pyx_vtabstruct_6picard_5types_FeedCompleteSuccess {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Struct __pyx_base;
  PyObject *(*create)(std::shared_ptr<::cpp2::FeedCompleteSuccess> );
};
static struct __pyx_vtabstruct_6picard_5types_FeedCompleteSuccess *__pyx_vtabptr_6picard_5types_FeedCompleteSuccess;


/* "picard/types.pyx":205
 * @__cython.final
 * @__cython.auto_pickle(False)
 * cdef class __FeedResultType(thrift.py3.types.CompiledEnum):             # <<<<<<<<<<<<<<
 *     cdef get_by_name(self, str name):
 *         return __FeedResult_union_type_enum_data.get_by_name(name)
 */

struct __pyx_vtabstruct_6picard_5types___FeedResultType {
  struct __pyx_vtabstruct_6thrift_3py3_5types_CompiledEnum __pyx_base;
};
static struct __pyx_vtabstruct_6picard_5types___FeedResultType *__pyx_vtabptr_6picard_5types___FeedResultType;


/* "picard/types.pyx":1331
 * 
 * @__cython.auto_pickle(False)
 * cdef class FeedResult(thrift.py3.types.Union):             # <<<<<<<<<<<<<<
 *     Type = __FeedResultType
 * 
 */

struct __pyx_vtabstruct_6picard_5types_FeedResult {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Union __pyx_base;
  PyObject *(*_load_cache)(struct __pyx_obj_6picard_5types_FeedResult *);
  std::unique_ptr<::cpp2::FeedResult>  (*_make_instance)(::cpp2::FeedResult *, struct __pyx_obj_6picard_5types_FeedParseFailure *, struct __pyx_obj_6picard_5types_FeedTimeoutFailure *, struct __pyx_obj_6picard_5types_FeedPartialSuccess *, struct __pyx_obj_6picard_5types_FeedCompleteSuccess *);
  PyObject *(*create)(std::shared_ptr<::cpp2::FeedResult> );
};
static struct __pyx_vtabstruct_6picard_5types_FeedResult *__pyx_vtabptr_6picard_5types_FeedResult;


/* "picard/types.pyx":1498
 * 
 * @__cython.auto_pickle(False)
 * cdef class BatchFeedResult(thrift.py3.types.Struct):             # <<<<<<<<<<<<<<
 *     def __init__(BatchFeedResult self, **kwargs):
 *         self._cpp_obj = make_shared[cBatchFeedResult]()
 */

struct __pyx_vtabstruct_6picard_5types_BatchFeedResult {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Struct __pyx_base;
  PyObject *(*create)(std::shared_ptr<::cpp2::BatchFeedResult> );
};
static struct __pyx_vtabstruct_6picard_5types_BatchFeedResult *__pyx_vtabptr_6picard_5types_BatchFeedResult;


/* "picard/types.pyx":1600
 * 
 * @__cython.auto_pickle(False)
 * cdef class List__i64(thrift.py3.types.List):             # <<<<<<<<<<<<<<
 *     def __init__(self, items=None):
 *         if isinstance(items, List__i64):
 */

struct __pyx_vtabstruct_6picard_5types_List__i64 {
  struct __pyx_vtabstruct_6thrift_3py3_5types_List __pyx_base;
  PyObject *(*create)(std::shared_ptr<std::vector<int64_t> > );
  std::shared_ptr<std::vector<int64_t> >  (*_make_instance)(PyObject *);
};
static struct __pyx_vtabstruct_6picard_5types_List__i64 *__pyx_vtabptr_6picard_5types_List__i64;


/* "picard/types.pyx":1678
 * 
 * @__cython.auto_pickle(False)
 * cdef class List__List__i64(thrift.py3.types.List):             # <<<<<<<<<<<<<<
 *     def __init__(self, items=None):
 *         if isinstance(items, List__List__i64):
 */

struct __pyx_vtabstruct_6picard_5types_List__List__i64 {
  struct __pyx_vtabstruct_6thrift_3py3_5types_List __pyx_base;
  PyObject *(*create)(std::shared_ptr<std::vector<std::vector<int64_t> > > );
  std::shared_ptr<std::vector<std::vector<int64_t> > >  (*_make_instance)(PyObject *);
};
static struct __pyx_vtabstruct_6picard_5types_List__List__i64 *__pyx_vtabptr_6picard_5types_List__List__i64;


/* "picard/types.pyx":1761
 * 
 * @__cython.auto_pickle(False)
 * cdef class List__BatchFeedResult(thrift.py3.types.List):             # <<<<<<<<<<<<<<
 *     def __init__(self, items=None):
 *         if isinstance(items, List__BatchFeedResult):
 */

struct __pyx_vtabstruct_6picard_5types_List__BatchFeedResult {
  struct __pyx_vtabstruct_6thrift_3py3_5types_List __pyx_base;
  PyObject *(*create)(std::shared_ptr<std::vector<::cpp2::BatchFeedResult> > );
  std::shared_ptr<std::vector<::cpp2::BatchFeedResult> >  (*_make_instance)(PyObject *);
};
static struct __pyx_vtabstruct_6picard_5types_List__BatchFeedResult *__pyx_vtabptr_6picard_5types_List__BatchFeedResult;


/* "picard/types.pyx":1838
 * 
 * @__cython.auto_pickle(False)
 * cdef class Map__string_string(thrift.py3.types.Map):             # <<<<<<<<<<<<<<
 *     def __init__(self, items=None):
 *         if isinstance(items, Map__string_string):
 */

struct __pyx_vtabstruct_6picard_5types_Map__string_string {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Map __pyx_base;
  PyObject *(*create)(std::shared_ptr<std::map<std::string,std::string> > );
  std::shared_ptr<std::map<std::string,std::string> >  (*_make_instance)(PyObject *);
};
static struct __pyx_vtabstruct_6picard_5types_Map__string_string *__pyx_vtabptr_6picard_5types_Map__string_string;


/* "picard/types.pyx":1933
 * 
 * @__cython.auto_pickle(False)
 * cdef class Map__string_ColumnType(thrift.py3.types.Map):             # <<<<<<<<<<<<<<
 *     def __init__(self, items=None):
 *         if isinstance(items, Map__string_ColumnType):
 */

struct __pyx_vtabstruct_6picard_5types_Map__string_ColumnType {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Map __pyx_base;
  PyObject *(*create)(std::shared_ptr<std::map<std::string,::cpp2::ColumnType> > );
  std::shared_ptr<std::map<std::string,::cpp2::ColumnType> >  (*_make_instance)(PyObject *);
};
static struct __pyx_vtabstruct_6picard_5types_Map__string_ColumnType *__pyx_vtabptr_6picard_5types_Map__string_ColumnType;


/* "picard/types.pyx":2028
 * 
 * @__cython.auto_pickle(False)
 * cdef class List__string(thrift.py3.types.List):             # <<<<<<<<<<<<<<
 *     def __init__(self, items=None):
 *         if isinstance(items, List__string):
 */

struct __pyx_vtabstruct_6picard_5types_List__string {
  struct __pyx_vtabstruct_6thrift_3py3_5types_List __pyx_base;
  PyObject *(*create)(std::shared_ptr<std::vector<std::string> > );
  std::shared_ptr<std::vector<std::string> >  (*_make_instance)(PyObject *);
};
static struct __pyx_vtabstruct_6picard_5types_List__string *__pyx_vtabptr_6picard_5types_List__string;


/* "picard/types.pyx":2105
 * 
 * @__cython.auto_pickle(False)
 * cdef class Map__string_List__string(thrift.py3.types.Map):             # <<<<<<<<<<<<<<
 *     def __init__(self, items=None):
 *         if isinstance(items, Map__string_List__string):
 */

struct __pyx_vtabstruct_6picard_5types_Map__string_List__string {
  struct __pyx_vtabstruct_6thrift_3py3_5types_Map __pyx_base;
  PyObject *(*create)(std::shared_ptr<std::map<std::string,std::vector<std::string> > > );
  std::shared_ptr<std::map<std::string,std::vector<std::string> > >  (*_make_instance)(PyObject *);
};
static struct __pyx_vtabstruct_6picard_5types_Map__string_List__string *__pyx_vtabptr_6picard_5types_Map__string_List__string;


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":965
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if CYTHON_FAST_PYCALL
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif // CYTHON_FAST_PYCALL
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* unicode_tailmatch.proto */
static int __Pyx_PyUnicode_Tailmatch(
    PyObject* s, PyObject* substr, Py_ssize_t start, Py_ssize_t end, int direction);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_bytes(
         PyObject* string, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        PyBytes_AS_STRING(string), PyBytes_GET_SIZE(string),
        start, stop, encoding, errors, decode_func);
}

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_str(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_str(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* DivInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* DivInt[long].proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyObject *dict);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* FromPyCTupleUtility.proto */
static __pyx_ctuple_int__and_int__and_int __pyx_convert__from_py___pyx_ctuple_int__and_int__and_int(PyObject *);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* VoidPtrImport.proto */
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static PyObject *__pyx_f_6picard_5types_10ColumnType_get_by_name(CYTHON_UNUSED struct __pyx_obj_6picard_5types_ColumnType *__pyx_v_self, PyObject *__pyx_v_name); /* proto*/
static PyObject *__pyx_f_6picard_5types_4Mode_get_by_name(CYTHON_UNUSED struct __pyx_obj_6picard_5types_Mode *__pyx_v_self, PyObject *__pyx_v_name); /* proto*/
static PyObject *__pyx_f_6picard_5types_24__FeedFatalExceptionType_get_by_name(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedFatalExceptionType *__pyx_v_self, PyObject *__pyx_v_name); /* proto*/
static PyObject *__pyx_f_6picard_5types_16__FeedResultType_get_by_name(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedResultType *__pyx_v_self, PyObject *__pyx_v_name); /* proto*/
static void __pyx_f_6picard_5types_9SQLSchema__fbthrift_set_field(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_f_6picard_5types_9SQLSchema__fbthrift_isset(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6picard_5types_9SQLSchema_create(std::shared_ptr<::cpp2::SQLSchema>  __pyx_v_cpp_obj); /* proto*/
static std::string_view __pyx_f_6picard_5types_9SQLSchema__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self, size_t __pyx_v_idx); /* proto*/
static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_9SQLSchema__serialize(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static uint32_t __pyx_f_6picard_5types_9SQLSchema__deserialize(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static void __pyx_f_6picard_5types_26RegisterSQLSchemaException__fbthrift_set_field(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_f_6picard_5types_26RegisterSQLSchemaException__fbthrift_isset(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6picard_5types_26RegisterSQLSchemaException_create(std::shared_ptr<::cpp2::RegisterSQLSchemaException>  __pyx_v_cpp_obj); /* proto*/
static std::string_view __pyx_f_6picard_5types_26RegisterSQLSchemaException__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self, size_t __pyx_v_idx); /* proto*/
static void __pyx_f_6picard_5types_26RegisterTokenizerException__fbthrift_set_field(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_f_6picard_5types_26RegisterTokenizerException__fbthrift_isset(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6picard_5types_26RegisterTokenizerException_create(std::shared_ptr<::cpp2::RegisterTokenizerException>  __pyx_v_cpp_obj); /* proto*/
static std::string_view __pyx_f_6picard_5types_26RegisterTokenizerException__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self, size_t __pyx_v_idx); /* proto*/
static void __pyx_f_6picard_5types_31TokenizerNotRegisteredException__fbthrift_set_field(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_f_6picard_5types_31TokenizerNotRegisteredException__fbthrift_isset(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6picard_5types_31TokenizerNotRegisteredException_create(std::shared_ptr<::cpp2::TokenizerNotRegisteredException>  __pyx_v_cpp_obj); /* proto*/
static std::string_view __pyx_f_6picard_5types_31TokenizerNotRegisteredException__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self, size_t __pyx_v_idx); /* proto*/
static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_31TokenizerNotRegisteredException__serialize(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static uint32_t __pyx_f_6picard_5types_31TokenizerNotRegisteredException__deserialize(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static void __pyx_f_6picard_5types_24TokenizerPrefixException__fbthrift_set_field(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_f_6picard_5types_24TokenizerPrefixException__fbthrift_isset(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6picard_5types_24TokenizerPrefixException_create(std::shared_ptr<::cpp2::TokenizerPrefixException>  __pyx_v_cpp_obj); /* proto*/
static std::string_view __pyx_f_6picard_5types_24TokenizerPrefixException__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self, size_t __pyx_v_idx); /* proto*/
static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_24TokenizerPrefixException__serialize(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static uint32_t __pyx_f_6picard_5types_24TokenizerPrefixException__deserialize(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static void __pyx_f_6picard_5types_13ModeException__fbthrift_set_field(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_f_6picard_5types_13ModeException__fbthrift_isset(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6picard_5types_13ModeException_create(std::shared_ptr<::cpp2::ModeException>  __pyx_v_cpp_obj); /* proto*/
static std::string_view __pyx_f_6picard_5types_13ModeException__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self, size_t __pyx_v_idx); /* proto*/
static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_13ModeException__serialize(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static uint32_t __pyx_f_6picard_5types_13ModeException__deserialize(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static std::unique_ptr<::cpp2::FeedFatalException>  __pyx_f_6picard_5types_18FeedFatalException__make_instance(CYTHON_UNUSED ::cpp2::FeedFatalException *__pyx_v_base_instance, struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_tokenizerNotRegisteredException, struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_tokenizerPrefixException, struct __pyx_obj_6picard_5types_ModeException *__pyx_v_modeException); /* proto*/
static PyObject *__pyx_f_6picard_5types_18FeedFatalException_create(std::shared_ptr<::cpp2::FeedFatalException>  __pyx_v_cpp_obj); /* proto*/
static PyObject *__pyx_f_6picard_5types_18FeedFatalException__load_cache(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self); /* proto*/
static std::string_view __pyx_f_6picard_5types_18FeedFatalException__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self, size_t __pyx_v_idx); /* proto*/
static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_18FeedFatalException__serialize(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static uint32_t __pyx_f_6picard_5types_18FeedFatalException__deserialize(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static void __pyx_f_6picard_5types_13FeedException__fbthrift_set_field(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_f_6picard_5types_13FeedException__fbthrift_isset(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6picard_5types_13FeedException_create(std::shared_ptr<::cpp2::FeedException>  __pyx_v_cpp_obj); /* proto*/
static std::string_view __pyx_f_6picard_5types_13FeedException__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self, size_t __pyx_v_idx); /* proto*/
static void __pyx_f_6picard_5types_16FeedParseFailure__fbthrift_set_field(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_f_6picard_5types_16FeedParseFailure__fbthrift_isset(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6picard_5types_16FeedParseFailure_create(std::shared_ptr<::cpp2::FeedParseFailure>  __pyx_v_cpp_obj); /* proto*/
static std::string_view __pyx_f_6picard_5types_16FeedParseFailure__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self, size_t __pyx_v_idx); /* proto*/
static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_16FeedParseFailure__serialize(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static uint32_t __pyx_f_6picard_5types_16FeedParseFailure__deserialize(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static void __pyx_f_6picard_5types_18FeedTimeoutFailure__fbthrift_set_field(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_f_6picard_5types_18FeedTimeoutFailure__fbthrift_isset(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6picard_5types_18FeedTimeoutFailure_create(std::shared_ptr<::cpp2::FeedTimeoutFailure>  __pyx_v_cpp_obj); /* proto*/
static std::string_view __pyx_f_6picard_5types_18FeedTimeoutFailure__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self, size_t __pyx_v_idx); /* proto*/
static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_18FeedTimeoutFailure__serialize(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static uint32_t __pyx_f_6picard_5types_18FeedTimeoutFailure__deserialize(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static void __pyx_f_6picard_5types_18FeedPartialSuccess__fbthrift_set_field(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_f_6picard_5types_18FeedPartialSuccess__fbthrift_isset(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6picard_5types_18FeedPartialSuccess_create(std::shared_ptr<::cpp2::FeedPartialSuccess>  __pyx_v_cpp_obj); /* proto*/
static std::string_view __pyx_f_6picard_5types_18FeedPartialSuccess__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self, size_t __pyx_v_idx); /* proto*/
static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_18FeedPartialSuccess__serialize(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static uint32_t __pyx_f_6picard_5types_18FeedPartialSuccess__deserialize(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static void __pyx_f_6picard_5types_19FeedCompleteSuccess__fbthrift_set_field(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_f_6picard_5types_19FeedCompleteSuccess__fbthrift_isset(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6picard_5types_19FeedCompleteSuccess_create(std::shared_ptr<::cpp2::FeedCompleteSuccess>  __pyx_v_cpp_obj); /* proto*/
static std::string_view __pyx_f_6picard_5types_19FeedCompleteSuccess__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self, size_t __pyx_v_idx); /* proto*/
static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_19FeedCompleteSuccess__serialize(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static uint32_t __pyx_f_6picard_5types_19FeedCompleteSuccess__deserialize(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static std::unique_ptr<::cpp2::FeedResult>  __pyx_f_6picard_5types_10FeedResult__make_instance(CYTHON_UNUSED ::cpp2::FeedResult *__pyx_v_base_instance, struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_feedParseFailure, struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_feedTimeoutFailure, struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_feedPartialSuccess, struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_feedCompleteSuccess); /* proto*/
static PyObject *__pyx_f_6picard_5types_10FeedResult_create(std::shared_ptr<::cpp2::FeedResult>  __pyx_v_cpp_obj); /* proto*/
static PyObject *__pyx_f_6picard_5types_10FeedResult__load_cache(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self); /* proto*/
static std::string_view __pyx_f_6picard_5types_10FeedResult__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self, size_t __pyx_v_idx); /* proto*/
static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_10FeedResult__serialize(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static uint32_t __pyx_f_6picard_5types_10FeedResult__deserialize(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static void __pyx_f_6picard_5types_15BatchFeedResult__fbthrift_set_field(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_f_6picard_5types_15BatchFeedResult__fbthrift_isset(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_6picard_5types_15BatchFeedResult_create(std::shared_ptr<::cpp2::BatchFeedResult>  __pyx_v_cpp_obj); /* proto*/
static std::string_view __pyx_f_6picard_5types_15BatchFeedResult__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self, size_t __pyx_v_idx); /* proto*/
static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_15BatchFeedResult__serialize(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static uint32_t __pyx_f_6picard_5types_15BatchFeedResult__deserialize(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto); /* proto*/
static PyObject *__pyx_f_6picard_5types_9List__i64_create(std::shared_ptr<std::vector<int64_t> >  __pyx_v_c_items); /* proto*/
static std::shared_ptr<std::vector<int64_t> >  __pyx_f_6picard_5types_9List__i64__make_instance(PyObject *__pyx_v_items); /* proto*/
static PyObject *__pyx_f_6picard_5types_9List__i64__get_slice(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self, PyObject *__pyx_v_index_obj); /* proto*/
static PyObject *__pyx_f_6picard_5types_9List__i64__get_single_item(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self, size_t __pyx_v_index); /* proto*/
static PyObject *__pyx_f_6picard_5types_9List__i64__check_item_type(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self, PyObject *__pyx_v_item); /* proto*/
static PyObject *__pyx_f_6picard_5types_15List__List__i64_create(std::shared_ptr<std::vector<std::vector<int64_t> > >  __pyx_v_c_items); /* proto*/
static std::shared_ptr<std::vector<std::vector<int64_t> > >  __pyx_f_6picard_5types_15List__List__i64__make_instance(PyObject *__pyx_v_items); /* proto*/
static PyObject *__pyx_f_6picard_5types_15List__List__i64__get_slice(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self, PyObject *__pyx_v_index_obj); /* proto*/
static PyObject *__pyx_f_6picard_5types_15List__List__i64__get_single_item(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self, size_t __pyx_v_index); /* proto*/
static PyObject *__pyx_f_6picard_5types_15List__List__i64__check_item_type(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self, PyObject *__pyx_v_item); /* proto*/
static PyObject *__pyx_f_6picard_5types_21List__BatchFeedResult_create(std::shared_ptr<std::vector<::cpp2::BatchFeedResult> >  __pyx_v_c_items); /* proto*/
static std::shared_ptr<std::vector<::cpp2::BatchFeedResult> >  __pyx_f_6picard_5types_21List__BatchFeedResult__make_instance(PyObject *__pyx_v_items); /* proto*/
static PyObject *__pyx_f_6picard_5types_21List__BatchFeedResult__get_slice(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_index_obj); /* proto*/
static PyObject *__pyx_f_6picard_5types_21List__BatchFeedResult__get_single_item(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self, size_t __pyx_v_index); /* proto*/
static PyObject *__pyx_f_6picard_5types_21List__BatchFeedResult__check_item_type(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_item); /* proto*/
static PyObject *__pyx_f_6picard_5types_18Map__string_string_create(std::shared_ptr<std::map<std::string,std::string> >  __pyx_v_c_items); /* proto*/
static std::shared_ptr<std::map<std::string,std::string> >  __pyx_f_6picard_5types_18Map__string_string__make_instance(PyObject *__pyx_v_items); /* proto*/
static PyObject *__pyx_f_6picard_5types_18Map__string_string__check_key_type(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self, PyObject *__pyx_v_key); /* proto*/
static PyObject *__pyx_f_6picard_5types_22Map__string_ColumnType_create(std::shared_ptr<std::map<std::string,::cpp2::ColumnType> >  __pyx_v_c_items); /* proto*/
static std::shared_ptr<std::map<std::string,::cpp2::ColumnType> >  __pyx_f_6picard_5types_22Map__string_ColumnType__make_instance(PyObject *__pyx_v_items); /* proto*/
static PyObject *__pyx_f_6picard_5types_22Map__string_ColumnType__check_key_type(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self, PyObject *__pyx_v_key); /* proto*/
static PyObject *__pyx_f_6picard_5types_12List__string_create(std::shared_ptr<std::vector<std::string> >  __pyx_v_c_items); /* proto*/
static std::shared_ptr<std::vector<std::string> >  __pyx_f_6picard_5types_12List__string__make_instance(PyObject *__pyx_v_items); /* proto*/
static PyObject *__pyx_f_6picard_5types_12List__string__get_slice(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self, PyObject *__pyx_v_index_obj); /* proto*/
static PyObject *__pyx_f_6picard_5types_12List__string__get_single_item(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self, size_t __pyx_v_index); /* proto*/
static PyObject *__pyx_f_6picard_5types_12List__string__check_item_type(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self, PyObject *__pyx_v_item); /* proto*/
static PyObject *__pyx_f_6picard_5types_24Map__string_List__string_create(std::shared_ptr<std::map<std::string,std::vector<std::string> > >  __pyx_v_c_items); /* proto*/
static std::shared_ptr<std::map<std::string,std::vector<std::string> > >  __pyx_f_6picard_5types_24Map__string_List__string__make_instance(PyObject *__pyx_v_items); /* proto*/
static PyObject *__pyx_f_6picard_5types_24Map__string_List__string__check_key_type(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self, PyObject *__pyx_v_key); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'cpython.version' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'libcpp.memory' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.set' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'cython.view' */

/* Module declarations from 'folly.iobuf' */
static PyTypeObject *__pyx_ptype_5folly_5iobuf_IOBuf = 0;
static struct __pyx_obj_5folly_5iobuf_IOBuf *(*__pyx_f_5folly_5iobuf_from_unique_ptr)(std::unique_ptr<folly::IOBuf> ); /*proto*/

/* Module declarations from 'folly' */

/* Module declarations from 'thrift.py3.std_libcpp' */
static CYTHON_INLINE PyObject *__pyx_f_6thrift_3py3_10std_libcpp_sv_to_str(std::string_view); /*proto*/

/* Module declarations from 'thrift.py3.common' */
static PyTypeObject *__pyx_ptype_6thrift_3py3_6common_Headers = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_6common_RpcOptions = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_6common_ReadHeaders = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_6common_WriteHeaders = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_6common_MetadataBox = 0;

/* Module declarations from 'builtins' */

/* Module declarations from 'thrift.py3.exceptions' */
static PyTypeObject *__pyx_ptype_6thrift_3py3_10exceptions_Exception = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_10exceptions_Error = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_10exceptions_LibraryError = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_10exceptions_ProtocolError = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_10exceptions_ApplicationError = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_10exceptions_TransportError = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError = 0;

/* Module declarations from 'folly.range' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'thrift.py3.types' */
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types_EnumData = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types_EnumFlagsData = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types_UnionTypeEnumData = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types_EnumMeta = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types___NotSet = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types_Struct = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types_Union = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types_Container = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types_List = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types_Set = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types_Map = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types_CompiledEnum = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types_Flag = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types_BadEnum = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_5types_StructFieldsSetter = 0;
static struct __pyx_obj_6thrift_3py3_5types___NotSet **__pyx_vp_6thrift_3py3_5types_NOTSET = 0;
#define __pyx_v_6thrift_3py3_5types_NOTSET (*__pyx_vp_6thrift_3py3_5types_NOTSET)
static PyObject *(*__pyx_f_6thrift_3py3_5types_translate_cpp_enum_to_python)(PyObject *, int); /*proto*/
static CYTHON_INLINE std::string __pyx_f_6thrift_3py3_5types_bytes_to_string(PyObject *); /*proto*/

/* Module declarations from 'thrift.py3.serializer' */

/* Module declarations from 'thrift.py3' */

/* Module declarations from 'thrift' */

/* Module declarations from 'folly.optional' */

/* Module declarations from 'libcpp.unordered_map' */

/* Module declarations from 'picard.types_fields' */
static PyTypeObject *__pyx_ptype_6picard_12types_fields___SQLSchema_FieldsSetter = 0;
static PyTypeObject *__pyx_ptype_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter = 0;
static PyTypeObject *__pyx_ptype_6picard_12types_fields___RegisterTokenizerException_FieldsSetter = 0;
static PyTypeObject *__pyx_ptype_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter = 0;
static PyTypeObject *__pyx_ptype_6picard_12types_fields___TokenizerPrefixException_FieldsSetter = 0;
static PyTypeObject *__pyx_ptype_6picard_12types_fields___ModeException_FieldsSetter = 0;
static PyTypeObject *__pyx_ptype_6picard_12types_fields___FeedException_FieldsSetter = 0;
static PyTypeObject *__pyx_ptype_6picard_12types_fields___FeedParseFailure_FieldsSetter = 0;
static PyTypeObject *__pyx_ptype_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter = 0;
static PyTypeObject *__pyx_ptype_6picard_12types_fields___FeedPartialSuccess_FieldsSetter = 0;
static PyTypeObject *__pyx_ptype_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter = 0;
static PyTypeObject *__pyx_ptype_6picard_12types_fields___BatchFeedResult_FieldsSetter = 0;

/* Module declarations from 'cython' */

/* Module declarations from 'libcpp.iterator' */

/* Module declarations from 'folly.memory' */

/* Module declarations from 'thrift.py3.reflection' */
static PyTypeObject *__pyx_ptype_6thrift_3py3_10reflection_StructSpec = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_10reflection_FieldSpec = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_10reflection_ListSpec = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_10reflection_SetSpec = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_10reflection_MapSpec = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_10reflection_InterfaceSpec = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_10reflection_MethodSpec = 0;
static PyTypeObject *__pyx_ptype_6thrift_3py3_10reflection_ArgumentSpec = 0;

/* Module declarations from 'picard.types_reflection' */
static struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__SQLSchema)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__RegisterSQLSchemaException)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__RegisterTokenizerException)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__TokenizerNotRegisteredException)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__TokenizerPrefixException)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__ModeException)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__FeedFatalException)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__FeedException)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__FeedParseFailure)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__FeedTimeoutFailure)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__FeedPartialSuccess)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__FeedCompleteSuccess)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__FeedResult)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__BatchFeedResult)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_ListSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__List__i64)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_ListSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__List__List__i64)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_ListSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__List__BatchFeedResult)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_MapSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__Map__string_string)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_MapSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__Map__string_ColumnType)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_ListSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__List__string)(void); /*proto*/
static struct __pyx_obj_6thrift_3py3_10reflection_MapSpec *(*__pyx_f_6picard_16types_reflection_get_reflection__Map__string_List__string)(void); /*proto*/

/* Module declarations from 'picard.types' */
static PyTypeObject *__pyx_ptype_6picard_5types_ColumnType = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_Mode = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_SQLSchema = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_RegisterSQLSchemaException = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_RegisterTokenizerException = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_TokenizerNotRegisteredException = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_TokenizerPrefixException = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_ModeException = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___FeedFatalExceptionType = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_FeedFatalException = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_FeedException = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_FeedParseFailure = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_FeedTimeoutFailure = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_FeedPartialSuccess = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_FeedCompleteSuccess = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___FeedResultType = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_FeedResult = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_BatchFeedResult = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_List__i64 = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_List__List__i64 = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_List__BatchFeedResult = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_Map__string_string = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_Map__string_ColumnType = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_List__string = 0;
static PyTypeObject *__pyx_ptype_6picard_5types_Map__string_List__string = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___ColumnTypeMeta = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___ModeMeta = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___FeedFatalException_Union_TypeMeta = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___FeedResult_Union_TypeMeta = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct__create = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct_2_create = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct_4_create = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct_5_genexpr = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct_6___iter__ = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct_7_values = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct_8_items = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct_9___iter__ = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct_10_values = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct_11_items = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct_12___iter__ = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct_13_values = 0;
static PyTypeObject *__pyx_ptype_6picard_5types___pyx_scope_struct_14_items = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static struct __pyx_obj_6thrift_3py3_5types_EnumData *__pyx_v_6picard_5types___ColumnType_enum_data = 0;
static struct __pyx_obj_6thrift_3py3_5types_EnumData *__pyx_v_6picard_5types___Mode_enum_data = 0;
static struct __pyx_obj_6thrift_3py3_5types_UnionTypeEnumData *__pyx_v_6picard_5types___FeedFatalException_union_type_enum_data = 0;
static struct __pyx_obj_6thrift_3py3_5types_UnionTypeEnumData *__pyx_v_6picard_5types___FeedResult_union_type_enum_data = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "picard.types"
extern int __pyx_module_is_main_picard__types;
int __pyx_module_is_main_picard__types = 0;

/* Implementation of 'picard.types' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
static const char __pyx_k_[] = "__";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_Set[] = "Set";
static const char __pyx_k__23[] = "*";
static const char __pyx_k_mro[] = "mro";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_py3[] = "py3";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_DBId[] = "DBId";
static const char __pyx_k_Mode[] = "Mode";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_Type[] = "Type";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_dbId[] = "dbId";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_hash[] = "__hash__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_item[] = "item";
static const char __pyx_k_iter[] = "__iter__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_meta[] = "meta";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_IsSet[] = "_IsSet";
static const char __pyx_k_Token[] = "Token";
static const char __pyx_k_UTF_8[] = "UTF-8";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_input[] = "input";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_types[] = "types";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_thrift[] = "thrift";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_BatchId[] = "BatchId";
static const char __pyx_k_Mapping[] = "Mapping";
static const char __pyx_k_TableId[] = "TableId";
static const char __pyx_k_batchId[] = "batchId";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_indices[] = "indices";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_message[] = "message";
static const char __pyx_k_weakref[] = "weakref";
static const char __pyx_k_ColumnId[] = "ColumnId";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_InputIds[] = "InputIds";
static const char __pyx_k_Iterable[] = "Iterable";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_Sequence[] = "Sequence";
static const char __pyx_k_builtins[] = "_builtins";
static const char __pyx_k_contexts[] = "contexts";
static const char __pyx_k_fbthrift[] = "_fbthrift_";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_leftover[] = "leftover";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_register[] = "register";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_topToken[] = "topToken";
static const char __pyx_k_Exception[] = "Exception";
static const char __pyx_k_List__i64[] = "List__i64";
static const char __pyx_k_SQLSchema[] = "SQLSchema";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_fromValue[] = "fromValue";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_weakref_2[] = "__weakref";
static const char __pyx_k_ColumnType[] = "ColumnType";
static const char __pyx_k_FeedResult[] = "FeedResult";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_builtins_2[] = "builtins";
static const char __pyx_k_feedResult[] = "feedResult";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_tableNames[] = "tableNames";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_columnNames[] = "columnNames";
static const char __pyx_k_columnTypes[] = "columnTypes";
static const char __pyx_k_description[] = "description";
static const char __pyx_k_folly_iobuf[] = "folly.iobuf";
static const char __pyx_k_foreignKeys[] = "foreignKeys";
static const char __pyx_k_picard_Mode[] = "picard.Mode";
static const char __pyx_k_primaryKeys[] = "primaryKeys";
static const char __pyx_k_List__string[] = "List__string";
static const char __pyx_k_get_metadata[] = "__get_metadata__";
static const char __pyx_k_getattribute[] = "__getattribute__";
static const char __pyx_k_picard_types[] = "picard.types";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_FeedException[] = "FeedException";
static const char __pyx_k_ModeException[] = "ModeException";
static const char __pyx_k_columnToTable[] = "columnToTable";
static const char __pyx_k_get_all_names[] = "get_all_names";
static const char __pyx_k_modeException[] = "modeException";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_FeedResultType[] = "__FeedResultType";
static const char __pyx_k_fbthrift_iobuf[] = "_fbthrift_iobuf";
static const char __pyx_k_get_reflection[] = "__get_reflection__";
static const char __pyx_k_is_not_in_list[] = " is not in list";
static const char __pyx_k_tableToColumns[] = "tableToColumns";
static const char __pyx_k_BatchFeedResult[] = "BatchFeedResult";
static const char __pyx_k_List__List__i64[] = "List__List__i64";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_collections_abc[] = "collections.abc";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_get_thrift_name[] = "__get_thrift_name__";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_FeedParseFailure[] = "FeedParseFailure";
static const char __pyx_k_feedParseFailure[] = "feedParseFailure";
static const char __pyx_k_picard_SQLSchema[] = "picard.SQLSchema";
static const char __pyx_k_picard_types_pyx[] = "picard/types.pyx";
static const char __pyx_k_thrift_py3_types[] = "thrift.py3.types";
static const char __pyx_k_not_modeException[] = ", not modeException";
static const char __pyx_k_picard_ColumnType[] = "picard.ColumnType";
static const char __pyx_k_picard_FeedResult[] = "picard.FeedResult";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_FeedFatalException[] = "FeedFatalException";
static const char __pyx_k_FeedPartialSuccess[] = "FeedPartialSuccess";
static const char __pyx_k_FeedTimeoutFailure[] = "FeedTimeoutFailure";
static const char __pyx_k_Map__string_string[] = "Map__string_string";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_feedFatalException[] = "feedFatalException";
static const char __pyx_k_feedPartialSuccess[] = "feedPartialSuccess";
static const char __pyx_k_feedTimeoutFailure[] = "feedTimeoutFailure";
static const char __pyx_k_is_not_of_type_int[] = " is not of type int";
static const char __pyx_k_is_not_of_type_str[] = " is not of type str";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_FeedCompleteSuccess[] = "FeedCompleteSuccess";
static const char __pyx_k_feedCompleteSuccess[] = "feedCompleteSuccess";
static const char __pyx_k_not_feedParseFailure[] = ", not feedParseFailure";
static const char __pyx_k_picard_FeedException[] = "picard.FeedException";
static const char __pyx_k_picard_ModeException[] = "picard.ModeException";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_List__BatchFeedResult[] = "List__BatchFeedResult";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_FeedFatalExceptionType[] = "__FeedFatalExceptionType";
static const char __pyx_k_Map__string_ColumnType[] = "Map__string_ColumnType";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_not_feedPartialSuccess[] = ", not feedPartialSuccess";
static const char __pyx_k_not_feedTimeoutFailure[] = ", not feedTimeoutFailure";
static const char __pyx_k_picard_BatchFeedResult[] = "picard.BatchFeedResult";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_not_feedCompleteSuccess[] = ", not feedCompleteSuccess";
static const char __pyx_k_picard_FeedParseFailure[] = "picard.FeedParseFailure";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_Map__string_List__string[] = "Map__string_List__string";
static const char __pyx_k_Map__string_string_items[] = "Map__string_string.items";
static const char __pyx_k_TokenizerPrefixException[] = "TokenizerPrefixException";
static const char __pyx_k_tokenizerPrefixException[] = "tokenizerPrefixException";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_Map__string_string___iter[] = "Map__string_string.__iter__";
static const char __pyx_k_Map__string_string_values[] = "Map__string_string.values";
static const char __pyx_k_is_not_of_type_ColumnType[] = " is not of type ColumnType";
static const char __pyx_k_picard_FeedFatalException[] = "picard.FeedFatalException";
static const char __pyx_k_picard_FeedPartialSuccess[] = "picard.FeedPartialSuccess";
static const char __pyx_k_picard_FeedTimeoutFailure[] = "picard.FeedTimeoutFailure";
static const char __pyx_k_RegisterSQLSchemaException[] = "RegisterSQLSchemaException";
static const char __pyx_k_RegisterTokenizerException[] = "RegisterTokenizerException";
static const char __pyx_k_picard_FeedCompleteSuccess[] = "picard.FeedCompleteSuccess";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_Map__string_ColumnType_items[] = "Map__string_ColumnType.items";
static const char __pyx_k_not_tokenizerPrefixException[] = ", not tokenizerPrefixException";
static const char __pyx_k_Map__string_ColumnType___iter[] = "Map__string_ColumnType.__iter__";
static const char __pyx_k_Map__string_ColumnType_values[] = "Map__string_ColumnType.values";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_Map__string_List__string_items[] = "Map__string_List__string.items";
static const char __pyx_k_Union_contains_a_value_of_type[] = "Union contains a value of type ";
static const char __pyx_k_is_not_of_type_BatchFeedResult[] = " is not of type 'BatchFeedResult'";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_Map__string_List__string___iter[] = "Map__string_List__string.__iter__";
static const char __pyx_k_Map__string_List__string_values[] = "Map__string_List__string.values";
static const char __pyx_k_None_is_not_of_the_type__typing[] = "None is not of the type _typing.Sequence[int]";
static const char __pyx_k_TokenizerNotRegisteredException[] = "TokenizerNotRegisteredException";
static const char __pyx_k_not_tokenizerNotRegisteredExcep[] = ", not tokenizerNotRegisteredException";
static const char __pyx_k_picard_TokenizerPrefixException[] = "picard.TokenizerPrefixException";
static const char __pyx_k_tokenizerNotRegisteredException[] = "tokenizerNotRegisteredException";
static const char __pyx_k_At_most_one_field_may_be_set_whe[] = "At most one field may be set when initializing a union";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_FeedException_create_locals_gene[] = "FeedException.create.<locals>.genexpr";
static const char __pyx_k_Incompatible_checksums_s_vs_0xb0[] = "Incompatible checksums (%s vs 0xb068931 = (name))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_None_is_not_of_type__typing_Sequ[] = "None is not of type _typing.Sequence[str]";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_RegisterSQLSchemaException_creat[] = "RegisterSQLSchemaException.create.<locals>.genexpr";
static const char __pyx_k_RegisterTokenizerException_creat[] = "RegisterTokenizerException.create.<locals>.genexpr";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_Unable_to_derive_correct_union_f[] = "Unable to derive correct union field for value: ";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_picard_RegisterSQLSchemaExceptio[] = "picard.RegisterSQLSchemaException";
static const char __pyx_k_picard_RegisterTokenizerExceptio[] = "picard.RegisterTokenizerException";
static const char __pyx_k_picard_TokenizerNotRegisteredExc[] = "picard.TokenizerNotRegisteredException";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static PyObject *__pyx_n_u_;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_kp_u_At_most_one_field_may_be_set_whe;
static PyObject *__pyx_n_s_BatchFeedResult;
static PyObject *__pyx_n_u_BatchFeedResult;
static PyObject *__pyx_n_s_BatchId;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_ColumnId;
static PyObject *__pyx_n_s_ColumnType;
static PyObject *__pyx_n_s_DBId;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_Exception;
static PyObject *__pyx_n_s_FeedCompleteSuccess;
static PyObject *__pyx_n_u_FeedCompleteSuccess;
static PyObject *__pyx_n_s_FeedException;
static PyObject *__pyx_n_u_FeedException;
static PyObject *__pyx_n_s_FeedException_create_locals_gene;
static PyObject *__pyx_n_s_FeedFatalException;
static PyObject *__pyx_n_s_FeedFatalExceptionType;
static PyObject *__pyx_n_s_FeedParseFailure;
static PyObject *__pyx_n_u_FeedParseFailure;
static PyObject *__pyx_n_s_FeedPartialSuccess;
static PyObject *__pyx_n_u_FeedPartialSuccess;
static PyObject *__pyx_n_s_FeedResult;
static PyObject *__pyx_n_s_FeedResultType;
static PyObject *__pyx_n_s_FeedTimeoutFailure;
static PyObject *__pyx_n_u_FeedTimeoutFailure;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xb0;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_n_s_InputIds;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_n_s_IsSet;
static PyObject *__pyx_n_s_Iterable;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_List__BatchFeedResult;
static PyObject *__pyx_n_s_List__List__i64;
static PyObject *__pyx_n_s_List__i64;
static PyObject *__pyx_n_s_List__string;
static PyObject *__pyx_n_s_Map__string_ColumnType;
static PyObject *__pyx_n_s_Map__string_ColumnType___iter;
static PyObject *__pyx_n_s_Map__string_ColumnType_items;
static PyObject *__pyx_n_s_Map__string_ColumnType_values;
static PyObject *__pyx_n_s_Map__string_List__string;
static PyObject *__pyx_n_s_Map__string_List__string___iter;
static PyObject *__pyx_n_s_Map__string_List__string_items;
static PyObject *__pyx_n_s_Map__string_List__string_values;
static PyObject *__pyx_n_s_Map__string_string;
static PyObject *__pyx_n_s_Map__string_string___iter;
static PyObject *__pyx_n_s_Map__string_string_items;
static PyObject *__pyx_n_s_Map__string_string_values;
static PyObject *__pyx_n_s_Mapping;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_Mode;
static PyObject *__pyx_n_s_ModeException;
static PyObject *__pyx_n_u_ModeException;
static PyObject *__pyx_kp_u_None;
static PyObject *__pyx_kp_u_None_is_not_of_the_type__typing;
static PyObject *__pyx_kp_u_None_is_not_of_type__typing_Sequ;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_RegisterSQLSchemaException;
static PyObject *__pyx_n_u_RegisterSQLSchemaException;
static PyObject *__pyx_n_s_RegisterSQLSchemaException_creat;
static PyObject *__pyx_n_s_RegisterTokenizerException;
static PyObject *__pyx_n_u_RegisterTokenizerException;
static PyObject *__pyx_n_s_RegisterTokenizerException_creat;
static PyObject *__pyx_n_s_SQLSchema;
static PyObject *__pyx_n_u_SQLSchema;
static PyObject *__pyx_n_s_Sequence;
static PyObject *__pyx_n_s_Set;
static PyObject *__pyx_n_s_TableId;
static PyObject *__pyx_n_s_Token;
static PyObject *__pyx_n_s_TokenizerNotRegisteredException;
static PyObject *__pyx_n_u_TokenizerNotRegisteredException;
static PyObject *__pyx_n_s_TokenizerPrefixException;
static PyObject *__pyx_n_u_TokenizerPrefixException;
static PyObject *__pyx_n_s_Type;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_UTF_8;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_kp_u_Unable_to_derive_correct_union_f;
static PyObject *__pyx_kp_u_Union_contains_a_value_of_type;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_n_s__23;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_u_batchId;
static PyObject *__pyx_n_s_builtins;
static PyObject *__pyx_n_s_builtins_2;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_collections_abc;
static PyObject *__pyx_n_u_columnNames;
static PyObject *__pyx_n_u_columnToTable;
static PyObject *__pyx_n_u_columnTypes;
static PyObject *__pyx_n_u_contexts;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_u_dbId;
static PyObject *__pyx_n_u_description;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_u_fbthrift;
static PyObject *__pyx_n_s_fbthrift_iobuf;
static PyObject *__pyx_n_s_feedCompleteSuccess;
static PyObject *__pyx_n_u_feedFatalException;
static PyObject *__pyx_n_s_feedParseFailure;
static PyObject *__pyx_n_s_feedPartialSuccess;
static PyObject *__pyx_n_u_feedResult;
static PyObject *__pyx_n_s_feedTimeoutFailure;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_folly_iobuf;
static PyObject *__pyx_n_u_foreignKeys;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_fromValue;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get_all_names;
static PyObject *__pyx_n_s_get_metadata;
static PyObject *__pyx_n_s_get_reflection;
static PyObject *__pyx_n_s_get_thrift_name;
static PyObject *__pyx_n_s_getattribute;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_hash;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_indices;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_u_input;
static PyObject *__pyx_kp_u_is_not_in_list;
static PyObject *__pyx_kp_u_is_not_of_type_BatchFeedResult;
static PyObject *__pyx_kp_u_is_not_of_type_ColumnType;
static PyObject *__pyx_kp_u_is_not_of_type_int;
static PyObject *__pyx_kp_u_is_not_of_type_str;
static PyObject *__pyx_n_s_item;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_u_leftover;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_u_message;
static PyObject *__pyx_n_s_meta;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_modeException;
static PyObject *__pyx_n_u_mro;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_kp_u_not_feedCompleteSuccess;
static PyObject *__pyx_kp_u_not_feedParseFailure;
static PyObject *__pyx_kp_u_not_feedPartialSuccess;
static PyObject *__pyx_kp_u_not_feedTimeoutFailure;
static PyObject *__pyx_kp_u_not_modeException;
static PyObject *__pyx_kp_u_not_tokenizerNotRegisteredExcep;
static PyObject *__pyx_kp_u_not_tokenizerPrefixException;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_kp_u_picard_BatchFeedResult;
static PyObject *__pyx_kp_u_picard_ColumnType;
static PyObject *__pyx_kp_u_picard_FeedCompleteSuccess;
static PyObject *__pyx_kp_u_picard_FeedException;
static PyObject *__pyx_kp_u_picard_FeedFatalException;
static PyObject *__pyx_kp_u_picard_FeedParseFailure;
static PyObject *__pyx_kp_u_picard_FeedPartialSuccess;
static PyObject *__pyx_kp_u_picard_FeedResult;
static PyObject *__pyx_kp_u_picard_FeedTimeoutFailure;
static PyObject *__pyx_kp_u_picard_Mode;
static PyObject *__pyx_kp_u_picard_ModeException;
static PyObject *__pyx_kp_u_picard_RegisterSQLSchemaExceptio;
static PyObject *__pyx_kp_u_picard_RegisterTokenizerExceptio;
static PyObject *__pyx_kp_u_picard_SQLSchema;
static PyObject *__pyx_kp_u_picard_TokenizerNotRegisteredExc;
static PyObject *__pyx_kp_u_picard_TokenizerPrefixException;
static PyObject *__pyx_n_s_picard_types;
static PyObject *__pyx_kp_s_picard_types_pyx;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_u_primaryKeys;
static PyObject *__pyx_n_s_py3;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_register;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_u_tableNames;
static PyObject *__pyx_n_u_tableToColumns;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_thrift;
static PyObject *__pyx_n_s_thrift_py3_types;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_tokenizerNotRegisteredException;
static PyObject *__pyx_n_s_tokenizerPrefixException;
static PyObject *__pyx_n_u_topToken;
static PyObject *__pyx_n_s_types;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_weakref;
static PyObject *__pyx_n_s_weakref_2;
static PyObject *__pyx_pf_6picard_5types_16__ColumnTypeMeta__fbthrift_get_by_value(CYTHON_UNUSED struct __pyx_obj_6picard_5types___ColumnTypeMeta *__pyx_v_cls, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6picard_5types_16__ColumnTypeMeta_2_fbthrift_get_all_names(CYTHON_UNUSED struct __pyx_obj_6picard_5types___ColumnTypeMeta *__pyx_v_cls); /* proto */
static Py_ssize_t __pyx_pf_6picard_5types_16__ColumnTypeMeta_4__len__(CYTHON_UNUSED struct __pyx_obj_6picard_5types___ColumnTypeMeta *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_6picard_5types_16__ColumnTypeMeta_6__getattribute__(struct __pyx_obj_6picard_5types___ColumnTypeMeta *__pyx_v_cls, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6picard_5types_10ColumnType___get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_10ColumnType_2__get_thrift_name__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_10__ModeMeta__fbthrift_get_by_value(CYTHON_UNUSED struct __pyx_obj_6picard_5types___ModeMeta *__pyx_v_cls, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6picard_5types_10__ModeMeta_2_fbthrift_get_all_names(CYTHON_UNUSED struct __pyx_obj_6picard_5types___ModeMeta *__pyx_v_cls); /* proto */
static Py_ssize_t __pyx_pf_6picard_5types_10__ModeMeta_4__len__(CYTHON_UNUSED struct __pyx_obj_6picard_5types___ModeMeta *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_6picard_5types_10__ModeMeta_6__getattribute__(struct __pyx_obj_6picard_5types___ModeMeta *__pyx_v_cls, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6picard_5types_4Mode___get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_4Mode_2__get_thrift_name__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_35__FeedFatalException_Union_TypeMeta__fbthrift_get_by_value(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta *__pyx_v_cls, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6picard_5types_35__FeedFatalException_Union_TypeMeta_2_fbthrift_get_all_names(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta *__pyx_v_cls); /* proto */
static Py_ssize_t __pyx_pf_6picard_5types_35__FeedFatalException_Union_TypeMeta_4__len__(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_6picard_5types_35__FeedFatalException_Union_TypeMeta_6__getattribute__(struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta *__pyx_v_cls, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6picard_5types_27__FeedResult_Union_TypeMeta__fbthrift_get_by_value(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta *__pyx_v_cls, int __pyx_v_value); /* proto */
static PyObject *__pyx_pf_6picard_5types_27__FeedResult_Union_TypeMeta_2_fbthrift_get_all_names(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta *__pyx_v_cls); /* proto */
static Py_ssize_t __pyx_pf_6picard_5types_27__FeedResult_Union_TypeMeta_4__len__(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_6picard_5types_27__FeedResult_Union_TypeMeta_6__getattribute__(struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta *__pyx_v_cls, PyObject *__pyx_v_name); /* proto */
static int __pyx_pf_6picard_5types_9SQLSchema___init__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_9SQLSchema_2__call__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_9SQLSchema_11columnNames___get__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_9SQLSchema_11columnTypes___get__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_9SQLSchema_10tableNames___get__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_9SQLSchema_13columnToTable___get__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_9SQLSchema_14tableToColumns___get__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_9SQLSchema_11foreignKeys___get__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_9SQLSchema_11primaryKeys___get__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6picard_5types_9SQLSchema_4__hash__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_9SQLSchema_6__copy__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_9SQLSchema_8__richcmp__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6picard_5types_9SQLSchema_10__get_reflection__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_9SQLSchema_12__get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_9SQLSchema_14__get_thrift_name__(void); /* proto */
static int __pyx_pf_6picard_5types_9SQLSchema_16__cinit__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_26RegisterSQLSchemaException___init__(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_6create_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_4dbId___get__(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_7message___get__(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6picard_5types_26RegisterSQLSchemaException_2__hash__(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_4__copy__(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_6__richcmp__(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_8__get_reflection__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_10__get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_12__get_thrift_name__(void); /* proto */
static int __pyx_pf_6picard_5types_26RegisterSQLSchemaException_14__cinit__(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_26RegisterTokenizerException___init__(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterTokenizerException_6create_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterTokenizerException_7message___get__(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6picard_5types_26RegisterTokenizerException_2__hash__(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterTokenizerException_4__copy__(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterTokenizerException_6__richcmp__(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterTokenizerException_8__get_reflection__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterTokenizerException_10__get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_26RegisterTokenizerException_12__get_thrift_name__(void); /* proto */
static int __pyx_pf_6picard_5types_26RegisterTokenizerException_14__cinit__(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_31TokenizerNotRegisteredException___init__(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_31TokenizerNotRegisteredException_2__call__(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_31TokenizerNotRegisteredException_7message___get__(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6picard_5types_31TokenizerNotRegisteredException_4__hash__(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_31TokenizerNotRegisteredException_6__copy__(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_31TokenizerNotRegisteredException_8__richcmp__(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6picard_5types_31TokenizerNotRegisteredException_10__get_reflection__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_31TokenizerNotRegisteredException_12__get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_31TokenizerNotRegisteredException_14__get_thrift_name__(void); /* proto */
static int __pyx_pf_6picard_5types_31TokenizerNotRegisteredException_16__cinit__(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_24TokenizerPrefixException___init__(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_24TokenizerPrefixException_2__call__(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_24TokenizerPrefixException_7message___get__(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6picard_5types_24TokenizerPrefixException_4__hash__(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_24TokenizerPrefixException_6__copy__(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_24TokenizerPrefixException_8__richcmp__(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6picard_5types_24TokenizerPrefixException_10__get_reflection__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_24TokenizerPrefixException_12__get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_24TokenizerPrefixException_14__get_thrift_name__(void); /* proto */
static int __pyx_pf_6picard_5types_24TokenizerPrefixException_16__cinit__(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_13ModeException___init__(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_13ModeException_2__call__(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_13ModeException_7message___get__(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6picard_5types_13ModeException_4__hash__(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_13ModeException_6__copy__(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_13ModeException_8__richcmp__(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6picard_5types_13ModeException_10__get_reflection__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_13ModeException_12__get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_13ModeException_14__get_thrift_name__(void); /* proto */
static int __pyx_pf_6picard_5types_13ModeException_16__cinit__(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_18FeedFatalException___init__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self, struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_tokenizerNotRegisteredException, struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_tokenizerPrefixException, struct __pyx_obj_6picard_5types_ModeException *__pyx_v_modeException); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_2fromValue(PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_31tokenizerNotRegisteredException___get__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_24tokenizerPrefixException___get__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_13modeException___get__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6picard_5types_18FeedFatalException_4__hash__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_6__copy__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_8__richcmp__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_10__get_reflection__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_12__get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_14__get_thrift_name__(void); /* proto */
static int __pyx_pf_6picard_5types_18FeedFatalException_16__cinit__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_4type___get__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_5value___get__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_13FeedException___init__(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_13FeedException_6create_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_13FeedException_18feedFatalException___get__(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6picard_5types_13FeedException_2__hash__(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_13FeedException_4__copy__(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_13FeedException_6__richcmp__(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6picard_5types_13FeedException_8__get_reflection__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_13FeedException_10__get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_13FeedException_12__get_thrift_name__(void); /* proto */
static int __pyx_pf_6picard_5types_13FeedException_14__cinit__(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_16FeedParseFailure___init__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_2__call__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_5input___get__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_8contexts___get__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_11description___get__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6picard_5types_16FeedParseFailure_4__hash__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_6__copy__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_8__richcmp__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_10__get_reflection__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_12__get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_14__get_thrift_name__(void); /* proto */
static int __pyx_pf_6picard_5types_16FeedParseFailure_16__cinit__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_18FeedTimeoutFailure___init__(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedTimeoutFailure_2__call__(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedTimeoutFailure_7message___get__(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6picard_5types_18FeedTimeoutFailure_4__hash__(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedTimeoutFailure_6__copy__(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedTimeoutFailure_8__richcmp__(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedTimeoutFailure_10__get_reflection__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedTimeoutFailure_12__get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedTimeoutFailure_14__get_thrift_name__(void); /* proto */
static int __pyx_pf_6picard_5types_18FeedTimeoutFailure_16__cinit__(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_18FeedPartialSuccess___init__(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedPartialSuccess_2__call__(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static Py_hash_t __pyx_pf_6picard_5types_18FeedPartialSuccess_4__hash__(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedPartialSuccess_6__copy__(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedPartialSuccess_8__richcmp__(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedPartialSuccess_10__get_reflection__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedPartialSuccess_12__get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_18FeedPartialSuccess_14__get_thrift_name__(void); /* proto */
static int __pyx_pf_6picard_5types_18FeedPartialSuccess_16__cinit__(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_19FeedCompleteSuccess___init__(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_19FeedCompleteSuccess_2__call__(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_19FeedCompleteSuccess_8leftover___get__(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6picard_5types_19FeedCompleteSuccess_4__hash__(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_19FeedCompleteSuccess_6__copy__(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_19FeedCompleteSuccess_8__richcmp__(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6picard_5types_19FeedCompleteSuccess_10__get_reflection__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_19FeedCompleteSuccess_12__get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_19FeedCompleteSuccess_14__get_thrift_name__(void); /* proto */
static int __pyx_pf_6picard_5types_19FeedCompleteSuccess_16__cinit__(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_10FeedResult___init__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self, struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_feedParseFailure, struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_feedTimeoutFailure, struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_feedPartialSuccess, struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_feedCompleteSuccess); /* proto */
static PyObject *__pyx_pf_6picard_5types_10FeedResult_2fromValue(PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6picard_5types_10FeedResult_16feedParseFailure___get__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_10FeedResult_18feedTimeoutFailure___get__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_10FeedResult_18feedPartialSuccess___get__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_10FeedResult_19feedCompleteSuccess___get__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6picard_5types_10FeedResult_4__hash__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_10FeedResult_6__copy__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_10FeedResult_8__richcmp__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6picard_5types_10FeedResult_10__get_reflection__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_10FeedResult_12__get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_10FeedResult_14__get_thrift_name__(void); /* proto */
static int __pyx_pf_6picard_5types_10FeedResult_16__cinit__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_10FeedResult_4type___get__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_10FeedResult_5value___get__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_15BatchFeedResult___init__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_2__call__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_7batchId___get__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_8topToken___get__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_10feedResult___get__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self); /* proto */
static Py_hash_t __pyx_pf_6picard_5types_15BatchFeedResult_4__hash__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_6__copy__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_8__richcmp__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /* proto */
static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_10__get_reflection__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_12__get_metadata__(void); /* proto */
static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_14__get_thrift_name__(void); /* proto */
static int __pyx_pf_6picard_5types_15BatchFeedResult_16__cinit__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_9List__i64___init__(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self, PyObject *__pyx_v_items); /* proto */
static PyObject *__pyx_pf_6picard_5types_9List__i64_2__copy__(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6picard_5types_9List__i64_4__len__(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_9List__i64_6index(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_start, PyObject *__pyx_v_stop); /* proto */
static PyObject *__pyx_pf_6picard_5types_9List__i64_8count(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static PyObject *__pyx_pf_6picard_5types_9List__i64_10__get_reflection__(void); /* proto */
static int __pyx_pf_6picard_5types_15List__List__i64___init__(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self, PyObject *__pyx_v_items); /* proto */
static PyObject *__pyx_pf_6picard_5types_15List__List__i64_2__copy__(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6picard_5types_15List__List__i64_4__len__(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_15List__List__i64_6index(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_start, PyObject *__pyx_v_stop); /* proto */
static PyObject *__pyx_pf_6picard_5types_15List__List__i64_8count(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static PyObject *__pyx_pf_6picard_5types_15List__List__i64_10__get_reflection__(void); /* proto */
static int __pyx_pf_6picard_5types_21List__BatchFeedResult___init__(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_items); /* proto */
static PyObject *__pyx_pf_6picard_5types_21List__BatchFeedResult_2__copy__(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6picard_5types_21List__BatchFeedResult_4__len__(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_21List__BatchFeedResult_6index(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_start, PyObject *__pyx_v_stop); /* proto */
static PyObject *__pyx_pf_6picard_5types_21List__BatchFeedResult_8count(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static PyObject *__pyx_pf_6picard_5types_21List__BatchFeedResult_10__get_reflection__(void); /* proto */
static int __pyx_pf_6picard_5types_18Map__string_string___init__(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self, PyObject *__pyx_v_items); /* proto */
static PyObject *__pyx_pf_6picard_5types_18Map__string_string_2__copy__(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6picard_5types_18Map__string_string_4__len__(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_18Map__string_string_6__getitem__(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6picard_5types_18Map__string_string_8__iter__(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_18Map__string_string_11__contains__(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6picard_5types_18Map__string_string_13values(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_18Map__string_string_16items(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_18Map__string_string_19__get_reflection__(void); /* proto */
static int __pyx_pf_6picard_5types_22Map__string_ColumnType___init__(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self, PyObject *__pyx_v_items); /* proto */
static PyObject *__pyx_pf_6picard_5types_22Map__string_ColumnType_2__copy__(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6picard_5types_22Map__string_ColumnType_4__len__(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_22Map__string_ColumnType_6__getitem__(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6picard_5types_22Map__string_ColumnType_8__iter__(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_22Map__string_ColumnType_11__contains__(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6picard_5types_22Map__string_ColumnType_13values(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_22Map__string_ColumnType_16items(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_22Map__string_ColumnType_19__get_reflection__(void); /* proto */
static int __pyx_pf_6picard_5types_12List__string___init__(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self, PyObject *__pyx_v_items); /* proto */
static PyObject *__pyx_pf_6picard_5types_12List__string_2__copy__(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6picard_5types_12List__string_4__len__(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_12List__string_6index(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_start, PyObject *__pyx_v_stop); /* proto */
static PyObject *__pyx_pf_6picard_5types_12List__string_8count(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static PyObject *__pyx_pf_6picard_5types_12List__string_10__get_reflection__(void); /* proto */
static int __pyx_pf_6picard_5types_24Map__string_List__string___init__(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self, PyObject *__pyx_v_items); /* proto */
static PyObject *__pyx_pf_6picard_5types_24Map__string_List__string_2__copy__(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6picard_5types_24Map__string_List__string_4__len__(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_24Map__string_List__string_6__getitem__(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6picard_5types_24Map__string_List__string_8__iter__(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self); /* proto */
static int __pyx_pf_6picard_5types_24Map__string_List__string_11__contains__(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self, PyObject *__pyx_v_key); /* proto */
static PyObject *__pyx_pf_6picard_5types_24Map__string_List__string_13values(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_24Map__string_List__string_16items(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6picard_5types_24Map__string_List__string_19__get_reflection__(void); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_6picard_5types_ColumnType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_Mode(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_SQLSchema(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_RegisterSQLSchemaException(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_RegisterTokenizerException(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_TokenizerNotRegisteredException(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_TokenizerPrefixException(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_ModeException(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___FeedFatalExceptionType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_FeedFatalException(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_FeedException(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_FeedParseFailure(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_FeedTimeoutFailure(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_FeedPartialSuccess(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_FeedCompleteSuccess(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___FeedResultType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_FeedResult(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_BatchFeedResult(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_List__i64(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_List__List__i64(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_List__BatchFeedResult(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_Map__string_string(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_Map__string_ColumnType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_List__string(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types_Map__string_List__string(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___ColumnTypeMeta(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___ModeMeta(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___FeedFatalException_Union_TypeMeta(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___FeedResult_Union_TypeMeta(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct__create(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_2_create(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_4_create(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_5_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_6___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_7_values(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_8_items(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_9___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_10_values(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_11_items(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_12___iter__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_13_values(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_14_items(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PySlice_Type_indices = {0, &__pyx_n_s_indices, 0, 0, 0};
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__19;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__42;
static PyObject *__pyx_codeobj__44;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__60;
static PyObject *__pyx_codeobj__62;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__64;
static PyObject *__pyx_codeobj__66;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__70;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__72;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__78;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__82;
static PyObject *__pyx_codeobj__84;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__86;
static PyObject *__pyx_codeobj__88;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__94;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__96;
static PyObject *__pyx_codeobj__103;
/* Late includes */

/* "picard/types.pyx":66
 * @__cython.auto_pickle(False)
 * cdef class __ColumnTypeMeta(thrift.py3.types.EnumMeta):
 *     def _fbthrift_get_by_value(cls, int value):             # <<<<<<<<<<<<<<
 *         return __ColumnType_enum_data.get_by_value(value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_16__ColumnTypeMeta_1_fbthrift_get_by_value(PyObject *__pyx_v_cls, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_pw_6picard_5types_16__ColumnTypeMeta_1_fbthrift_get_by_value(PyObject *__pyx_v_cls, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_fbthrift_get_by_value (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_int(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.__ColumnTypeMeta._fbthrift_get_by_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_16__ColumnTypeMeta__fbthrift_get_by_value(((struct __pyx_obj_6picard_5types___ColumnTypeMeta *)__pyx_v_cls), ((int)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_16__ColumnTypeMeta__fbthrift_get_by_value(CYTHON_UNUSED struct __pyx_obj_6picard_5types___ColumnTypeMeta *__pyx_v_cls, int __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_by_value", 0);

  /* "picard/types.pyx":67
 * cdef class __ColumnTypeMeta(thrift.py3.types.EnumMeta):
 *     def _fbthrift_get_by_value(cls, int value):
 *         return __ColumnType_enum_data.get_by_value(value)             # <<<<<<<<<<<<<<
 * 
 *     def _fbthrift_get_all_names(cls):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___ColumnType_enum_data->__pyx_vtab)->get_by_value(__pyx_v_6picard_5types___ColumnType_enum_data, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":66
 * @__cython.auto_pickle(False)
 * cdef class __ColumnTypeMeta(thrift.py3.types.EnumMeta):
 *     def _fbthrift_get_by_value(cls, int value):             # <<<<<<<<<<<<<<
 *         return __ColumnType_enum_data.get_by_value(value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.__ColumnTypeMeta._fbthrift_get_by_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":69
 *         return __ColumnType_enum_data.get_by_value(value)
 * 
 *     def _fbthrift_get_all_names(cls):             # <<<<<<<<<<<<<<
 *         return __ColumnType_enum_data.get_all_names()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_16__ColumnTypeMeta_3_fbthrift_get_all_names(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_16__ColumnTypeMeta_3_fbthrift_get_all_names(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_fbthrift_get_all_names (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_16__ColumnTypeMeta_2_fbthrift_get_all_names(((struct __pyx_obj_6picard_5types___ColumnTypeMeta *)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_16__ColumnTypeMeta_2_fbthrift_get_all_names(CYTHON_UNUSED struct __pyx_obj_6picard_5types___ColumnTypeMeta *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_all_names", 0);

  /* "picard/types.pyx":70
 * 
 *     def _fbthrift_get_all_names(cls):
 *         return __ColumnType_enum_data.get_all_names()             # <<<<<<<<<<<<<<
 * 
 *     def __len__(cls):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_6picard_5types___ColumnType_enum_data), __pyx_n_s_get_all_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":69
 *         return __ColumnType_enum_data.get_by_value(value)
 * 
 *     def _fbthrift_get_all_names(cls):             # <<<<<<<<<<<<<<
 *         return __ColumnType_enum_data.get_all_names()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.__ColumnTypeMeta._fbthrift_get_all_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":72
 *         return __ColumnType_enum_data.get_all_names()
 * 
 *     def __len__(cls):             # <<<<<<<<<<<<<<
 *         return __ColumnType_enum_data.size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6picard_5types_16__ColumnTypeMeta_5__len__(PyObject *__pyx_v_cls); /*proto*/
static Py_ssize_t __pyx_pw_6picard_5types_16__ColumnTypeMeta_5__len__(PyObject *__pyx_v_cls) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_16__ColumnTypeMeta_4__len__(((struct __pyx_obj_6picard_5types___ColumnTypeMeta *)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6picard_5types_16__ColumnTypeMeta_4__len__(CYTHON_UNUSED struct __pyx_obj_6picard_5types___ColumnTypeMeta *__pyx_v_cls) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "picard/types.pyx":73
 * 
 *     def __len__(cls):
 *         return __ColumnType_enum_data.size()             # <<<<<<<<<<<<<<
 * 
 *     def __getattribute__(cls, str name not None):
 */
  __pyx_r = ((struct __pyx_vtabstruct_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___ColumnType_enum_data->__pyx_vtab)->size(__pyx_v_6picard_5types___ColumnType_enum_data);
  goto __pyx_L0;

  /* "picard/types.pyx":72
 *         return __ColumnType_enum_data.get_all_names()
 * 
 *     def __len__(cls):             # <<<<<<<<<<<<<<
 *         return __ColumnType_enum_data.size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":75
 *         return __ColumnType_enum_data.size()
 * 
 *     def __getattribute__(cls, str name not None):             # <<<<<<<<<<<<<<
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_16__ColumnTypeMeta_7__getattribute__(PyObject *__pyx_v_cls, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_6picard_5types_16__ColumnTypeMeta_7__getattribute__(PyObject *__pyx_v_cls, PyObject *__pyx_v_name) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattribute__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 0, "name", 1))) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_r = __pyx_pf_6picard_5types_16__ColumnTypeMeta_6__getattribute__(((struct __pyx_obj_6picard_5types___ColumnTypeMeta *)__pyx_v_cls), ((PyObject*)__pyx_v_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_16__ColumnTypeMeta_6__getattribute__(struct __pyx_obj_6picard_5types___ColumnTypeMeta *__pyx_v_cls, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattribute__", 0);

  /* "picard/types.pyx":76
 * 
 *     def __getattribute__(cls, str name not None):
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":             # <<<<<<<<<<<<<<
 *             return super().__getattribute__(name)
 *         return __ColumnType_enum_data.get_by_name(name)
 */
  __pyx_t_2 = __Pyx_PyUnicode_Tailmatch(__pyx_v_name, __pyx_n_u_, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 76, __pyx_L1_error)
  if (!(__pyx_t_2 != 0)) {
  } else {
    __pyx_t_1 = (__pyx_t_2 != 0);
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyUnicode_Tailmatch(__pyx_v_name, __pyx_n_u_fbthrift, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 76, __pyx_L1_error)
  if (!(__pyx_t_2 != 0)) {
  } else {
    __pyx_t_1 = (__pyx_t_2 != 0);
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_name, __pyx_n_u_mro, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 76, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "picard/types.pyx":77
 *     def __getattribute__(cls, str name not None):
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)             # <<<<<<<<<<<<<<
 *         return __ColumnType_enum_data.get_by_name(name)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types___ColumnTypeMeta));
    __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types___ColumnTypeMeta));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_ptype_6picard_5types___ColumnTypeMeta));
    __Pyx_INCREF(((PyObject *)__pyx_v_cls));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_cls));
    PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_cls));
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_getattribute); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_name) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_name);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":76
 * 
 *     def __getattribute__(cls, str name not None):
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":             # <<<<<<<<<<<<<<
 *             return super().__getattribute__(name)
 *         return __ColumnType_enum_data.get_by_name(name)
 */
  }

  /* "picard/types.pyx":78
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)
 *         return __ColumnType_enum_data.get_by_name(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ((struct __pyx_vtabstruct_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___ColumnType_enum_data->__pyx_vtab)->get_by_name(__pyx_v_6picard_5types___ColumnType_enum_data, __pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":75
 *         return __ColumnType_enum_data.size()
 * 
 *     def __getattribute__(cls, str name not None):             # <<<<<<<<<<<<<<
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.__ColumnTypeMeta.__getattribute__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":84
 * @__cython.auto_pickle(False)
 * cdef class ColumnType(thrift.py3.types.CompiledEnum):
 *     cdef get_by_name(self, str name):             # <<<<<<<<<<<<<<
 *         return __ColumnType_enum_data.get_by_name(name)
 * 
 */

static PyObject *__pyx_f_6picard_5types_10ColumnType_get_by_name(CYTHON_UNUSED struct __pyx_obj_6picard_5types_ColumnType *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_by_name", 0);

  /* "picard/types.pyx":85
 * cdef class ColumnType(thrift.py3.types.CompiledEnum):
 *     cdef get_by_name(self, str name):
 *         return __ColumnType_enum_data.get_by_name(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___ColumnType_enum_data->__pyx_vtab)->get_by_name(__pyx_v_6picard_5types___ColumnType_enum_data, __pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":84
 * @__cython.auto_pickle(False)
 * cdef class ColumnType(thrift.py3.types.CompiledEnum):
 *     cdef get_by_name(self, str name):             # <<<<<<<<<<<<<<
 *         return __ColumnType_enum_data.get_by_name(name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.ColumnType.get_by_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":89
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         EnumMetadata[cColumnType].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10ColumnType_1__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_10ColumnType_1__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_10ColumnType_1__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_10ColumnType_1__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_10ColumnType___get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10ColumnType___get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":91
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         EnumMetadata[cColumnType].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::EnumMetadata<::cpp2::ColumnType> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":92
 *         cdef __fbthrift_cThriftMetadata meta
 *         EnumMetadata[cColumnType].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":89
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         EnumMetadata[cColumnType].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.ColumnType.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":95
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.ColumnType"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10ColumnType_3__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_10ColumnType_3__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_10ColumnType_3__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_10ColumnType_3__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_10ColumnType_2__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10ColumnType_2__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":96
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.ColumnType"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_ColumnType);
  __pyx_r = __pyx_kp_u_picard_ColumnType;
  goto __pyx_L0;

  /* "picard/types.pyx":95
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.ColumnType"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":108
 * @__cython.auto_pickle(False)
 * cdef class __ModeMeta(thrift.py3.types.EnumMeta):
 *     def _fbthrift_get_by_value(cls, int value):             # <<<<<<<<<<<<<<
 *         return __Mode_enum_data.get_by_value(value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10__ModeMeta_1_fbthrift_get_by_value(PyObject *__pyx_v_cls, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_pw_6picard_5types_10__ModeMeta_1_fbthrift_get_by_value(PyObject *__pyx_v_cls, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_fbthrift_get_by_value (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_int(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 108, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.__ModeMeta._fbthrift_get_by_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_10__ModeMeta__fbthrift_get_by_value(((struct __pyx_obj_6picard_5types___ModeMeta *)__pyx_v_cls), ((int)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10__ModeMeta__fbthrift_get_by_value(CYTHON_UNUSED struct __pyx_obj_6picard_5types___ModeMeta *__pyx_v_cls, int __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_by_value", 0);

  /* "picard/types.pyx":109
 * cdef class __ModeMeta(thrift.py3.types.EnumMeta):
 *     def _fbthrift_get_by_value(cls, int value):
 *         return __Mode_enum_data.get_by_value(value)             # <<<<<<<<<<<<<<
 * 
 *     def _fbthrift_get_all_names(cls):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___Mode_enum_data->__pyx_vtab)->get_by_value(__pyx_v_6picard_5types___Mode_enum_data, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":108
 * @__cython.auto_pickle(False)
 * cdef class __ModeMeta(thrift.py3.types.EnumMeta):
 *     def _fbthrift_get_by_value(cls, int value):             # <<<<<<<<<<<<<<
 *         return __Mode_enum_data.get_by_value(value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.__ModeMeta._fbthrift_get_by_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":111
 *         return __Mode_enum_data.get_by_value(value)
 * 
 *     def _fbthrift_get_all_names(cls):             # <<<<<<<<<<<<<<
 *         return __Mode_enum_data.get_all_names()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10__ModeMeta_3_fbthrift_get_all_names(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_10__ModeMeta_3_fbthrift_get_all_names(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_fbthrift_get_all_names (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_10__ModeMeta_2_fbthrift_get_all_names(((struct __pyx_obj_6picard_5types___ModeMeta *)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10__ModeMeta_2_fbthrift_get_all_names(CYTHON_UNUSED struct __pyx_obj_6picard_5types___ModeMeta *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_all_names", 0);

  /* "picard/types.pyx":112
 * 
 *     def _fbthrift_get_all_names(cls):
 *         return __Mode_enum_data.get_all_names()             # <<<<<<<<<<<<<<
 * 
 *     def __len__(cls):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_6picard_5types___Mode_enum_data), __pyx_n_s_get_all_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":111
 *         return __Mode_enum_data.get_by_value(value)
 * 
 *     def _fbthrift_get_all_names(cls):             # <<<<<<<<<<<<<<
 *         return __Mode_enum_data.get_all_names()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.__ModeMeta._fbthrift_get_all_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":114
 *         return __Mode_enum_data.get_all_names()
 * 
 *     def __len__(cls):             # <<<<<<<<<<<<<<
 *         return __Mode_enum_data.size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6picard_5types_10__ModeMeta_5__len__(PyObject *__pyx_v_cls); /*proto*/
static Py_ssize_t __pyx_pw_6picard_5types_10__ModeMeta_5__len__(PyObject *__pyx_v_cls) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_10__ModeMeta_4__len__(((struct __pyx_obj_6picard_5types___ModeMeta *)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6picard_5types_10__ModeMeta_4__len__(CYTHON_UNUSED struct __pyx_obj_6picard_5types___ModeMeta *__pyx_v_cls) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "picard/types.pyx":115
 * 
 *     def __len__(cls):
 *         return __Mode_enum_data.size()             # <<<<<<<<<<<<<<
 * 
 *     def __getattribute__(cls, str name not None):
 */
  __pyx_r = ((struct __pyx_vtabstruct_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___Mode_enum_data->__pyx_vtab)->size(__pyx_v_6picard_5types___Mode_enum_data);
  goto __pyx_L0;

  /* "picard/types.pyx":114
 *         return __Mode_enum_data.get_all_names()
 * 
 *     def __len__(cls):             # <<<<<<<<<<<<<<
 *         return __Mode_enum_data.size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":117
 *         return __Mode_enum_data.size()
 * 
 *     def __getattribute__(cls, str name not None):             # <<<<<<<<<<<<<<
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10__ModeMeta_7__getattribute__(PyObject *__pyx_v_cls, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_6picard_5types_10__ModeMeta_7__getattribute__(PyObject *__pyx_v_cls, PyObject *__pyx_v_name) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattribute__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 0, "name", 1))) __PYX_ERR(0, 117, __pyx_L1_error)
  __pyx_r = __pyx_pf_6picard_5types_10__ModeMeta_6__getattribute__(((struct __pyx_obj_6picard_5types___ModeMeta *)__pyx_v_cls), ((PyObject*)__pyx_v_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10__ModeMeta_6__getattribute__(struct __pyx_obj_6picard_5types___ModeMeta *__pyx_v_cls, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattribute__", 0);

  /* "picard/types.pyx":118
 * 
 *     def __getattribute__(cls, str name not None):
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":             # <<<<<<<<<<<<<<
 *             return super().__getattribute__(name)
 *         return __Mode_enum_data.get_by_name(name)
 */
  __pyx_t_2 = __Pyx_PyUnicode_Tailmatch(__pyx_v_name, __pyx_n_u_, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 118, __pyx_L1_error)
  if (!(__pyx_t_2 != 0)) {
  } else {
    __pyx_t_1 = (__pyx_t_2 != 0);
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyUnicode_Tailmatch(__pyx_v_name, __pyx_n_u_fbthrift, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 118, __pyx_L1_error)
  if (!(__pyx_t_2 != 0)) {
  } else {
    __pyx_t_1 = (__pyx_t_2 != 0);
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_name, __pyx_n_u_mro, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 118, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "picard/types.pyx":119
 *     def __getattribute__(cls, str name not None):
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)             # <<<<<<<<<<<<<<
 *         return __Mode_enum_data.get_by_name(name)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types___ModeMeta));
    __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types___ModeMeta));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_ptype_6picard_5types___ModeMeta));
    __Pyx_INCREF(((PyObject *)__pyx_v_cls));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_cls));
    PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_cls));
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_getattribute); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_name) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_name);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":118
 * 
 *     def __getattribute__(cls, str name not None):
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":             # <<<<<<<<<<<<<<
 *             return super().__getattribute__(name)
 *         return __Mode_enum_data.get_by_name(name)
 */
  }

  /* "picard/types.pyx":120
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)
 *         return __Mode_enum_data.get_by_name(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ((struct __pyx_vtabstruct_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___Mode_enum_data->__pyx_vtab)->get_by_name(__pyx_v_6picard_5types___Mode_enum_data, __pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":117
 *         return __Mode_enum_data.size()
 * 
 *     def __getattribute__(cls, str name not None):             # <<<<<<<<<<<<<<
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.__ModeMeta.__getattribute__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":126
 * @__cython.auto_pickle(False)
 * cdef class Mode(thrift.py3.types.CompiledEnum):
 *     cdef get_by_name(self, str name):             # <<<<<<<<<<<<<<
 *         return __Mode_enum_data.get_by_name(name)
 * 
 */

static PyObject *__pyx_f_6picard_5types_4Mode_get_by_name(CYTHON_UNUSED struct __pyx_obj_6picard_5types_Mode *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_by_name", 0);

  /* "picard/types.pyx":127
 * cdef class Mode(thrift.py3.types.CompiledEnum):
 *     cdef get_by_name(self, str name):
 *         return __Mode_enum_data.get_by_name(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___Mode_enum_data->__pyx_vtab)->get_by_name(__pyx_v_6picard_5types___Mode_enum_data, __pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":126
 * @__cython.auto_pickle(False)
 * cdef class Mode(thrift.py3.types.CompiledEnum):
 *     cdef get_by_name(self, str name):             # <<<<<<<<<<<<<<
 *         return __Mode_enum_data.get_by_name(name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.Mode.get_by_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":131
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         EnumMetadata[cMode].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_4Mode_1__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_4Mode_1__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_4Mode_1__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_4Mode_1__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_4Mode___get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_4Mode___get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":133
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         EnumMetadata[cMode].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::EnumMetadata<::cpp2::Mode> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":134
 *         cdef __fbthrift_cThriftMetadata meta
 *         EnumMetadata[cMode].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":131
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         EnumMetadata[cMode].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.Mode.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":137
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.Mode"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_4Mode_3__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_4Mode_3__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_4Mode_3__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_4Mode_3__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_4Mode_2__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_4Mode_2__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":138
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.Mode"             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_Mode);
  __pyx_r = __pyx_kp_u_picard_Mode;
  goto __pyx_L0;

  /* "picard/types.pyx":137
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.Mode"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":154
 * @__cython.auto_pickle(False)
 * cdef class __FeedFatalException_Union_TypeMeta(thrift.py3.types.EnumMeta):
 *     def _fbthrift_get_by_value(cls, int value):             # <<<<<<<<<<<<<<
 *         return __FeedFatalException_union_type_enum_data.get_by_value(value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_35__FeedFatalException_Union_TypeMeta_1_fbthrift_get_by_value(PyObject *__pyx_v_cls, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_pw_6picard_5types_35__FeedFatalException_Union_TypeMeta_1_fbthrift_get_by_value(PyObject *__pyx_v_cls, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_fbthrift_get_by_value (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_int(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 154, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.__FeedFatalException_Union_TypeMeta._fbthrift_get_by_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_35__FeedFatalException_Union_TypeMeta__fbthrift_get_by_value(((struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta *)__pyx_v_cls), ((int)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_35__FeedFatalException_Union_TypeMeta__fbthrift_get_by_value(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta *__pyx_v_cls, int __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_by_value", 0);

  /* "picard/types.pyx":155
 * cdef class __FeedFatalException_Union_TypeMeta(thrift.py3.types.EnumMeta):
 *     def _fbthrift_get_by_value(cls, int value):
 *         return __FeedFatalException_union_type_enum_data.get_by_value(value)             # <<<<<<<<<<<<<<
 * 
 *     def _fbthrift_get_all_names(cls):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6thrift_3py3_5types_UnionTypeEnumData *)__pyx_v_6picard_5types___FeedFatalException_union_type_enum_data->__pyx_base.__pyx_vtab)->__pyx_base.get_by_value(((struct __pyx_obj_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___FeedFatalException_union_type_enum_data), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":154
 * @__cython.auto_pickle(False)
 * cdef class __FeedFatalException_Union_TypeMeta(thrift.py3.types.EnumMeta):
 *     def _fbthrift_get_by_value(cls, int value):             # <<<<<<<<<<<<<<
 *         return __FeedFatalException_union_type_enum_data.get_by_value(value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.__FeedFatalException_Union_TypeMeta._fbthrift_get_by_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":157
 *         return __FeedFatalException_union_type_enum_data.get_by_value(value)
 * 
 *     def _fbthrift_get_all_names(cls):             # <<<<<<<<<<<<<<
 *         return __FeedFatalException_union_type_enum_data.get_all_names()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_35__FeedFatalException_Union_TypeMeta_3_fbthrift_get_all_names(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_35__FeedFatalException_Union_TypeMeta_3_fbthrift_get_all_names(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_fbthrift_get_all_names (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_35__FeedFatalException_Union_TypeMeta_2_fbthrift_get_all_names(((struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta *)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_35__FeedFatalException_Union_TypeMeta_2_fbthrift_get_all_names(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_all_names", 0);

  /* "picard/types.pyx":158
 * 
 *     def _fbthrift_get_all_names(cls):
 *         return __FeedFatalException_union_type_enum_data.get_all_names()             # <<<<<<<<<<<<<<
 * 
 *     def __len__(cls):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_6picard_5types___FeedFatalException_union_type_enum_data), __pyx_n_s_get_all_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":157
 *         return __FeedFatalException_union_type_enum_data.get_by_value(value)
 * 
 *     def _fbthrift_get_all_names(cls):             # <<<<<<<<<<<<<<
 *         return __FeedFatalException_union_type_enum_data.get_all_names()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.__FeedFatalException_Union_TypeMeta._fbthrift_get_all_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":160
 *         return __FeedFatalException_union_type_enum_data.get_all_names()
 * 
 *     def __len__(cls):             # <<<<<<<<<<<<<<
 *         return __FeedFatalException_union_type_enum_data.size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6picard_5types_35__FeedFatalException_Union_TypeMeta_5__len__(PyObject *__pyx_v_cls); /*proto*/
static Py_ssize_t __pyx_pw_6picard_5types_35__FeedFatalException_Union_TypeMeta_5__len__(PyObject *__pyx_v_cls) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_35__FeedFatalException_Union_TypeMeta_4__len__(((struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta *)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6picard_5types_35__FeedFatalException_Union_TypeMeta_4__len__(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta *__pyx_v_cls) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "picard/types.pyx":161
 * 
 *     def __len__(cls):
 *         return __FeedFatalException_union_type_enum_data.size()             # <<<<<<<<<<<<<<
 * 
 *     def __getattribute__(cls, str name not None):
 */
  __pyx_r = ((struct __pyx_vtabstruct_6thrift_3py3_5types_UnionTypeEnumData *)__pyx_v_6picard_5types___FeedFatalException_union_type_enum_data->__pyx_base.__pyx_vtab)->__pyx_base.size(((struct __pyx_obj_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___FeedFatalException_union_type_enum_data));
  goto __pyx_L0;

  /* "picard/types.pyx":160
 *         return __FeedFatalException_union_type_enum_data.get_all_names()
 * 
 *     def __len__(cls):             # <<<<<<<<<<<<<<
 *         return __FeedFatalException_union_type_enum_data.size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":163
 *         return __FeedFatalException_union_type_enum_data.size()
 * 
 *     def __getattribute__(cls, str name not None):             # <<<<<<<<<<<<<<
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_35__FeedFatalException_Union_TypeMeta_7__getattribute__(PyObject *__pyx_v_cls, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_6picard_5types_35__FeedFatalException_Union_TypeMeta_7__getattribute__(PyObject *__pyx_v_cls, PyObject *__pyx_v_name) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattribute__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 0, "name", 1))) __PYX_ERR(0, 163, __pyx_L1_error)
  __pyx_r = __pyx_pf_6picard_5types_35__FeedFatalException_Union_TypeMeta_6__getattribute__(((struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta *)__pyx_v_cls), ((PyObject*)__pyx_v_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_35__FeedFatalException_Union_TypeMeta_6__getattribute__(struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta *__pyx_v_cls, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattribute__", 0);

  /* "picard/types.pyx":164
 * 
 *     def __getattribute__(cls, str name not None):
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":             # <<<<<<<<<<<<<<
 *             return super().__getattribute__(name)
 *         return __FeedFatalException_union_type_enum_data.get_by_name(name)
 */
  __pyx_t_2 = __Pyx_PyUnicode_Tailmatch(__pyx_v_name, __pyx_n_u_, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 164, __pyx_L1_error)
  if (!(__pyx_t_2 != 0)) {
  } else {
    __pyx_t_1 = (__pyx_t_2 != 0);
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyUnicode_Tailmatch(__pyx_v_name, __pyx_n_u_fbthrift, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 164, __pyx_L1_error)
  if (!(__pyx_t_2 != 0)) {
  } else {
    __pyx_t_1 = (__pyx_t_2 != 0);
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_name, __pyx_n_u_mro, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 164, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "picard/types.pyx":165
 *     def __getattribute__(cls, str name not None):
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)             # <<<<<<<<<<<<<<
 *         return __FeedFatalException_union_type_enum_data.get_by_name(name)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types___FeedFatalException_Union_TypeMeta));
    __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types___FeedFatalException_Union_TypeMeta));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_ptype_6picard_5types___FeedFatalException_Union_TypeMeta));
    __Pyx_INCREF(((PyObject *)__pyx_v_cls));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_cls));
    PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_cls));
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_getattribute); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_name) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_name);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":164
 * 
 *     def __getattribute__(cls, str name not None):
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":             # <<<<<<<<<<<<<<
 *             return super().__getattribute__(name)
 *         return __FeedFatalException_union_type_enum_data.get_by_name(name)
 */
  }

  /* "picard/types.pyx":166
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)
 *         return __FeedFatalException_union_type_enum_data.get_by_name(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ((struct __pyx_vtabstruct_6thrift_3py3_5types_UnionTypeEnumData *)__pyx_v_6picard_5types___FeedFatalException_union_type_enum_data->__pyx_base.__pyx_vtab)->__pyx_base.get_by_name(((struct __pyx_obj_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___FeedFatalException_union_type_enum_data), __pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":163
 *         return __FeedFatalException_union_type_enum_data.size()
 * 
 *     def __getattribute__(cls, str name not None):             # <<<<<<<<<<<<<<
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.__FeedFatalException_Union_TypeMeta.__getattribute__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":172
 * @__cython.auto_pickle(False)
 * cdef class __FeedFatalExceptionType(thrift.py3.types.CompiledEnum):
 *     cdef get_by_name(self, str name):             # <<<<<<<<<<<<<<
 *         return __FeedFatalException_union_type_enum_data.get_by_name(name)
 * 
 */

static PyObject *__pyx_f_6picard_5types_24__FeedFatalExceptionType_get_by_name(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedFatalExceptionType *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_by_name", 0);

  /* "picard/types.pyx":173
 * cdef class __FeedFatalExceptionType(thrift.py3.types.CompiledEnum):
 *     cdef get_by_name(self, str name):
 *         return __FeedFatalException_union_type_enum_data.get_by_name(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6thrift_3py3_5types_UnionTypeEnumData *)__pyx_v_6picard_5types___FeedFatalException_union_type_enum_data->__pyx_base.__pyx_vtab)->__pyx_base.get_by_name(((struct __pyx_obj_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___FeedFatalException_union_type_enum_data), __pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":172
 * @__cython.auto_pickle(False)
 * cdef class __FeedFatalExceptionType(thrift.py3.types.CompiledEnum):
 *     cdef get_by_name(self, str name):             # <<<<<<<<<<<<<<
 *         return __FeedFatalException_union_type_enum_data.get_by_name(name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.__FeedFatalExceptionType.get_by_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":188
 * @__cython.auto_pickle(False)
 * cdef class __FeedResult_Union_TypeMeta(thrift.py3.types.EnumMeta):
 *     def _fbthrift_get_by_value(cls, int value):             # <<<<<<<<<<<<<<
 *         return __FeedResult_union_type_enum_data.get_by_value(value)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_27__FeedResult_Union_TypeMeta_1_fbthrift_get_by_value(PyObject *__pyx_v_cls, PyObject *__pyx_arg_value); /*proto*/
static PyObject *__pyx_pw_6picard_5types_27__FeedResult_Union_TypeMeta_1_fbthrift_get_by_value(PyObject *__pyx_v_cls, PyObject *__pyx_arg_value) {
  int __pyx_v_value;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_fbthrift_get_by_value (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyInt_As_int(__pyx_arg_value); if (unlikely((__pyx_v_value == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 188, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.__FeedResult_Union_TypeMeta._fbthrift_get_by_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_27__FeedResult_Union_TypeMeta__fbthrift_get_by_value(((struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta *)__pyx_v_cls), ((int)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_27__FeedResult_Union_TypeMeta__fbthrift_get_by_value(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta *__pyx_v_cls, int __pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_by_value", 0);

  /* "picard/types.pyx":189
 * cdef class __FeedResult_Union_TypeMeta(thrift.py3.types.EnumMeta):
 *     def _fbthrift_get_by_value(cls, int value):
 *         return __FeedResult_union_type_enum_data.get_by_value(value)             # <<<<<<<<<<<<<<
 * 
 *     def _fbthrift_get_all_names(cls):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6thrift_3py3_5types_UnionTypeEnumData *)__pyx_v_6picard_5types___FeedResult_union_type_enum_data->__pyx_base.__pyx_vtab)->__pyx_base.get_by_value(((struct __pyx_obj_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___FeedResult_union_type_enum_data), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":188
 * @__cython.auto_pickle(False)
 * cdef class __FeedResult_Union_TypeMeta(thrift.py3.types.EnumMeta):
 *     def _fbthrift_get_by_value(cls, int value):             # <<<<<<<<<<<<<<
 *         return __FeedResult_union_type_enum_data.get_by_value(value)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.__FeedResult_Union_TypeMeta._fbthrift_get_by_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":191
 *         return __FeedResult_union_type_enum_data.get_by_value(value)
 * 
 *     def _fbthrift_get_all_names(cls):             # <<<<<<<<<<<<<<
 *         return __FeedResult_union_type_enum_data.get_all_names()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_27__FeedResult_Union_TypeMeta_3_fbthrift_get_all_names(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_27__FeedResult_Union_TypeMeta_3_fbthrift_get_all_names(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_fbthrift_get_all_names (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_27__FeedResult_Union_TypeMeta_2_fbthrift_get_all_names(((struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta *)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_27__FeedResult_Union_TypeMeta_2_fbthrift_get_all_names(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_all_names", 0);

  /* "picard/types.pyx":192
 * 
 *     def _fbthrift_get_all_names(cls):
 *         return __FeedResult_union_type_enum_data.get_all_names()             # <<<<<<<<<<<<<<
 * 
 *     def __len__(cls):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_6picard_5types___FeedResult_union_type_enum_data), __pyx_n_s_get_all_names); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":191
 *         return __FeedResult_union_type_enum_data.get_by_value(value)
 * 
 *     def _fbthrift_get_all_names(cls):             # <<<<<<<<<<<<<<
 *         return __FeedResult_union_type_enum_data.get_all_names()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.__FeedResult_Union_TypeMeta._fbthrift_get_all_names", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":194
 *         return __FeedResult_union_type_enum_data.get_all_names()
 * 
 *     def __len__(cls):             # <<<<<<<<<<<<<<
 *         return __FeedResult_union_type_enum_data.size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6picard_5types_27__FeedResult_Union_TypeMeta_5__len__(PyObject *__pyx_v_cls); /*proto*/
static Py_ssize_t __pyx_pw_6picard_5types_27__FeedResult_Union_TypeMeta_5__len__(PyObject *__pyx_v_cls) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_27__FeedResult_Union_TypeMeta_4__len__(((struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta *)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6picard_5types_27__FeedResult_Union_TypeMeta_4__len__(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta *__pyx_v_cls) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "picard/types.pyx":195
 * 
 *     def __len__(cls):
 *         return __FeedResult_union_type_enum_data.size()             # <<<<<<<<<<<<<<
 * 
 *     def __getattribute__(cls, str name not None):
 */
  __pyx_r = ((struct __pyx_vtabstruct_6thrift_3py3_5types_UnionTypeEnumData *)__pyx_v_6picard_5types___FeedResult_union_type_enum_data->__pyx_base.__pyx_vtab)->__pyx_base.size(((struct __pyx_obj_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___FeedResult_union_type_enum_data));
  goto __pyx_L0;

  /* "picard/types.pyx":194
 *         return __FeedResult_union_type_enum_data.get_all_names()
 * 
 *     def __len__(cls):             # <<<<<<<<<<<<<<
 *         return __FeedResult_union_type_enum_data.size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":197
 *         return __FeedResult_union_type_enum_data.size()
 * 
 *     def __getattribute__(cls, str name not None):             # <<<<<<<<<<<<<<
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_27__FeedResult_Union_TypeMeta_7__getattribute__(PyObject *__pyx_v_cls, PyObject *__pyx_v_name); /*proto*/
static PyObject *__pyx_pw_6picard_5types_27__FeedResult_Union_TypeMeta_7__getattribute__(PyObject *__pyx_v_cls, PyObject *__pyx_v_name) {
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattribute__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 0, "name", 1))) __PYX_ERR(0, 197, __pyx_L1_error)
  __pyx_r = __pyx_pf_6picard_5types_27__FeedResult_Union_TypeMeta_6__getattribute__(((struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta *)__pyx_v_cls), ((PyObject*)__pyx_v_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_27__FeedResult_Union_TypeMeta_6__getattribute__(struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta *__pyx_v_cls, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattribute__", 0);

  /* "picard/types.pyx":198
 * 
 *     def __getattribute__(cls, str name not None):
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":             # <<<<<<<<<<<<<<
 *             return super().__getattribute__(name)
 *         return __FeedResult_union_type_enum_data.get_by_name(name)
 */
  __pyx_t_2 = __Pyx_PyUnicode_Tailmatch(__pyx_v_name, __pyx_n_u_, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 198, __pyx_L1_error)
  if (!(__pyx_t_2 != 0)) {
  } else {
    __pyx_t_1 = (__pyx_t_2 != 0);
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = __Pyx_PyUnicode_Tailmatch(__pyx_v_name, __pyx_n_u_fbthrift, 0, PY_SSIZE_T_MAX, -1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 198, __pyx_L1_error)
  if (!(__pyx_t_2 != 0)) {
  } else {
    __pyx_t_1 = (__pyx_t_2 != 0);
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_name, __pyx_n_u_mro, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 198, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "picard/types.pyx":199
 *     def __getattribute__(cls, str name not None):
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)             # <<<<<<<<<<<<<<
 *         return __FeedResult_union_type_enum_data.get_by_name(name)
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types___FeedResult_Union_TypeMeta));
    __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types___FeedResult_Union_TypeMeta));
    PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_ptype_6picard_5types___FeedResult_Union_TypeMeta));
    __Pyx_INCREF(((PyObject *)__pyx_v_cls));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_cls));
    PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_cls));
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_getattribute); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_4 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_v_name) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_name);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":198
 * 
 *     def __getattribute__(cls, str name not None):
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":             # <<<<<<<<<<<<<<
 *             return super().__getattribute__(name)
 *         return __FeedResult_union_type_enum_data.get_by_name(name)
 */
  }

  /* "picard/types.pyx":200
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)
 *         return __FeedResult_union_type_enum_data.get_by_name(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = ((struct __pyx_vtabstruct_6thrift_3py3_5types_UnionTypeEnumData *)__pyx_v_6picard_5types___FeedResult_union_type_enum_data->__pyx_base.__pyx_vtab)->__pyx_base.get_by_name(((struct __pyx_obj_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___FeedResult_union_type_enum_data), __pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":197
 *         return __FeedResult_union_type_enum_data.size()
 * 
 *     def __getattribute__(cls, str name not None):             # <<<<<<<<<<<<<<
 *         if name.startswith("__") or name.startswith("_fbthrift_") or name == "mro":
 *             return super().__getattribute__(name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.__FeedResult_Union_TypeMeta.__getattribute__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":206
 * @__cython.auto_pickle(False)
 * cdef class __FeedResultType(thrift.py3.types.CompiledEnum):
 *     cdef get_by_name(self, str name):             # <<<<<<<<<<<<<<
 *         return __FeedResult_union_type_enum_data.get_by_name(name)
 * 
 */

static PyObject *__pyx_f_6picard_5types_16__FeedResultType_get_by_name(CYTHON_UNUSED struct __pyx_obj_6picard_5types___FeedResultType *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_by_name", 0);

  /* "picard/types.pyx":207
 * cdef class __FeedResultType(thrift.py3.types.CompiledEnum):
 *     cdef get_by_name(self, str name):
 *         return __FeedResult_union_type_enum_data.get_by_name(name)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6thrift_3py3_5types_UnionTypeEnumData *)__pyx_v_6picard_5types___FeedResult_union_type_enum_data->__pyx_base.__pyx_vtab)->__pyx_base.get_by_name(((struct __pyx_obj_6thrift_3py3_5types_EnumData *)__pyx_v_6picard_5types___FeedResult_union_type_enum_data), __pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":206
 * @__cython.auto_pickle(False)
 * cdef class __FeedResultType(thrift.py3.types.CompiledEnum):
 *     cdef get_by_name(self, str name):             # <<<<<<<<<<<<<<
 *         return __FeedResult_union_type_enum_data.get_by_name(name)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.__FeedResultType.get_by_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":215
 * @__cython.auto_pickle(False)
 * cdef class SQLSchema(thrift.py3.types.Struct):
 *     def __init__(SQLSchema self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cSQLSchema]()
 *         self._fields_setter = _fbthrift_types_fields.__SQLSchema_FieldsSetter.create(self._cpp_obj.get())
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_9SQLSchema_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_9SQLSchema_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema___init__(((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_9SQLSchema___init__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::SQLSchema>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":216
 * cdef class SQLSchema(thrift.py3.types.Struct):
 *     def __init__(SQLSchema self, **kwargs):
 *         self._cpp_obj = make_shared[cSQLSchema]()             # <<<<<<<<<<<<<<
 *         self._fields_setter = _fbthrift_types_fields.__SQLSchema_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::SQLSchema>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 216, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":217
 *     def __init__(SQLSchema self, **kwargs):
 *         self._cpp_obj = make_shared[cSQLSchema]()
 *         self._fields_setter = _fbthrift_types_fields.__SQLSchema_FieldsSetter.create(self._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         super().__init__(**kwargs)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___SQLSchema_FieldsSetter->create(__pyx_v_self->_cpp_obj.get())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_fields_setter));
  __pyx_v_self->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":218
 *         self._cpp_obj = make_shared[cSQLSchema]()
 *         self._fields_setter = _fbthrift_types_fields.__SQLSchema_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def __call__(SQLSchema self, **kwargs):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_SQLSchema));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_SQLSchema));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_SQLSchema));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":215
 * @__cython.auto_pickle(False)
 * cdef class SQLSchema(thrift.py3.types.Struct):
 *     def __init__(SQLSchema self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cSQLSchema]()
 *         self._fields_setter = _fbthrift_types_fields.__SQLSchema_FieldsSetter.create(self._cpp_obj.get())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.SQLSchema.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":220
 *         super().__init__(**kwargs)
 * 
 *     def __call__(SQLSchema self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__call__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__call__", 1))) return NULL;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_2__call__(((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9SQLSchema_2__call__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v___fbthrift_inst = 0;
  PyObject *__pyx_v___fbthrift_name = NULL;
  PyObject *__pyx_v__fbthrift_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::shared_ptr<::cpp2::SQLSchema>  __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "picard/types.pyx":221
 * 
 *     def __call__(SQLSchema self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef SQLSchema __fbthrift_inst = SQLSchema.__new__(SQLSchema)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 221, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":222
 *     def __call__(SQLSchema self, **kwargs):
 *         if not kwargs:
 *             return self             # <<<<<<<<<<<<<<
 *         cdef SQLSchema __fbthrift_inst = SQLSchema.__new__(SQLSchema)
 *         __fbthrift_inst._cpp_obj = make_shared[cSQLSchema](deref(self._cpp_obj))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "picard/types.pyx":221
 * 
 *     def __call__(SQLSchema self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef SQLSchema __fbthrift_inst = SQLSchema.__new__(SQLSchema)
 */
  }

  /* "picard/types.pyx":223
 *         if not kwargs:
 *             return self
 *         cdef SQLSchema __fbthrift_inst = SQLSchema.__new__(SQLSchema)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = make_shared[cSQLSchema](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__SQLSchema_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 */
  __pyx_t_3 = ((PyObject *)__pyx_tp_new_6picard_5types_SQLSchema(((PyTypeObject *)__pyx_ptype_6picard_5types_SQLSchema), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":224
 *             return self
 *         cdef SQLSchema __fbthrift_inst = SQLSchema.__new__(SQLSchema)
 *         __fbthrift_inst._cpp_obj = make_shared[cSQLSchema](deref(self._cpp_obj))             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__SQLSchema_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 */
  try {
    __pyx_t_4 = std::make_shared<::cpp2::SQLSchema>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 224, __pyx_L1_error)
  }
  __pyx_v___fbthrift_inst->_cpp_obj = __pyx_t_4;

  /* "picard/types.pyx":225
 *         cdef SQLSchema __fbthrift_inst = SQLSchema.__new__(SQLSchema)
 *         __fbthrift_inst._cpp_obj = make_shared[cSQLSchema](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__SQLSchema_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 */
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___SQLSchema_FieldsSetter->create(__pyx_v___fbthrift_inst->_cpp_obj.get())); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v___fbthrift_inst->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v___fbthrift_inst->_fields_setter));
  __pyx_v___fbthrift_inst->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":226
 *         __fbthrift_inst._cpp_obj = make_shared[cSQLSchema](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__SQLSchema_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():             # <<<<<<<<<<<<<<
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst
 */
  __pyx_t_5 = 0;
  __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_kwargs, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_8;
  __pyx_t_8 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_6, &__pyx_t_5, &__pyx_t_8, &__pyx_t_9, NULL, __pyx_t_7);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 226, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v___fbthrift_name, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v__fbthrift_value, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "picard/types.pyx":227
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__SQLSchema_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v___fbthrift_name))||((__pyx_v___fbthrift_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v___fbthrift_name)->tp_name), 0))) __PYX_ERR(0, 227, __pyx_L1_error)
    ((struct __pyx_vtabstruct_6picard_5types_SQLSchema *)__pyx_v___fbthrift_inst->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_set_field(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v___fbthrift_inst), ((PyObject*)__pyx_v___fbthrift_name), __pyx_v__fbthrift_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "picard/types.pyx":228
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":220
 *         super().__init__(**kwargs)
 * 
 *     def __call__(SQLSchema self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("picard.types.SQLSchema.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XDECREF(__pyx_v___fbthrift_name);
  __Pyx_XDECREF(__pyx_v__fbthrift_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":230
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

static void __pyx_f_6picard_5types_9SQLSchema__fbthrift_set_field(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_set_field", 0);

  /* "picard/types.pyx":231
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 *         self._fields_setter.set_field(name.encode("utf-8"), value)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _fbthrift_isset(self):
 */
  if (unlikely(__pyx_v_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 231, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  ((struct __pyx_vtabstruct_6picard_12types_fields___SQLSchema_FieldsSetter *)__pyx_v_self->_fields_setter->__pyx_base.__pyx_vtab)->__pyx_base.set_field(((struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter *)__pyx_v_self->_fields_setter), __pyx_t_2, __pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":230
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.SQLSchema._fbthrift_set_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "picard/types.pyx":233
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("SQLSchema", {
 *           "columnNames": deref(self._cpp_obj).columnNames_ref().has_value(),
 */

static PyObject *__pyx_f_6picard_5types_9SQLSchema__fbthrift_isset(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_isset", 0);

  /* "picard/types.pyx":234
 * 
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("SQLSchema", {             # <<<<<<<<<<<<<<
 *           "columnNames": deref(self._cpp_obj).columnNames_ref().has_value(),
 *           "columnTypes": deref(self._cpp_obj).columnTypes_ref().has_value(),
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_thrift); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_py3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IsSet); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":235
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("SQLSchema", {
 *           "columnNames": deref(self._cpp_obj).columnNames_ref().has_value(),             # <<<<<<<<<<<<<<
 *           "columnTypes": deref(self._cpp_obj).columnTypes_ref().has_value(),
 *           "tableNames": deref(self._cpp_obj).tableNames_ref().has_value(),
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).columnNames_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_columnNames, __pyx_t_4) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":236
 *         return thrift.py3.types._IsSet("SQLSchema", {
 *           "columnNames": deref(self._cpp_obj).columnNames_ref().has_value(),
 *           "columnTypes": deref(self._cpp_obj).columnTypes_ref().has_value(),             # <<<<<<<<<<<<<<
 *           "tableNames": deref(self._cpp_obj).tableNames_ref().has_value(),
 *           "columnToTable": deref(self._cpp_obj).columnToTable_ref().has_value(),
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).columnTypes_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_columnTypes, __pyx_t_4) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":237
 *           "columnNames": deref(self._cpp_obj).columnNames_ref().has_value(),
 *           "columnTypes": deref(self._cpp_obj).columnTypes_ref().has_value(),
 *           "tableNames": deref(self._cpp_obj).tableNames_ref().has_value(),             # <<<<<<<<<<<<<<
 *           "columnToTable": deref(self._cpp_obj).columnToTable_ref().has_value(),
 *           "tableToColumns": deref(self._cpp_obj).tableToColumns_ref().has_value(),
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).tableNames_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_tableNames, __pyx_t_4) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":238
 *           "columnTypes": deref(self._cpp_obj).columnTypes_ref().has_value(),
 *           "tableNames": deref(self._cpp_obj).tableNames_ref().has_value(),
 *           "columnToTable": deref(self._cpp_obj).columnToTable_ref().has_value(),             # <<<<<<<<<<<<<<
 *           "tableToColumns": deref(self._cpp_obj).tableToColumns_ref().has_value(),
 *           "foreignKeys": deref(self._cpp_obj).foreignKeys_ref().has_value(),
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).columnToTable_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_columnToTable, __pyx_t_4) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":239
 *           "tableNames": deref(self._cpp_obj).tableNames_ref().has_value(),
 *           "columnToTable": deref(self._cpp_obj).columnToTable_ref().has_value(),
 *           "tableToColumns": deref(self._cpp_obj).tableToColumns_ref().has_value(),             # <<<<<<<<<<<<<<
 *           "foreignKeys": deref(self._cpp_obj).foreignKeys_ref().has_value(),
 *           "primaryKeys": deref(self._cpp_obj).primaryKeys_ref().has_value(),
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).tableToColumns_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_tableToColumns, __pyx_t_4) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":240
 *           "columnToTable": deref(self._cpp_obj).columnToTable_ref().has_value(),
 *           "tableToColumns": deref(self._cpp_obj).tableToColumns_ref().has_value(),
 *           "foreignKeys": deref(self._cpp_obj).foreignKeys_ref().has_value(),             # <<<<<<<<<<<<<<
 *           "primaryKeys": deref(self._cpp_obj).primaryKeys_ref().has_value(),
 *         })
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).foreignKeys_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_foreignKeys, __pyx_t_4) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":241
 *           "tableToColumns": deref(self._cpp_obj).tableToColumns_ref().has_value(),
 *           "foreignKeys": deref(self._cpp_obj).foreignKeys_ref().has_value(),
 *           "primaryKeys": deref(self._cpp_obj).primaryKeys_ref().has_value(),             # <<<<<<<<<<<<<<
 *         })
 * 
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).primaryKeys_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_primaryKeys, __pyx_t_4) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_SQLSchema, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_SQLSchema, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_SQLSchema);
    __Pyx_GIVEREF(__pyx_n_u_SQLSchema);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_n_u_SQLSchema);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":233
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("SQLSchema", {
 *           "columnNames": deref(self._cpp_obj).columnNames_ref().has_value(),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.SQLSchema._fbthrift_isset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":245
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cSQLSchema] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <SQLSchema>SQLSchema.__new__(SQLSchema)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

static PyObject *__pyx_f_6picard_5types_9SQLSchema_create(std::shared_ptr<::cpp2::SQLSchema>  __pyx_v_cpp_obj) {
  struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":246
 *     @staticmethod
 *     cdef create(shared_ptr[cSQLSchema] cpp_obj):
 *         __fbthrift_inst = <SQLSchema>SQLSchema.__new__(SQLSchema)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_SQLSchema(((PyTypeObject *)__pyx_ptype_6picard_5types_SQLSchema), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":247
 *     cdef create(shared_ptr[cSQLSchema] cpp_obj):
 *         __fbthrift_inst = <SQLSchema>SQLSchema.__new__(SQLSchema)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<::cpp2::SQLSchema> >(__pyx_v_cpp_obj);

  /* "picard/types.pyx":248
 *         __fbthrift_inst = <SQLSchema>SQLSchema.__new__(SQLSchema)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":245
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cSQLSchema] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <SQLSchema>SQLSchema.__new__(SQLSchema)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.SQLSchema.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":251
 * 
 *     @property
 *     def columnNames(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_columnNames is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_11columnNames_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_11columnNames_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_11columnNames___get__(((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9SQLSchema_11columnNames___get__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":253
 *     def columnNames(self):
 * 
 *         if self.__fbthrift_cached_columnNames is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_columnNames = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).columnNames_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_columnNames
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_columnNames) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":254
 * 
 *         if self.__fbthrift_cached_columnNames is None:
 *             self.__fbthrift_cached_columnNames = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).columnNames_ref().ref(), self._cpp_obj))             # <<<<<<<<<<<<<<
 *         return self.__fbthrift_cached_columnNames
 * 
 */
    __pyx_t_3 = __pyx_f_6picard_5types_18Map__string_string_create(::thrift::py3::reference_shared_ptr<std::map<std::string,std::string>  &>((*__pyx_v_self->_cpp_obj).columnNames_ref().value(), __pyx_v_self->_cpp_obj)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6picard_5types_Map__string_string))))) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->__pyx___fbthrift_cached_columnNames);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_columnNames));
    __pyx_v_self->__pyx___fbthrift_cached_columnNames = ((struct __pyx_obj_6picard_5types_Map__string_string *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "picard/types.pyx":253
 *     def columnNames(self):
 * 
 *         if self.__fbthrift_cached_columnNames is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_columnNames = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).columnNames_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_columnNames
 */
  }

  /* "picard/types.pyx":255
 *         if self.__fbthrift_cached_columnNames is None:
 *             self.__fbthrift_cached_columnNames = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).columnNames_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_columnNames             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_columnNames));
  __pyx_r = ((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_columnNames);
  goto __pyx_L0;

  /* "picard/types.pyx":251
 * 
 *     @property
 *     def columnNames(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_columnNames is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.SQLSchema.columnNames.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":258
 * 
 *     @property
 *     def columnTypes(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_columnTypes is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_11columnTypes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_11columnTypes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_11columnTypes___get__(((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9SQLSchema_11columnTypes___get__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":260
 *     def columnTypes(self):
 * 
 *         if self.__fbthrift_cached_columnTypes is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_columnTypes = Map__string_ColumnType.create(__reference_shared_ptr(deref(self._cpp_obj).columnTypes_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_columnTypes
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_columnTypes) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":261
 * 
 *         if self.__fbthrift_cached_columnTypes is None:
 *             self.__fbthrift_cached_columnTypes = Map__string_ColumnType.create(__reference_shared_ptr(deref(self._cpp_obj).columnTypes_ref().ref(), self._cpp_obj))             # <<<<<<<<<<<<<<
 *         return self.__fbthrift_cached_columnTypes
 * 
 */
    __pyx_t_3 = __pyx_f_6picard_5types_22Map__string_ColumnType_create(::thrift::py3::reference_shared_ptr<std::map<std::string,::cpp2::ColumnType>  &>((*__pyx_v_self->_cpp_obj).columnTypes_ref().value(), __pyx_v_self->_cpp_obj)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6picard_5types_Map__string_ColumnType))))) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->__pyx___fbthrift_cached_columnTypes);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_columnTypes));
    __pyx_v_self->__pyx___fbthrift_cached_columnTypes = ((struct __pyx_obj_6picard_5types_Map__string_ColumnType *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "picard/types.pyx":260
 *     def columnTypes(self):
 * 
 *         if self.__fbthrift_cached_columnTypes is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_columnTypes = Map__string_ColumnType.create(__reference_shared_ptr(deref(self._cpp_obj).columnTypes_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_columnTypes
 */
  }

  /* "picard/types.pyx":262
 *         if self.__fbthrift_cached_columnTypes is None:
 *             self.__fbthrift_cached_columnTypes = Map__string_ColumnType.create(__reference_shared_ptr(deref(self._cpp_obj).columnTypes_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_columnTypes             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_columnTypes));
  __pyx_r = ((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_columnTypes);
  goto __pyx_L0;

  /* "picard/types.pyx":258
 * 
 *     @property
 *     def columnTypes(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_columnTypes is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.SQLSchema.columnTypes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":265
 * 
 *     @property
 *     def tableNames(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_tableNames is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_10tableNames_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_10tableNames_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_10tableNames___get__(((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9SQLSchema_10tableNames___get__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":267
 *     def tableNames(self):
 * 
 *         if self.__fbthrift_cached_tableNames is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_tableNames = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).tableNames_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_tableNames
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_tableNames) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":268
 * 
 *         if self.__fbthrift_cached_tableNames is None:
 *             self.__fbthrift_cached_tableNames = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).tableNames_ref().ref(), self._cpp_obj))             # <<<<<<<<<<<<<<
 *         return self.__fbthrift_cached_tableNames
 * 
 */
    __pyx_t_3 = __pyx_f_6picard_5types_18Map__string_string_create(::thrift::py3::reference_shared_ptr<std::map<std::string,std::string>  &>((*__pyx_v_self->_cpp_obj).tableNames_ref().value(), __pyx_v_self->_cpp_obj)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6picard_5types_Map__string_string))))) __PYX_ERR(0, 268, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->__pyx___fbthrift_cached_tableNames);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_tableNames));
    __pyx_v_self->__pyx___fbthrift_cached_tableNames = ((struct __pyx_obj_6picard_5types_Map__string_string *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "picard/types.pyx":267
 *     def tableNames(self):
 * 
 *         if self.__fbthrift_cached_tableNames is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_tableNames = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).tableNames_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_tableNames
 */
  }

  /* "picard/types.pyx":269
 *         if self.__fbthrift_cached_tableNames is None:
 *             self.__fbthrift_cached_tableNames = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).tableNames_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_tableNames             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_tableNames));
  __pyx_r = ((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_tableNames);
  goto __pyx_L0;

  /* "picard/types.pyx":265
 * 
 *     @property
 *     def tableNames(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_tableNames is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.SQLSchema.tableNames.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":272
 * 
 *     @property
 *     def columnToTable(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_columnToTable is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_13columnToTable_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_13columnToTable_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_13columnToTable___get__(((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9SQLSchema_13columnToTable___get__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":274
 *     def columnToTable(self):
 * 
 *         if self.__fbthrift_cached_columnToTable is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_columnToTable = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).columnToTable_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_columnToTable
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_columnToTable) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":275
 * 
 *         if self.__fbthrift_cached_columnToTable is None:
 *             self.__fbthrift_cached_columnToTable = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).columnToTable_ref().ref(), self._cpp_obj))             # <<<<<<<<<<<<<<
 *         return self.__fbthrift_cached_columnToTable
 * 
 */
    __pyx_t_3 = __pyx_f_6picard_5types_18Map__string_string_create(::thrift::py3::reference_shared_ptr<std::map<std::string,std::string>  &>((*__pyx_v_self->_cpp_obj).columnToTable_ref().value(), __pyx_v_self->_cpp_obj)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6picard_5types_Map__string_string))))) __PYX_ERR(0, 275, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->__pyx___fbthrift_cached_columnToTable);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_columnToTable));
    __pyx_v_self->__pyx___fbthrift_cached_columnToTable = ((struct __pyx_obj_6picard_5types_Map__string_string *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "picard/types.pyx":274
 *     def columnToTable(self):
 * 
 *         if self.__fbthrift_cached_columnToTable is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_columnToTable = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).columnToTable_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_columnToTable
 */
  }

  /* "picard/types.pyx":276
 *         if self.__fbthrift_cached_columnToTable is None:
 *             self.__fbthrift_cached_columnToTable = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).columnToTable_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_columnToTable             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_columnToTable));
  __pyx_r = ((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_columnToTable);
  goto __pyx_L0;

  /* "picard/types.pyx":272
 * 
 *     @property
 *     def columnToTable(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_columnToTable is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.SQLSchema.columnToTable.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":279
 * 
 *     @property
 *     def tableToColumns(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_tableToColumns is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_14tableToColumns_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_14tableToColumns_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_14tableToColumns___get__(((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9SQLSchema_14tableToColumns___get__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":281
 *     def tableToColumns(self):
 * 
 *         if self.__fbthrift_cached_tableToColumns is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_tableToColumns = Map__string_List__string.create(__reference_shared_ptr(deref(self._cpp_obj).tableToColumns_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_tableToColumns
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_tableToColumns) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":282
 * 
 *         if self.__fbthrift_cached_tableToColumns is None:
 *             self.__fbthrift_cached_tableToColumns = Map__string_List__string.create(__reference_shared_ptr(deref(self._cpp_obj).tableToColumns_ref().ref(), self._cpp_obj))             # <<<<<<<<<<<<<<
 *         return self.__fbthrift_cached_tableToColumns
 * 
 */
    __pyx_t_3 = __pyx_f_6picard_5types_24Map__string_List__string_create(::thrift::py3::reference_shared_ptr<std::map<std::string,std::vector<std::string> >  &>((*__pyx_v_self->_cpp_obj).tableToColumns_ref().value(), __pyx_v_self->_cpp_obj)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6picard_5types_Map__string_List__string))))) __PYX_ERR(0, 282, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->__pyx___fbthrift_cached_tableToColumns);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_tableToColumns));
    __pyx_v_self->__pyx___fbthrift_cached_tableToColumns = ((struct __pyx_obj_6picard_5types_Map__string_List__string *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "picard/types.pyx":281
 *     def tableToColumns(self):
 * 
 *         if self.__fbthrift_cached_tableToColumns is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_tableToColumns = Map__string_List__string.create(__reference_shared_ptr(deref(self._cpp_obj).tableToColumns_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_tableToColumns
 */
  }

  /* "picard/types.pyx":283
 *         if self.__fbthrift_cached_tableToColumns is None:
 *             self.__fbthrift_cached_tableToColumns = Map__string_List__string.create(__reference_shared_ptr(deref(self._cpp_obj).tableToColumns_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_tableToColumns             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_tableToColumns));
  __pyx_r = ((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_tableToColumns);
  goto __pyx_L0;

  /* "picard/types.pyx":279
 * 
 *     @property
 *     def tableToColumns(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_tableToColumns is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.SQLSchema.tableToColumns.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":286
 * 
 *     @property
 *     def foreignKeys(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_foreignKeys is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_11foreignKeys_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_11foreignKeys_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_11foreignKeys___get__(((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9SQLSchema_11foreignKeys___get__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":288
 *     def foreignKeys(self):
 * 
 *         if self.__fbthrift_cached_foreignKeys is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_foreignKeys = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).foreignKeys_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_foreignKeys
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_foreignKeys) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":289
 * 
 *         if self.__fbthrift_cached_foreignKeys is None:
 *             self.__fbthrift_cached_foreignKeys = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).foreignKeys_ref().ref(), self._cpp_obj))             # <<<<<<<<<<<<<<
 *         return self.__fbthrift_cached_foreignKeys
 * 
 */
    __pyx_t_3 = __pyx_f_6picard_5types_18Map__string_string_create(::thrift::py3::reference_shared_ptr<std::map<std::string,std::string>  &>((*__pyx_v_self->_cpp_obj).foreignKeys_ref().value(), __pyx_v_self->_cpp_obj)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6picard_5types_Map__string_string))))) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->__pyx___fbthrift_cached_foreignKeys);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_foreignKeys));
    __pyx_v_self->__pyx___fbthrift_cached_foreignKeys = ((struct __pyx_obj_6picard_5types_Map__string_string *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "picard/types.pyx":288
 *     def foreignKeys(self):
 * 
 *         if self.__fbthrift_cached_foreignKeys is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_foreignKeys = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).foreignKeys_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_foreignKeys
 */
  }

  /* "picard/types.pyx":290
 *         if self.__fbthrift_cached_foreignKeys is None:
 *             self.__fbthrift_cached_foreignKeys = Map__string_string.create(__reference_shared_ptr(deref(self._cpp_obj).foreignKeys_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_foreignKeys             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_foreignKeys));
  __pyx_r = ((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_foreignKeys);
  goto __pyx_L0;

  /* "picard/types.pyx":286
 * 
 *     @property
 *     def foreignKeys(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_foreignKeys is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.SQLSchema.foreignKeys.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":293
 * 
 *     @property
 *     def primaryKeys(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_primaryKeys is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_11primaryKeys_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_11primaryKeys_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_11primaryKeys___get__(((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9SQLSchema_11primaryKeys___get__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":295
 *     def primaryKeys(self):
 * 
 *         if self.__fbthrift_cached_primaryKeys is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_primaryKeys = List__string.create(__reference_shared_ptr(deref(self._cpp_obj).primaryKeys_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_primaryKeys
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_primaryKeys) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":296
 * 
 *         if self.__fbthrift_cached_primaryKeys is None:
 *             self.__fbthrift_cached_primaryKeys = List__string.create(__reference_shared_ptr(deref(self._cpp_obj).primaryKeys_ref().ref(), self._cpp_obj))             # <<<<<<<<<<<<<<
 *         return self.__fbthrift_cached_primaryKeys
 * 
 */
    __pyx_t_3 = __pyx_f_6picard_5types_12List__string_create(::thrift::py3::reference_shared_ptr<std::vector<std::string>  &>((*__pyx_v_self->_cpp_obj).primaryKeys_ref().value(), __pyx_v_self->_cpp_obj)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6picard_5types_List__string))))) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->__pyx___fbthrift_cached_primaryKeys);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_primaryKeys));
    __pyx_v_self->__pyx___fbthrift_cached_primaryKeys = ((struct __pyx_obj_6picard_5types_List__string *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "picard/types.pyx":295
 *     def primaryKeys(self):
 * 
 *         if self.__fbthrift_cached_primaryKeys is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_primaryKeys = List__string.create(__reference_shared_ptr(deref(self._cpp_obj).primaryKeys_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_primaryKeys
 */
  }

  /* "picard/types.pyx":297
 *         if self.__fbthrift_cached_primaryKeys is None:
 *             self.__fbthrift_cached_primaryKeys = List__string.create(__reference_shared_ptr(deref(self._cpp_obj).primaryKeys_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_primaryKeys             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_primaryKeys));
  __pyx_r = ((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_primaryKeys);
  goto __pyx_L0;

  /* "picard/types.pyx":293
 * 
 *     @property
 *     def primaryKeys(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_primaryKeys is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.SQLSchema.primaryKeys.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":300
 * 
 * 
 *     def __hash__(SQLSchema self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6picard_5types_9SQLSchema_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6picard_5types_9SQLSchema_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_4__hash__(((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6picard_5types_9SQLSchema_4__hash__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "picard/types.pyx":301
 * 
 *     def __hash__(SQLSchema self):
 *         return  super().__hash__()             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(SQLSchema self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_SQLSchema));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_SQLSchema));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_SQLSchema));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "picard/types.pyx":300
 * 
 * 
 *     def __hash__(SQLSchema self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.SQLSchema.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":303
 *         return  super().__hash__()
 * 
 *     def __copy__(SQLSchema self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cSQLSchema] cpp_obj = make_shared[cSQLSchema](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_6__copy__(((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9SQLSchema_6__copy__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self) {
  std::shared_ptr<::cpp2::SQLSchema>  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::SQLSchema>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":304
 * 
 *     def __copy__(SQLSchema self):
 *         cdef shared_ptr[cSQLSchema] cpp_obj = make_shared[cSQLSchema](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::SQLSchema>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 304, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":307
 *             deref(self._cpp_obj)
 *         )
 *         return SQLSchema.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_9SQLSchema_create(cython_std::move<std::shared_ptr<::cpp2::SQLSchema> >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":303
 *         return  super().__hash__()
 * 
 *     def __copy__(SQLSchema self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cSQLSchema] cpp_obj = make_shared[cSQLSchema](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.SQLSchema.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":309
 *         return SQLSchema.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cSQLSchema](
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_8__richcmp__(((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9SQLSchema_8__richcmp__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "picard/types.pyx":310
 * 
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)             # <<<<<<<<<<<<<<
 *         return __richcmp[cSQLSchema](
 *             self._cpp_obj,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_SQLSchema *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_cmp_sametype(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":311
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cSQLSchema](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<SQLSchema>other)._cpp_obj,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":315
 *             (<SQLSchema>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = (__pyx_v_r == Py_None);
  if ((__pyx_t_2 != 0)) {

    /* "picard/types.pyx":311
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cSQLSchema](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<SQLSchema>other)._cpp_obj,
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(::thrift::py3::richcmp<::cpp2::SQLSchema>(__pyx_v_self->_cpp_obj, ((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_v_other)->_cpp_obj, __pyx_v_op)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "picard/types.pyx":315
 *             (<SQLSchema>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_1 = __pyx_v_r;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":309
 *         return SQLSchema.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cSQLSchema](
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.SQLSchema.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":318
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__SQLSchema()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_9SQLSchema_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_9SQLSchema_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9SQLSchema_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":319
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__SQLSchema()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__SQLSchema()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":318
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__SQLSchema()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.SQLSchema.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":322
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cSQLSchema].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_9SQLSchema_13__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_9SQLSchema_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_12__get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9SQLSchema_12__get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":324
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cSQLSchema].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::StructMetadata<::cpp2::SQLSchema> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":325
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cSQLSchema].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":322
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cSQLSchema].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.SQLSchema.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":328
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.SQLSchema"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_9SQLSchema_15__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_9SQLSchema_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_9SQLSchema_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_14__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9SQLSchema_14__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":329
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.SQLSchema"             # <<<<<<<<<<<<<<
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_SQLSchema);
  __pyx_r = __pyx_kp_u_picard_SQLSchema;
  goto __pyx_L0;

  /* "picard/types.pyx":328
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.SQLSchema"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":331
 *         return "picard.SQLSchema"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cSQLSchema](idx)
 * 
 */

static std::string_view __pyx_f_6picard_5types_9SQLSchema__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self, size_t __pyx_v_idx) {
  std::string_view __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string_view __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_field_name_by_index", 0);

  /* "picard/types.pyx":332
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 *         return __get_field_name_by_index[cSQLSchema](idx)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  try {
    __pyx_t_1 = ::thrift::py3::get_field_name_by_index<::cpp2::SQLSchema>(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 332, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "picard/types.pyx":331
 *         return "picard.SQLSchema"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cSQLSchema](idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("picard.types.SQLSchema._fbthrift_get_field_name_by_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":334
 *         return __get_field_name_by_index[cSQLSchema](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 7
 * 
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_9SQLSchema_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_9SQLSchema_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6picard_5types_9SQLSchema_16__cinit__(((struct __pyx_obj_6picard_5types_SQLSchema *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_9SQLSchema_16__cinit__(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "picard/types.pyx":335
 * 
 *     def __cinit__(self):
 *         self._fbthrift_struct_size = 7             # <<<<<<<<<<<<<<
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(SQLSchema self, __Protocol proto):
 */
  __pyx_v_self->__pyx_base._fbthrift_struct_size = 7;

  /* "picard/types.pyx":334
 *         return __get_field_name_by_index[cSQLSchema](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 7
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":337
 *         self._fbthrift_struct_size = 7
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(SQLSchema self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_9SQLSchema__serialize(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  std::unique_ptr<folly::IOBuf>  __pyx_v_data;
  struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::unique_ptr<folly::IOBuf>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_serialize", 0);

  /* "picard/types.pyx":339
 *     cdef _fbthrift_iobuf.IOBuf _serialize(SQLSchema self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cSQLSchema](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":340
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 *             data = cmove(serializer.cserialize[cSQLSchema](self._cpp_obj.get(), proto))             # <<<<<<<<<<<<<<
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 */
        try {
          __pyx_t_1 = ::thrift::py3::serialize<::cpp2::SQLSchema>(__pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 340, __pyx_L4_error)
        }
        __pyx_v_data = cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_t_1);
      }

      /* "picard/types.pyx":339
 *     cdef _fbthrift_iobuf.IOBuf _serialize(SQLSchema self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cSQLSchema](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":341
 *         with nogil:
 *             data = cmove(serializer.cserialize[cSQLSchema](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))             # <<<<<<<<<<<<<<
 * 
 *     cdef cuint32_t _deserialize(SQLSchema self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = ((PyObject *)__pyx_f_5folly_5iobuf_from_unique_ptr(cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_v_data))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_5folly_5iobuf_IOBuf *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":337
 *         self._fbthrift_struct_size = 7
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(SQLSchema self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.SQLSchema._serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":343
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(SQLSchema self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cSQLSchema]()
 */

static uint32_t __pyx_f_6picard_5types_9SQLSchema__deserialize(struct __pyx_obj_6picard_5types_SQLSchema *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  uint32_t __pyx_v_needed;
  uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::SQLSchema>  __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_deserialize", 0);

  /* "picard/types.pyx":345
 *     cdef cuint32_t _deserialize(SQLSchema self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cSQLSchema]()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             needed = serializer.cdeserialize[cSQLSchema](buf, self._cpp_obj.get(), proto)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::SQLSchema>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 345, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":346
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cSQLSchema]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cSQLSchema](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":347
 *         self._cpp_obj = make_shared[cSQLSchema]()
 *         with nogil:
 *             needed = serializer.cdeserialize[cSQLSchema](buf, self._cpp_obj.get(), proto)             # <<<<<<<<<<<<<<
 *         return needed
 * 
 */
        try {
          __pyx_t_2 = ::thrift::py3::deserialize<::cpp2::SQLSchema>(__pyx_v_buf, __pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 347, __pyx_L4_error)
        }
        __pyx_v_needed = __pyx_t_2;
      }

      /* "picard/types.pyx":346
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cSQLSchema]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cSQLSchema](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":348
 *         with nogil:
 *             needed = serializer.cdeserialize[cSQLSchema](buf, self._cpp_obj.get(), proto)
 *         return needed             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_needed;
  goto __pyx_L0;

  /* "picard/types.pyx":343
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(SQLSchema self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cSQLSchema]()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.SQLSchema._deserialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":353
 * @__cython.auto_pickle(False)
 * cdef class RegisterSQLSchemaException(thrift.py3.exceptions.GeneratedError):
 *     def __init__(RegisterSQLSchemaException self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cRegisterSQLSchemaException]()
 *         self._fields_setter = _fbthrift_types_fields.__RegisterSQLSchemaException_FieldsSetter.create(self._cpp_obj.get())
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_26RegisterSQLSchemaException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_26RegisterSQLSchemaException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6picard_5types_26RegisterSQLSchemaException___init__(((struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_26RegisterSQLSchemaException___init__(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::RegisterSQLSchemaException>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":354
 * cdef class RegisterSQLSchemaException(thrift.py3.exceptions.GeneratedError):
 *     def __init__(RegisterSQLSchemaException self, *args, **kwargs):
 *         self._cpp_obj = make_shared[cRegisterSQLSchemaException]()             # <<<<<<<<<<<<<<
 *         self._fields_setter = _fbthrift_types_fields.__RegisterSQLSchemaException_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__( *args, **kwargs)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::RegisterSQLSchemaException>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 354, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":355
 *     def __init__(RegisterSQLSchemaException self, *args, **kwargs):
 *         self._cpp_obj = make_shared[cRegisterSQLSchemaException]()
 *         self._fields_setter = _fbthrift_types_fields.__RegisterSQLSchemaException_FieldsSetter.create(self._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         super().__init__( *args, **kwargs)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter->create(__pyx_v_self->_cpp_obj.get())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_fields_setter));
  __pyx_v_self->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":356
 *         self._cpp_obj = make_shared[cRegisterSQLSchemaException]()
 *         self._fields_setter = _fbthrift_types_fields.__RegisterSQLSchemaException_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__( *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":353
 * @__cython.auto_pickle(False)
 * cdef class RegisterSQLSchemaException(thrift.py3.exceptions.GeneratedError):
 *     def __init__(RegisterSQLSchemaException self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cRegisterSQLSchemaException]()
 *         self._fields_setter = _fbthrift_types_fields.__RegisterSQLSchemaException_FieldsSetter.create(self._cpp_obj.get())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.RegisterSQLSchemaException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":358
 *         super().__init__( *args, **kwargs)
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

static void __pyx_f_6picard_5types_26RegisterSQLSchemaException__fbthrift_set_field(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_set_field", 0);

  /* "picard/types.pyx":359
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 *         self._fields_setter.set_field(name.encode("utf-8"), value)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _fbthrift_isset(self):
 */
  if (unlikely(__pyx_v_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 359, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 359, __pyx_L1_error)
  ((struct __pyx_vtabstruct_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter *)__pyx_v_self->_fields_setter->__pyx_base.__pyx_vtab)->__pyx_base.set_field(((struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter *)__pyx_v_self->_fields_setter), __pyx_t_2, __pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":358
 *         super().__init__( *args, **kwargs)
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.RegisterSQLSchemaException._fbthrift_set_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "picard/types.pyx":361
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("RegisterSQLSchemaException", {
 *           "dbId": deref(self._cpp_obj).dbId_ref().has_value(),
 */

static PyObject *__pyx_f_6picard_5types_26RegisterSQLSchemaException__fbthrift_isset(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_isset", 0);

  /* "picard/types.pyx":362
 * 
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("RegisterSQLSchemaException", {             # <<<<<<<<<<<<<<
 *           "dbId": deref(self._cpp_obj).dbId_ref().has_value(),
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_thrift); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_py3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IsSet); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":363
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("RegisterSQLSchemaException", {
 *           "dbId": deref(self._cpp_obj).dbId_ref().has_value(),             # <<<<<<<<<<<<<<
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 *         })
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).dbId_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_dbId, __pyx_t_4) < 0) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":364
 *         return thrift.py3.types._IsSet("RegisterSQLSchemaException", {
 *           "dbId": deref(self._cpp_obj).dbId_ref().has_value(),
 *           "message": deref(self._cpp_obj).message_ref().has_value(),             # <<<<<<<<<<<<<<
 *         })
 * 
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).message_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_message, __pyx_t_4) < 0) __PYX_ERR(0, 363, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_RegisterSQLSchemaException, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_RegisterSQLSchemaException, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_RegisterSQLSchemaException);
    __Pyx_GIVEREF(__pyx_n_u_RegisterSQLSchemaException);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_n_u_RegisterSQLSchemaException);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":361
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("RegisterSQLSchemaException", {
 *           "dbId": deref(self._cpp_obj).dbId_ref().has_value(),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.RegisterSQLSchemaException._fbthrift_isset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6picard_5types_26RegisterSQLSchemaException_6create_2generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "picard/types.pyx":371
 *         __fbthrift_inst = <RegisterSQLSchemaException>RegisterSQLSchemaException.__new__(RegisterSQLSchemaException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */

static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_6create_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr *)__pyx_tp_new_6picard_5types___pyx_scope_struct_1_genexpr(__pyx_ptype_6picard_5types___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 371, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct__create *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6picard_5types_26RegisterSQLSchemaException_6create_2generator9, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_RegisterSQLSchemaException_creat, __pyx_n_s_picard_types); if (unlikely(!gen)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.RegisterSQLSchemaException.create.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6picard_5types_26RegisterSQLSchemaException_6create_2generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 371, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst)) { __Pyx_RaiseClosureNameError("__fbthrift_inst"); __PYX_ERR(0, 371, __pyx_L1_error) }
  if (likely(PyList_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst))) || PyTuple_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst))) {
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 371, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 371, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 371, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 371, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 371, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 371, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 371, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v__);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_v);
    __pyx_r = __pyx_cur_scope->__pyx_v_v;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 371, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":368
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cRegisterSQLSchemaException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <RegisterSQLSchemaException>RegisterSQLSchemaException.__new__(RegisterSQLSchemaException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

static PyObject *__pyx_f_6picard_5types_26RegisterSQLSchemaException_create(std::shared_ptr<::cpp2::RegisterSQLSchemaException>  __pyx_v_cpp_obj) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct__create *__pyx_cur_scope;
  PyObject *__pyx_gb_6picard_5types_26RegisterSQLSchemaException_6create_2generator9 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct__create *)__pyx_tp_new_6picard_5types___pyx_scope_struct__create(__pyx_ptype_6picard_5types___pyx_scope_struct__create, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct__create *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 368, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "picard/types.pyx":369
 *     @staticmethod
 *     cdef create(shared_ptr[cRegisterSQLSchemaException] cpp_obj):
 *         __fbthrift_inst = <RegisterSQLSchemaException>RegisterSQLSchemaException.__new__(RegisterSQLSchemaException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString((*__pyx_v_cpp_obj).what()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 369, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_6picard_5types_RegisterSQLSchemaException(((PyTypeObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException), __pyx_t_1, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((PyObject *)__pyx_t_2);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":370
 *     cdef create(shared_ptr[cRegisterSQLSchemaException] cpp_obj):
 *         __fbthrift_inst = <RegisterSQLSchemaException>RegisterSQLSchemaException.__new__(RegisterSQLSchemaException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)             # <<<<<<<<<<<<<<
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))
 *         return __fbthrift_inst
 */
  __pyx_cur_scope->__pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<::cpp2::RegisterSQLSchemaException> >(__pyx_v_cpp_obj);

  /* "picard/types.pyx":371
 *         __fbthrift_inst = <RegisterSQLSchemaException>RegisterSQLSchemaException.__new__(RegisterSQLSchemaException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_builtins); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Exception); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst));
  __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst));
  __pyx_t_3 = __pyx_pf_6picard_5types_26RegisterSQLSchemaException_6create_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":372
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":368
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cRegisterSQLSchemaException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <RegisterSQLSchemaException>RegisterSQLSchemaException.__new__(RegisterSQLSchemaException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.RegisterSQLSchemaException.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_6picard_5types_26RegisterSQLSchemaException_6create_2generator9);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":375
 * 
 *     @property
 *     def dbId(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).dbId_ref().value()).decode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_26RegisterSQLSchemaException_4dbId_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_26RegisterSQLSchemaException_4dbId_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_26RegisterSQLSchemaException_4dbId___get__(((struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_4dbId___get__(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":377
 *     def dbId(self):
 * 
 *         return (<bytes>deref(self._cpp_obj).dbId_ref().value()).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->_cpp_obj).dbId_ref().value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 377, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":375
 * 
 *     @property
 *     def dbId(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).dbId_ref().value()).decode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.RegisterSQLSchemaException.dbId.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":380
 * 
 *     @property
 *     def message(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_26RegisterSQLSchemaException_7message_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_26RegisterSQLSchemaException_7message_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_26RegisterSQLSchemaException_7message___get__(((struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_7message___get__(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":382
 *     def message(self):
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->_cpp_obj).message_ref().value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 382, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":380
 * 
 *     @property
 *     def message(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.RegisterSQLSchemaException.message.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":385
 * 
 * 
 *     def __hash__(RegisterSQLSchemaException self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6picard_5types_26RegisterSQLSchemaException_3__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6picard_5types_26RegisterSQLSchemaException_3__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_26RegisterSQLSchemaException_2__hash__(((struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6picard_5types_26RegisterSQLSchemaException_2__hash__(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "picard/types.pyx":386
 * 
 *     def __hash__(RegisterSQLSchemaException self):
 *         return  super().__hash__()             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(RegisterSQLSchemaException self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "picard/types.pyx":385
 * 
 * 
 *     def __hash__(RegisterSQLSchemaException self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.RegisterSQLSchemaException.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":388
 *         return  super().__hash__()
 * 
 *     def __copy__(RegisterSQLSchemaException self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cRegisterSQLSchemaException] cpp_obj = make_shared[cRegisterSQLSchemaException](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_26RegisterSQLSchemaException_5__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_26RegisterSQLSchemaException_5__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_26RegisterSQLSchemaException_4__copy__(((struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_4__copy__(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self) {
  std::shared_ptr<::cpp2::RegisterSQLSchemaException>  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::RegisterSQLSchemaException>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":389
 * 
 *     def __copy__(RegisterSQLSchemaException self):
 *         cdef shared_ptr[cRegisterSQLSchemaException] cpp_obj = make_shared[cRegisterSQLSchemaException](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::RegisterSQLSchemaException>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 389, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":392
 *             deref(self._cpp_obj)
 *         )
 *         return RegisterSQLSchemaException.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_26RegisterSQLSchemaException_create(cython_std::move<std::shared_ptr<::cpp2::RegisterSQLSchemaException> >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":388
 *         return  super().__hash__()
 * 
 *     def __copy__(RegisterSQLSchemaException self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cRegisterSQLSchemaException] cpp_obj = make_shared[cRegisterSQLSchemaException](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.RegisterSQLSchemaException.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":394
 *         return RegisterSQLSchemaException.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cRegisterSQLSchemaException](
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_26RegisterSQLSchemaException_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6picard_5types_26RegisterSQLSchemaException_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_26RegisterSQLSchemaException_6__richcmp__(((struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_6__richcmp__(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "picard/types.pyx":395
 * 
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)             # <<<<<<<<<<<<<<
 *         return __richcmp[cRegisterSQLSchemaException](
 *             self._cpp_obj,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_RegisterSQLSchemaException *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_cmp_sametype(((struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":396
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cRegisterSQLSchemaException](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<RegisterSQLSchemaException>other)._cpp_obj,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":400
 *             (<RegisterSQLSchemaException>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = (__pyx_v_r == Py_None);
  if ((__pyx_t_2 != 0)) {

    /* "picard/types.pyx":396
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cRegisterSQLSchemaException](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<RegisterSQLSchemaException>other)._cpp_obj,
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(::thrift::py3::richcmp<::cpp2::RegisterSQLSchemaException>(__pyx_v_self->_cpp_obj, ((struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *)__pyx_v_other)->_cpp_obj, __pyx_v_op)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "picard/types.pyx":400
 *             (<RegisterSQLSchemaException>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_1 = __pyx_v_r;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":394
 *         return RegisterSQLSchemaException.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cRegisterSQLSchemaException](
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.RegisterSQLSchemaException.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":403
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__RegisterSQLSchemaException()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_26RegisterSQLSchemaException_9__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_26RegisterSQLSchemaException_9__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_26RegisterSQLSchemaException_9__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_26RegisterSQLSchemaException_9__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_26RegisterSQLSchemaException_8__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_8__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":404
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__RegisterSQLSchemaException()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__RegisterSQLSchemaException()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":403
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__RegisterSQLSchemaException()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.RegisterSQLSchemaException.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":407
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cRegisterSQLSchemaException].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_26RegisterSQLSchemaException_11__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_26RegisterSQLSchemaException_11__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_26RegisterSQLSchemaException_11__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_26RegisterSQLSchemaException_11__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_26RegisterSQLSchemaException_10__get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_10__get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":409
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cRegisterSQLSchemaException].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::ExceptionMetadata<::cpp2::RegisterSQLSchemaException> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":410
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cRegisterSQLSchemaException].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":407
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cRegisterSQLSchemaException].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.RegisterSQLSchemaException.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":413
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.RegisterSQLSchemaException"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_26RegisterSQLSchemaException_13__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_26RegisterSQLSchemaException_13__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_26RegisterSQLSchemaException_13__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_26RegisterSQLSchemaException_13__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_26RegisterSQLSchemaException_12__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_26RegisterSQLSchemaException_12__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":414
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.RegisterSQLSchemaException"             # <<<<<<<<<<<<<<
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_RegisterSQLSchemaExceptio);
  __pyx_r = __pyx_kp_u_picard_RegisterSQLSchemaExceptio;
  goto __pyx_L0;

  /* "picard/types.pyx":413
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.RegisterSQLSchemaException"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":416
 *         return "picard.RegisterSQLSchemaException"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cRegisterSQLSchemaException](idx)
 * 
 */

static std::string_view __pyx_f_6picard_5types_26RegisterSQLSchemaException__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self, size_t __pyx_v_idx) {
  std::string_view __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string_view __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_field_name_by_index", 0);

  /* "picard/types.pyx":417
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 *         return __get_field_name_by_index[cRegisterSQLSchemaException](idx)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  try {
    __pyx_t_1 = ::thrift::py3::get_field_name_by_index<::cpp2::RegisterSQLSchemaException>(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 417, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "picard/types.pyx":416
 *         return "picard.RegisterSQLSchemaException"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cRegisterSQLSchemaException](idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("picard.types.RegisterSQLSchemaException._fbthrift_get_field_name_by_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":419
 *         return __get_field_name_by_index[cRegisterSQLSchemaException](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 2
 * 
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_26RegisterSQLSchemaException_15__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_26RegisterSQLSchemaException_15__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6picard_5types_26RegisterSQLSchemaException_14__cinit__(((struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_26RegisterSQLSchemaException_14__cinit__(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "picard/types.pyx":420
 * 
 *     def __cinit__(self):
 *         self._fbthrift_struct_size = 2             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->__pyx_base._fbthrift_struct_size = 2;

  /* "picard/types.pyx":419
 *         return __get_field_name_by_index[cRegisterSQLSchemaException](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 2
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":426
 * @__cython.auto_pickle(False)
 * cdef class RegisterTokenizerException(thrift.py3.exceptions.GeneratedError):
 *     def __init__(RegisterTokenizerException self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cRegisterTokenizerException]()
 *         self._fields_setter = _fbthrift_types_fields.__RegisterTokenizerException_FieldsSetter.create(self._cpp_obj.get())
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_26RegisterTokenizerException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_26RegisterTokenizerException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6picard_5types_26RegisterTokenizerException___init__(((struct __pyx_obj_6picard_5types_RegisterTokenizerException *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_26RegisterTokenizerException___init__(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::RegisterTokenizerException>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":427
 * cdef class RegisterTokenizerException(thrift.py3.exceptions.GeneratedError):
 *     def __init__(RegisterTokenizerException self, *args, **kwargs):
 *         self._cpp_obj = make_shared[cRegisterTokenizerException]()             # <<<<<<<<<<<<<<
 *         self._fields_setter = _fbthrift_types_fields.__RegisterTokenizerException_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__( *args, **kwargs)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::RegisterTokenizerException>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 427, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":428
 *     def __init__(RegisterTokenizerException self, *args, **kwargs):
 *         self._cpp_obj = make_shared[cRegisterTokenizerException]()
 *         self._fields_setter = _fbthrift_types_fields.__RegisterTokenizerException_FieldsSetter.create(self._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         super().__init__( *args, **kwargs)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___RegisterTokenizerException_FieldsSetter->create(__pyx_v_self->_cpp_obj.get())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_fields_setter));
  __pyx_v_self->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___RegisterTokenizerException_FieldsSetter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":429
 *         self._cpp_obj = make_shared[cRegisterTokenizerException]()
 *         self._fields_setter = _fbthrift_types_fields.__RegisterTokenizerException_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__( *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":426
 * @__cython.auto_pickle(False)
 * cdef class RegisterTokenizerException(thrift.py3.exceptions.GeneratedError):
 *     def __init__(RegisterTokenizerException self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cRegisterTokenizerException]()
 *         self._fields_setter = _fbthrift_types_fields.__RegisterTokenizerException_FieldsSetter.create(self._cpp_obj.get())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.RegisterTokenizerException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":431
 *         super().__init__( *args, **kwargs)
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

static void __pyx_f_6picard_5types_26RegisterTokenizerException__fbthrift_set_field(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_set_field", 0);

  /* "picard/types.pyx":432
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 *         self._fields_setter.set_field(name.encode("utf-8"), value)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _fbthrift_isset(self):
 */
  if (unlikely(__pyx_v_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 432, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 432, __pyx_L1_error)
  ((struct __pyx_vtabstruct_6picard_12types_fields___RegisterTokenizerException_FieldsSetter *)__pyx_v_self->_fields_setter->__pyx_base.__pyx_vtab)->__pyx_base.set_field(((struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter *)__pyx_v_self->_fields_setter), __pyx_t_2, __pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":431
 *         super().__init__( *args, **kwargs)
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.RegisterTokenizerException._fbthrift_set_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "picard/types.pyx":434
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("RegisterTokenizerException", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 */

static PyObject *__pyx_f_6picard_5types_26RegisterTokenizerException__fbthrift_isset(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_isset", 0);

  /* "picard/types.pyx":435
 * 
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("RegisterTokenizerException", {             # <<<<<<<<<<<<<<
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 *         })
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_thrift); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_py3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IsSet); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":436
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("RegisterTokenizerException", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),             # <<<<<<<<<<<<<<
 *         })
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).message_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_message, __pyx_t_4) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_RegisterTokenizerException, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_RegisterTokenizerException, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_RegisterTokenizerException);
    __Pyx_GIVEREF(__pyx_n_u_RegisterTokenizerException);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_n_u_RegisterTokenizerException);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":434
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("RegisterTokenizerException", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.RegisterTokenizerException._fbthrift_isset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6picard_5types_26RegisterTokenizerException_6create_2generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "picard/types.pyx":443
 *         __fbthrift_inst = <RegisterTokenizerException>RegisterTokenizerException.__new__(RegisterTokenizerException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */

static PyObject *__pyx_pf_6picard_5types_26RegisterTokenizerException_6create_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr *)__pyx_tp_new_6picard_5types___pyx_scope_struct_3_genexpr(__pyx_ptype_6picard_5types___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 443, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6picard_5types_26RegisterTokenizerException_6create_2generator10, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_RegisterTokenizerException_creat, __pyx_n_s_picard_types); if (unlikely(!gen)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.RegisterTokenizerException.create.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6picard_5types_26RegisterTokenizerException_6create_2generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 443, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst)) { __Pyx_RaiseClosureNameError("__fbthrift_inst"); __PYX_ERR(0, 443, __pyx_L1_error) }
  if (likely(PyList_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst))) || PyTuple_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst))) {
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 443, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 443, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 443, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 443, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 443, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v__);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_v);
    __pyx_r = __pyx_cur_scope->__pyx_v_v;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 443, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":440
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cRegisterTokenizerException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <RegisterTokenizerException>RegisterTokenizerException.__new__(RegisterTokenizerException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

static PyObject *__pyx_f_6picard_5types_26RegisterTokenizerException_create(std::shared_ptr<::cpp2::RegisterTokenizerException>  __pyx_v_cpp_obj) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create *__pyx_cur_scope;
  PyObject *__pyx_gb_6picard_5types_26RegisterTokenizerException_6create_2generator10 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create *)__pyx_tp_new_6picard_5types___pyx_scope_struct_2_create(__pyx_ptype_6picard_5types___pyx_scope_struct_2_create, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 440, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "picard/types.pyx":441
 *     @staticmethod
 *     cdef create(shared_ptr[cRegisterTokenizerException] cpp_obj):
 *         __fbthrift_inst = <RegisterTokenizerException>RegisterTokenizerException.__new__(RegisterTokenizerException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString((*__pyx_v_cpp_obj).what()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 441, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_6picard_5types_RegisterTokenizerException(((PyTypeObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException), __pyx_t_1, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((PyObject *)__pyx_t_2);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_RegisterTokenizerException *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":442
 *     cdef create(shared_ptr[cRegisterTokenizerException] cpp_obj):
 *         __fbthrift_inst = <RegisterTokenizerException>RegisterTokenizerException.__new__(RegisterTokenizerException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)             # <<<<<<<<<<<<<<
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))
 *         return __fbthrift_inst
 */
  __pyx_cur_scope->__pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<::cpp2::RegisterTokenizerException> >(__pyx_v_cpp_obj);

  /* "picard/types.pyx":443
 *         __fbthrift_inst = <RegisterTokenizerException>RegisterTokenizerException.__new__(RegisterTokenizerException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_builtins); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Exception); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst));
  __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst));
  __pyx_t_3 = __pyx_pf_6picard_5types_26RegisterTokenizerException_6create_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":444
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":440
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cRegisterTokenizerException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <RegisterTokenizerException>RegisterTokenizerException.__new__(RegisterTokenizerException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.RegisterTokenizerException.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_6picard_5types_26RegisterTokenizerException_6create_2generator10);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":447
 * 
 *     @property
 *     def message(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_26RegisterTokenizerException_7message_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_26RegisterTokenizerException_7message_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_26RegisterTokenizerException_7message___get__(((struct __pyx_obj_6picard_5types_RegisterTokenizerException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_26RegisterTokenizerException_7message___get__(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":449
 *     def message(self):
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->_cpp_obj).message_ref().value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 449, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":447
 * 
 *     @property
 *     def message(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.RegisterTokenizerException.message.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":452
 * 
 * 
 *     def __hash__(RegisterTokenizerException self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6picard_5types_26RegisterTokenizerException_3__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6picard_5types_26RegisterTokenizerException_3__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_26RegisterTokenizerException_2__hash__(((struct __pyx_obj_6picard_5types_RegisterTokenizerException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6picard_5types_26RegisterTokenizerException_2__hash__(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "picard/types.pyx":453
 * 
 *     def __hash__(RegisterTokenizerException self):
 *         return  super().__hash__()             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(RegisterTokenizerException self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "picard/types.pyx":452
 * 
 * 
 *     def __hash__(RegisterTokenizerException self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.RegisterTokenizerException.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":455
 *         return  super().__hash__()
 * 
 *     def __copy__(RegisterTokenizerException self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cRegisterTokenizerException] cpp_obj = make_shared[cRegisterTokenizerException](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_26RegisterTokenizerException_5__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_26RegisterTokenizerException_5__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_26RegisterTokenizerException_4__copy__(((struct __pyx_obj_6picard_5types_RegisterTokenizerException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_26RegisterTokenizerException_4__copy__(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self) {
  std::shared_ptr<::cpp2::RegisterTokenizerException>  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::RegisterTokenizerException>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":456
 * 
 *     def __copy__(RegisterTokenizerException self):
 *         cdef shared_ptr[cRegisterTokenizerException] cpp_obj = make_shared[cRegisterTokenizerException](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::RegisterTokenizerException>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 456, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":459
 *             deref(self._cpp_obj)
 *         )
 *         return RegisterTokenizerException.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_26RegisterTokenizerException_create(cython_std::move<std::shared_ptr<::cpp2::RegisterTokenizerException> >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":455
 *         return  super().__hash__()
 * 
 *     def __copy__(RegisterTokenizerException self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cRegisterTokenizerException] cpp_obj = make_shared[cRegisterTokenizerException](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.RegisterTokenizerException.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":461
 *         return RegisterTokenizerException.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cRegisterTokenizerException](
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_26RegisterTokenizerException_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6picard_5types_26RegisterTokenizerException_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_26RegisterTokenizerException_6__richcmp__(((struct __pyx_obj_6picard_5types_RegisterTokenizerException *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_26RegisterTokenizerException_6__richcmp__(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "picard/types.pyx":462
 * 
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)             # <<<<<<<<<<<<<<
 *         return __richcmp[cRegisterTokenizerException](
 *             self._cpp_obj,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_RegisterTokenizerException *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_cmp_sametype(((struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":463
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cRegisterTokenizerException](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<RegisterTokenizerException>other)._cpp_obj,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":467
 *             (<RegisterTokenizerException>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = (__pyx_v_r == Py_None);
  if ((__pyx_t_2 != 0)) {

    /* "picard/types.pyx":463
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cRegisterTokenizerException](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<RegisterTokenizerException>other)._cpp_obj,
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(::thrift::py3::richcmp<::cpp2::RegisterTokenizerException>(__pyx_v_self->_cpp_obj, ((struct __pyx_obj_6picard_5types_RegisterTokenizerException *)__pyx_v_other)->_cpp_obj, __pyx_v_op)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "picard/types.pyx":467
 *             (<RegisterTokenizerException>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_1 = __pyx_v_r;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":461
 *         return RegisterTokenizerException.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cRegisterTokenizerException](
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.RegisterTokenizerException.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":470
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__RegisterTokenizerException()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_26RegisterTokenizerException_9__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_26RegisterTokenizerException_9__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_26RegisterTokenizerException_9__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_26RegisterTokenizerException_9__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_26RegisterTokenizerException_8__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_26RegisterTokenizerException_8__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":471
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__RegisterTokenizerException()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__RegisterTokenizerException()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":470
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__RegisterTokenizerException()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.RegisterTokenizerException.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":474
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cRegisterTokenizerException].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_26RegisterTokenizerException_11__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_26RegisterTokenizerException_11__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_26RegisterTokenizerException_11__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_26RegisterTokenizerException_11__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_26RegisterTokenizerException_10__get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_26RegisterTokenizerException_10__get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":476
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cRegisterTokenizerException].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::ExceptionMetadata<::cpp2::RegisterTokenizerException> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":477
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cRegisterTokenizerException].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":474
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cRegisterTokenizerException].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.RegisterTokenizerException.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":480
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.RegisterTokenizerException"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_26RegisterTokenizerException_13__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_26RegisterTokenizerException_13__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_26RegisterTokenizerException_13__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_26RegisterTokenizerException_13__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_26RegisterTokenizerException_12__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_26RegisterTokenizerException_12__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":481
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.RegisterTokenizerException"             # <<<<<<<<<<<<<<
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_RegisterTokenizerExceptio);
  __pyx_r = __pyx_kp_u_picard_RegisterTokenizerExceptio;
  goto __pyx_L0;

  /* "picard/types.pyx":480
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.RegisterTokenizerException"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":483
 *         return "picard.RegisterTokenizerException"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cRegisterTokenizerException](idx)
 * 
 */

static std::string_view __pyx_f_6picard_5types_26RegisterTokenizerException__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self, size_t __pyx_v_idx) {
  std::string_view __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string_view __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_field_name_by_index", 0);

  /* "picard/types.pyx":484
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 *         return __get_field_name_by_index[cRegisterTokenizerException](idx)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  try {
    __pyx_t_1 = ::thrift::py3::get_field_name_by_index<::cpp2::RegisterTokenizerException>(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 484, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "picard/types.pyx":483
 *         return "picard.RegisterTokenizerException"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cRegisterTokenizerException](idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("picard.types.RegisterTokenizerException._fbthrift_get_field_name_by_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":486
 *         return __get_field_name_by_index[cRegisterTokenizerException](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 1
 * 
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_26RegisterTokenizerException_15__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_26RegisterTokenizerException_15__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6picard_5types_26RegisterTokenizerException_14__cinit__(((struct __pyx_obj_6picard_5types_RegisterTokenizerException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_26RegisterTokenizerException_14__cinit__(struct __pyx_obj_6picard_5types_RegisterTokenizerException *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "picard/types.pyx":487
 * 
 *     def __cinit__(self):
 *         self._fbthrift_struct_size = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->__pyx_base._fbthrift_struct_size = 1;

  /* "picard/types.pyx":486
 *         return __get_field_name_by_index[cRegisterTokenizerException](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 1
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":493
 * @__cython.auto_pickle(False)
 * cdef class TokenizerNotRegisteredException(thrift.py3.types.Struct):
 *     def __init__(TokenizerNotRegisteredException self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cTokenizerNotRegisteredException]()
 *         self._fields_setter = _fbthrift_types_fields.__TokenizerNotRegisteredException_FieldsSetter.create(self._cpp_obj.get())
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_31TokenizerNotRegisteredException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_31TokenizerNotRegisteredException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_31TokenizerNotRegisteredException___init__(((struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_31TokenizerNotRegisteredException___init__(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::TokenizerNotRegisteredException>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":494
 * cdef class TokenizerNotRegisteredException(thrift.py3.types.Struct):
 *     def __init__(TokenizerNotRegisteredException self, **kwargs):
 *         self._cpp_obj = make_shared[cTokenizerNotRegisteredException]()             # <<<<<<<<<<<<<<
 *         self._fields_setter = _fbthrift_types_fields.__TokenizerNotRegisteredException_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::TokenizerNotRegisteredException>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 494, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":495
 *     def __init__(TokenizerNotRegisteredException self, **kwargs):
 *         self._cpp_obj = make_shared[cTokenizerNotRegisteredException]()
 *         self._fields_setter = _fbthrift_types_fields.__TokenizerNotRegisteredException_FieldsSetter.create(self._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         super().__init__(**kwargs)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter->create(__pyx_v_self->_cpp_obj.get())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_fields_setter));
  __pyx_v_self->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":496
 *         self._cpp_obj = make_shared[cTokenizerNotRegisteredException]()
 *         self._fields_setter = _fbthrift_types_fields.__TokenizerNotRegisteredException_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def __call__(TokenizerNotRegisteredException self, **kwargs):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":493
 * @__cython.auto_pickle(False)
 * cdef class TokenizerNotRegisteredException(thrift.py3.types.Struct):
 *     def __init__(TokenizerNotRegisteredException self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cTokenizerNotRegisteredException]()
 *         self._fields_setter = _fbthrift_types_fields.__TokenizerNotRegisteredException_FieldsSetter.create(self._cpp_obj.get())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.TokenizerNotRegisteredException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":498
 *         super().__init__(**kwargs)
 * 
 *     def __call__(TokenizerNotRegisteredException self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__call__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__call__", 1))) return NULL;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_31TokenizerNotRegisteredException_2__call__(((struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_31TokenizerNotRegisteredException_2__call__(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v___fbthrift_inst = 0;
  PyObject *__pyx_v___fbthrift_name = NULL;
  PyObject *__pyx_v__fbthrift_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::shared_ptr<::cpp2::TokenizerNotRegisteredException>  __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "picard/types.pyx":499
 * 
 *     def __call__(TokenizerNotRegisteredException self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef TokenizerNotRegisteredException __fbthrift_inst = TokenizerNotRegisteredException.__new__(TokenizerNotRegisteredException)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 499, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":500
 *     def __call__(TokenizerNotRegisteredException self, **kwargs):
 *         if not kwargs:
 *             return self             # <<<<<<<<<<<<<<
 *         cdef TokenizerNotRegisteredException __fbthrift_inst = TokenizerNotRegisteredException.__new__(TokenizerNotRegisteredException)
 *         __fbthrift_inst._cpp_obj = make_shared[cTokenizerNotRegisteredException](deref(self._cpp_obj))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "picard/types.pyx":499
 * 
 *     def __call__(TokenizerNotRegisteredException self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef TokenizerNotRegisteredException __fbthrift_inst = TokenizerNotRegisteredException.__new__(TokenizerNotRegisteredException)
 */
  }

  /* "picard/types.pyx":501
 *         if not kwargs:
 *             return self
 *         cdef TokenizerNotRegisteredException __fbthrift_inst = TokenizerNotRegisteredException.__new__(TokenizerNotRegisteredException)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = make_shared[cTokenizerNotRegisteredException](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__TokenizerNotRegisteredException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 */
  __pyx_t_3 = ((PyObject *)__pyx_tp_new_6picard_5types_TokenizerNotRegisteredException(((PyTypeObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":502
 *             return self
 *         cdef TokenizerNotRegisteredException __fbthrift_inst = TokenizerNotRegisteredException.__new__(TokenizerNotRegisteredException)
 *         __fbthrift_inst._cpp_obj = make_shared[cTokenizerNotRegisteredException](deref(self._cpp_obj))             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__TokenizerNotRegisteredException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 */
  try {
    __pyx_t_4 = std::make_shared<::cpp2::TokenizerNotRegisteredException>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 502, __pyx_L1_error)
  }
  __pyx_v___fbthrift_inst->_cpp_obj = __pyx_t_4;

  /* "picard/types.pyx":503
 *         cdef TokenizerNotRegisteredException __fbthrift_inst = TokenizerNotRegisteredException.__new__(TokenizerNotRegisteredException)
 *         __fbthrift_inst._cpp_obj = make_shared[cTokenizerNotRegisteredException](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__TokenizerNotRegisteredException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 */
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter->create(__pyx_v___fbthrift_inst->_cpp_obj.get())); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v___fbthrift_inst->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v___fbthrift_inst->_fields_setter));
  __pyx_v___fbthrift_inst->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":504
 *         __fbthrift_inst._cpp_obj = make_shared[cTokenizerNotRegisteredException](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__TokenizerNotRegisteredException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():             # <<<<<<<<<<<<<<
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst
 */
  __pyx_t_5 = 0;
  __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_kwargs, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_8;
  __pyx_t_8 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_6, &__pyx_t_5, &__pyx_t_8, &__pyx_t_9, NULL, __pyx_t_7);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 504, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v___fbthrift_name, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v__fbthrift_value, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "picard/types.pyx":505
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__TokenizerNotRegisteredException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v___fbthrift_name))||((__pyx_v___fbthrift_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v___fbthrift_name)->tp_name), 0))) __PYX_ERR(0, 505, __pyx_L1_error)
    ((struct __pyx_vtabstruct_6picard_5types_TokenizerNotRegisteredException *)__pyx_v___fbthrift_inst->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_set_field(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v___fbthrift_inst), ((PyObject*)__pyx_v___fbthrift_name), __pyx_v__fbthrift_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 505, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "picard/types.pyx":506
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":498
 *         super().__init__(**kwargs)
 * 
 *     def __call__(TokenizerNotRegisteredException self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("picard.types.TokenizerNotRegisteredException.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XDECREF(__pyx_v___fbthrift_name);
  __Pyx_XDECREF(__pyx_v__fbthrift_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":508
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

static void __pyx_f_6picard_5types_31TokenizerNotRegisteredException__fbthrift_set_field(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_set_field", 0);

  /* "picard/types.pyx":509
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 *         self._fields_setter.set_field(name.encode("utf-8"), value)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _fbthrift_isset(self):
 */
  if (unlikely(__pyx_v_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 509, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L1_error)
  ((struct __pyx_vtabstruct_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter *)__pyx_v_self->_fields_setter->__pyx_base.__pyx_vtab)->__pyx_base.set_field(((struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter *)__pyx_v_self->_fields_setter), __pyx_t_2, __pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":508
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.TokenizerNotRegisteredException._fbthrift_set_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "picard/types.pyx":511
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("TokenizerNotRegisteredException", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 */

static PyObject *__pyx_f_6picard_5types_31TokenizerNotRegisteredException__fbthrift_isset(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_isset", 0);

  /* "picard/types.pyx":512
 * 
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("TokenizerNotRegisteredException", {             # <<<<<<<<<<<<<<
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 *         })
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_thrift); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_py3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IsSet); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":513
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("TokenizerNotRegisteredException", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),             # <<<<<<<<<<<<<<
 *         })
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).message_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_message, __pyx_t_4) < 0) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_TokenizerNotRegisteredException, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_TokenizerNotRegisteredException, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_TokenizerNotRegisteredException);
    __Pyx_GIVEREF(__pyx_n_u_TokenizerNotRegisteredException);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_n_u_TokenizerNotRegisteredException);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":511
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("TokenizerNotRegisteredException", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.TokenizerNotRegisteredException._fbthrift_isset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":517
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cTokenizerNotRegisteredException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <TokenizerNotRegisteredException>TokenizerNotRegisteredException.__new__(TokenizerNotRegisteredException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

static PyObject *__pyx_f_6picard_5types_31TokenizerNotRegisteredException_create(std::shared_ptr<::cpp2::TokenizerNotRegisteredException>  __pyx_v_cpp_obj) {
  struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":518
 *     @staticmethod
 *     cdef create(shared_ptr[cTokenizerNotRegisteredException] cpp_obj):
 *         __fbthrift_inst = <TokenizerNotRegisteredException>TokenizerNotRegisteredException.__new__(TokenizerNotRegisteredException)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_TokenizerNotRegisteredException(((PyTypeObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":519
 *     cdef create(shared_ptr[cTokenizerNotRegisteredException] cpp_obj):
 *         __fbthrift_inst = <TokenizerNotRegisteredException>TokenizerNotRegisteredException.__new__(TokenizerNotRegisteredException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<::cpp2::TokenizerNotRegisteredException> >(__pyx_v_cpp_obj);

  /* "picard/types.pyx":520
 *         __fbthrift_inst = <TokenizerNotRegisteredException>TokenizerNotRegisteredException.__new__(TokenizerNotRegisteredException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":517
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cTokenizerNotRegisteredException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <TokenizerNotRegisteredException>TokenizerNotRegisteredException.__new__(TokenizerNotRegisteredException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.TokenizerNotRegisteredException.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":523
 * 
 *     @property
 *     def message(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_7message_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_7message_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_31TokenizerNotRegisteredException_7message___get__(((struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_31TokenizerNotRegisteredException_7message___get__(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":525
 *     def message(self):
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->_cpp_obj).message_ref().value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 525, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":523
 * 
 *     @property
 *     def message(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.TokenizerNotRegisteredException.message.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":528
 * 
 * 
 *     def __hash__(TokenizerNotRegisteredException self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6picard_5types_31TokenizerNotRegisteredException_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6picard_5types_31TokenizerNotRegisteredException_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_31TokenizerNotRegisteredException_4__hash__(((struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6picard_5types_31TokenizerNotRegisteredException_4__hash__(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "picard/types.pyx":529
 * 
 *     def __hash__(TokenizerNotRegisteredException self):
 *         return  super().__hash__()             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(TokenizerNotRegisteredException self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "picard/types.pyx":528
 * 
 * 
 *     def __hash__(TokenizerNotRegisteredException self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.TokenizerNotRegisteredException.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":531
 *         return  super().__hash__()
 * 
 *     def __copy__(TokenizerNotRegisteredException self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cTokenizerNotRegisteredException] cpp_obj = make_shared[cTokenizerNotRegisteredException](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_31TokenizerNotRegisteredException_6__copy__(((struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_31TokenizerNotRegisteredException_6__copy__(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self) {
  std::shared_ptr<::cpp2::TokenizerNotRegisteredException>  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::TokenizerNotRegisteredException>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":532
 * 
 *     def __copy__(TokenizerNotRegisteredException self):
 *         cdef shared_ptr[cTokenizerNotRegisteredException] cpp_obj = make_shared[cTokenizerNotRegisteredException](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::TokenizerNotRegisteredException>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 532, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":535
 *             deref(self._cpp_obj)
 *         )
 *         return TokenizerNotRegisteredException.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_31TokenizerNotRegisteredException_create(cython_std::move<std::shared_ptr<::cpp2::TokenizerNotRegisteredException> >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":531
 *         return  super().__hash__()
 * 
 *     def __copy__(TokenizerNotRegisteredException self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cTokenizerNotRegisteredException] cpp_obj = make_shared[cTokenizerNotRegisteredException](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.TokenizerNotRegisteredException.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":537
 *         return TokenizerNotRegisteredException.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cTokenizerNotRegisteredException](
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_31TokenizerNotRegisteredException_8__richcmp__(((struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_31TokenizerNotRegisteredException_8__richcmp__(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "picard/types.pyx":538
 * 
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)             # <<<<<<<<<<<<<<
 *         return __richcmp[cTokenizerNotRegisteredException](
 *             self._cpp_obj,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_TokenizerNotRegisteredException *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_cmp_sametype(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":539
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cTokenizerNotRegisteredException](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<TokenizerNotRegisteredException>other)._cpp_obj,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":543
 *             (<TokenizerNotRegisteredException>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = (__pyx_v_r == Py_None);
  if ((__pyx_t_2 != 0)) {

    /* "picard/types.pyx":539
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cTokenizerNotRegisteredException](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<TokenizerNotRegisteredException>other)._cpp_obj,
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(::thrift::py3::richcmp<::cpp2::TokenizerNotRegisteredException>(__pyx_v_self->_cpp_obj, ((struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)__pyx_v_other)->_cpp_obj, __pyx_v_op)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 539, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "picard/types.pyx":543
 *             (<TokenizerNotRegisteredException>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_1 = __pyx_v_r;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":537
 *         return TokenizerNotRegisteredException.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cTokenizerNotRegisteredException](
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.TokenizerNotRegisteredException.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":546
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__TokenizerNotRegisteredException()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_31TokenizerNotRegisteredException_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_31TokenizerNotRegisteredException_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_31TokenizerNotRegisteredException_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":547
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__TokenizerNotRegisteredException()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__TokenizerNotRegisteredException()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":546
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__TokenizerNotRegisteredException()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.TokenizerNotRegisteredException.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":550
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cTokenizerNotRegisteredException].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_31TokenizerNotRegisteredException_13__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_31TokenizerNotRegisteredException_12__get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_31TokenizerNotRegisteredException_12__get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":552
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cTokenizerNotRegisteredException].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::StructMetadata<::cpp2::TokenizerNotRegisteredException> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":553
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cTokenizerNotRegisteredException].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":550
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cTokenizerNotRegisteredException].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.TokenizerNotRegisteredException.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":556
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.TokenizerNotRegisteredException"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_31TokenizerNotRegisteredException_15__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_31TokenizerNotRegisteredException_14__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_31TokenizerNotRegisteredException_14__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":557
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.TokenizerNotRegisteredException"             # <<<<<<<<<<<<<<
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_TokenizerNotRegisteredExc);
  __pyx_r = __pyx_kp_u_picard_TokenizerNotRegisteredExc;
  goto __pyx_L0;

  /* "picard/types.pyx":556
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.TokenizerNotRegisteredException"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":559
 *         return "picard.TokenizerNotRegisteredException"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cTokenizerNotRegisteredException](idx)
 * 
 */

static std::string_view __pyx_f_6picard_5types_31TokenizerNotRegisteredException__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self, size_t __pyx_v_idx) {
  std::string_view __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string_view __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_field_name_by_index", 0);

  /* "picard/types.pyx":560
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 *         return __get_field_name_by_index[cTokenizerNotRegisteredException](idx)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  try {
    __pyx_t_1 = ::thrift::py3::get_field_name_by_index<::cpp2::TokenizerNotRegisteredException>(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 560, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "picard/types.pyx":559
 *         return "picard.TokenizerNotRegisteredException"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cTokenizerNotRegisteredException](idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("picard.types.TokenizerNotRegisteredException._fbthrift_get_field_name_by_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":562
 *         return __get_field_name_by_index[cTokenizerNotRegisteredException](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 1
 * 
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_31TokenizerNotRegisteredException_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_31TokenizerNotRegisteredException_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6picard_5types_31TokenizerNotRegisteredException_16__cinit__(((struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_31TokenizerNotRegisteredException_16__cinit__(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "picard/types.pyx":563
 * 
 *     def __cinit__(self):
 *         self._fbthrift_struct_size = 1             # <<<<<<<<<<<<<<
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(TokenizerNotRegisteredException self, __Protocol proto):
 */
  __pyx_v_self->__pyx_base._fbthrift_struct_size = 1;

  /* "picard/types.pyx":562
 *         return __get_field_name_by_index[cTokenizerNotRegisteredException](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 1
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":565
 *         self._fbthrift_struct_size = 1
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(TokenizerNotRegisteredException self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_31TokenizerNotRegisteredException__serialize(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  std::unique_ptr<folly::IOBuf>  __pyx_v_data;
  struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::unique_ptr<folly::IOBuf>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_serialize", 0);

  /* "picard/types.pyx":567
 *     cdef _fbthrift_iobuf.IOBuf _serialize(TokenizerNotRegisteredException self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cTokenizerNotRegisteredException](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":568
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 *             data = cmove(serializer.cserialize[cTokenizerNotRegisteredException](self._cpp_obj.get(), proto))             # <<<<<<<<<<<<<<
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 */
        try {
          __pyx_t_1 = ::thrift::py3::serialize<::cpp2::TokenizerNotRegisteredException>(__pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 568, __pyx_L4_error)
        }
        __pyx_v_data = cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_t_1);
      }

      /* "picard/types.pyx":567
 *     cdef _fbthrift_iobuf.IOBuf _serialize(TokenizerNotRegisteredException self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cTokenizerNotRegisteredException](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":569
 *         with nogil:
 *             data = cmove(serializer.cserialize[cTokenizerNotRegisteredException](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))             # <<<<<<<<<<<<<<
 * 
 *     cdef cuint32_t _deserialize(TokenizerNotRegisteredException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = ((PyObject *)__pyx_f_5folly_5iobuf_from_unique_ptr(cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_v_data))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_5folly_5iobuf_IOBuf *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":565
 *         self._fbthrift_struct_size = 1
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(TokenizerNotRegisteredException self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.TokenizerNotRegisteredException._serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":571
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(TokenizerNotRegisteredException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cTokenizerNotRegisteredException]()
 */

static uint32_t __pyx_f_6picard_5types_31TokenizerNotRegisteredException__deserialize(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  uint32_t __pyx_v_needed;
  uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::TokenizerNotRegisteredException>  __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_deserialize", 0);

  /* "picard/types.pyx":573
 *     cdef cuint32_t _deserialize(TokenizerNotRegisteredException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cTokenizerNotRegisteredException]()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             needed = serializer.cdeserialize[cTokenizerNotRegisteredException](buf, self._cpp_obj.get(), proto)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::TokenizerNotRegisteredException>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 573, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":574
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cTokenizerNotRegisteredException]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cTokenizerNotRegisteredException](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":575
 *         self._cpp_obj = make_shared[cTokenizerNotRegisteredException]()
 *         with nogil:
 *             needed = serializer.cdeserialize[cTokenizerNotRegisteredException](buf, self._cpp_obj.get(), proto)             # <<<<<<<<<<<<<<
 *         return needed
 * 
 */
        try {
          __pyx_t_2 = ::thrift::py3::deserialize<::cpp2::TokenizerNotRegisteredException>(__pyx_v_buf, __pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 575, __pyx_L4_error)
        }
        __pyx_v_needed = __pyx_t_2;
      }

      /* "picard/types.pyx":574
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cTokenizerNotRegisteredException]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cTokenizerNotRegisteredException](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":576
 *         with nogil:
 *             needed = serializer.cdeserialize[cTokenizerNotRegisteredException](buf, self._cpp_obj.get(), proto)
 *         return needed             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_needed;
  goto __pyx_L0;

  /* "picard/types.pyx":571
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(TokenizerNotRegisteredException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cTokenizerNotRegisteredException]()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.TokenizerNotRegisteredException._deserialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":581
 * @__cython.auto_pickle(False)
 * cdef class TokenizerPrefixException(thrift.py3.types.Struct):
 *     def __init__(TokenizerPrefixException self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cTokenizerPrefixException]()
 *         self._fields_setter = _fbthrift_types_fields.__TokenizerPrefixException_FieldsSetter.create(self._cpp_obj.get())
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_24TokenizerPrefixException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_24TokenizerPrefixException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_24TokenizerPrefixException___init__(((struct __pyx_obj_6picard_5types_TokenizerPrefixException *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_24TokenizerPrefixException___init__(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::TokenizerPrefixException>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":582
 * cdef class TokenizerPrefixException(thrift.py3.types.Struct):
 *     def __init__(TokenizerPrefixException self, **kwargs):
 *         self._cpp_obj = make_shared[cTokenizerPrefixException]()             # <<<<<<<<<<<<<<
 *         self._fields_setter = _fbthrift_types_fields.__TokenizerPrefixException_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::TokenizerPrefixException>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 582, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":583
 *     def __init__(TokenizerPrefixException self, **kwargs):
 *         self._cpp_obj = make_shared[cTokenizerPrefixException]()
 *         self._fields_setter = _fbthrift_types_fields.__TokenizerPrefixException_FieldsSetter.create(self._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         super().__init__(**kwargs)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___TokenizerPrefixException_FieldsSetter->create(__pyx_v_self->_cpp_obj.get())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_fields_setter));
  __pyx_v_self->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___TokenizerPrefixException_FieldsSetter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":584
 *         self._cpp_obj = make_shared[cTokenizerPrefixException]()
 *         self._fields_setter = _fbthrift_types_fields.__TokenizerPrefixException_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def __call__(TokenizerPrefixException self, **kwargs):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":581
 * @__cython.auto_pickle(False)
 * cdef class TokenizerPrefixException(thrift.py3.types.Struct):
 *     def __init__(TokenizerPrefixException self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cTokenizerPrefixException]()
 *         self._fields_setter = _fbthrift_types_fields.__TokenizerPrefixException_FieldsSetter.create(self._cpp_obj.get())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.TokenizerPrefixException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":586
 *         super().__init__(**kwargs)
 * 
 *     def __call__(TokenizerPrefixException self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_24TokenizerPrefixException_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6picard_5types_24TokenizerPrefixException_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__call__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__call__", 1))) return NULL;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_24TokenizerPrefixException_2__call__(((struct __pyx_obj_6picard_5types_TokenizerPrefixException *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_24TokenizerPrefixException_2__call__(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v___fbthrift_inst = 0;
  PyObject *__pyx_v___fbthrift_name = NULL;
  PyObject *__pyx_v__fbthrift_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::shared_ptr<::cpp2::TokenizerPrefixException>  __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "picard/types.pyx":587
 * 
 *     def __call__(TokenizerPrefixException self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef TokenizerPrefixException __fbthrift_inst = TokenizerPrefixException.__new__(TokenizerPrefixException)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 587, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":588
 *     def __call__(TokenizerPrefixException self, **kwargs):
 *         if not kwargs:
 *             return self             # <<<<<<<<<<<<<<
 *         cdef TokenizerPrefixException __fbthrift_inst = TokenizerPrefixException.__new__(TokenizerPrefixException)
 *         __fbthrift_inst._cpp_obj = make_shared[cTokenizerPrefixException](deref(self._cpp_obj))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "picard/types.pyx":587
 * 
 *     def __call__(TokenizerPrefixException self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef TokenizerPrefixException __fbthrift_inst = TokenizerPrefixException.__new__(TokenizerPrefixException)
 */
  }

  /* "picard/types.pyx":589
 *         if not kwargs:
 *             return self
 *         cdef TokenizerPrefixException __fbthrift_inst = TokenizerPrefixException.__new__(TokenizerPrefixException)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = make_shared[cTokenizerPrefixException](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__TokenizerPrefixException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 */
  __pyx_t_3 = ((PyObject *)__pyx_tp_new_6picard_5types_TokenizerPrefixException(((PyTypeObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_TokenizerPrefixException *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":590
 *             return self
 *         cdef TokenizerPrefixException __fbthrift_inst = TokenizerPrefixException.__new__(TokenizerPrefixException)
 *         __fbthrift_inst._cpp_obj = make_shared[cTokenizerPrefixException](deref(self._cpp_obj))             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__TokenizerPrefixException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 */
  try {
    __pyx_t_4 = std::make_shared<::cpp2::TokenizerPrefixException>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 590, __pyx_L1_error)
  }
  __pyx_v___fbthrift_inst->_cpp_obj = __pyx_t_4;

  /* "picard/types.pyx":591
 *         cdef TokenizerPrefixException __fbthrift_inst = TokenizerPrefixException.__new__(TokenizerPrefixException)
 *         __fbthrift_inst._cpp_obj = make_shared[cTokenizerPrefixException](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__TokenizerPrefixException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 */
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___TokenizerPrefixException_FieldsSetter->create(__pyx_v___fbthrift_inst->_cpp_obj.get())); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v___fbthrift_inst->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v___fbthrift_inst->_fields_setter));
  __pyx_v___fbthrift_inst->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___TokenizerPrefixException_FieldsSetter *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":592
 *         __fbthrift_inst._cpp_obj = make_shared[cTokenizerPrefixException](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__TokenizerPrefixException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():             # <<<<<<<<<<<<<<
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst
 */
  __pyx_t_5 = 0;
  __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_kwargs, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_8;
  __pyx_t_8 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_6, &__pyx_t_5, &__pyx_t_8, &__pyx_t_9, NULL, __pyx_t_7);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v___fbthrift_name, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v__fbthrift_value, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "picard/types.pyx":593
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__TokenizerPrefixException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v___fbthrift_name))||((__pyx_v___fbthrift_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v___fbthrift_name)->tp_name), 0))) __PYX_ERR(0, 593, __pyx_L1_error)
    ((struct __pyx_vtabstruct_6picard_5types_TokenizerPrefixException *)__pyx_v___fbthrift_inst->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_set_field(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v___fbthrift_inst), ((PyObject*)__pyx_v___fbthrift_name), __pyx_v__fbthrift_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 593, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "picard/types.pyx":594
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":586
 *         super().__init__(**kwargs)
 * 
 *     def __call__(TokenizerPrefixException self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("picard.types.TokenizerPrefixException.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XDECREF(__pyx_v___fbthrift_name);
  __Pyx_XDECREF(__pyx_v__fbthrift_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":596
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

static void __pyx_f_6picard_5types_24TokenizerPrefixException__fbthrift_set_field(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_set_field", 0);

  /* "picard/types.pyx":597
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 *         self._fields_setter.set_field(name.encode("utf-8"), value)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _fbthrift_isset(self):
 */
  if (unlikely(__pyx_v_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 597, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 597, __pyx_L1_error)
  ((struct __pyx_vtabstruct_6picard_12types_fields___TokenizerPrefixException_FieldsSetter *)__pyx_v_self->_fields_setter->__pyx_base.__pyx_vtab)->__pyx_base.set_field(((struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter *)__pyx_v_self->_fields_setter), __pyx_t_2, __pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":596
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.TokenizerPrefixException._fbthrift_set_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "picard/types.pyx":599
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("TokenizerPrefixException", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 */

static PyObject *__pyx_f_6picard_5types_24TokenizerPrefixException__fbthrift_isset(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_isset", 0);

  /* "picard/types.pyx":600
 * 
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("TokenizerPrefixException", {             # <<<<<<<<<<<<<<
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 *         })
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_thrift); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_py3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IsSet); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":601
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("TokenizerPrefixException", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),             # <<<<<<<<<<<<<<
 *         })
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).message_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_message, __pyx_t_4) < 0) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_TokenizerPrefixException, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_TokenizerPrefixException, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_TokenizerPrefixException);
    __Pyx_GIVEREF(__pyx_n_u_TokenizerPrefixException);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_n_u_TokenizerPrefixException);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":599
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("TokenizerPrefixException", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.TokenizerPrefixException._fbthrift_isset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":605
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cTokenizerPrefixException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <TokenizerPrefixException>TokenizerPrefixException.__new__(TokenizerPrefixException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

static PyObject *__pyx_f_6picard_5types_24TokenizerPrefixException_create(std::shared_ptr<::cpp2::TokenizerPrefixException>  __pyx_v_cpp_obj) {
  struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":606
 *     @staticmethod
 *     cdef create(shared_ptr[cTokenizerPrefixException] cpp_obj):
 *         __fbthrift_inst = <TokenizerPrefixException>TokenizerPrefixException.__new__(TokenizerPrefixException)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_TokenizerPrefixException(((PyTypeObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_TokenizerPrefixException *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":607
 *     cdef create(shared_ptr[cTokenizerPrefixException] cpp_obj):
 *         __fbthrift_inst = <TokenizerPrefixException>TokenizerPrefixException.__new__(TokenizerPrefixException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<::cpp2::TokenizerPrefixException> >(__pyx_v_cpp_obj);

  /* "picard/types.pyx":608
 *         __fbthrift_inst = <TokenizerPrefixException>TokenizerPrefixException.__new__(TokenizerPrefixException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":605
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cTokenizerPrefixException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <TokenizerPrefixException>TokenizerPrefixException.__new__(TokenizerPrefixException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.TokenizerPrefixException.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":611
 * 
 *     @property
 *     def message(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_24TokenizerPrefixException_7message_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_24TokenizerPrefixException_7message_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_24TokenizerPrefixException_7message___get__(((struct __pyx_obj_6picard_5types_TokenizerPrefixException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_24TokenizerPrefixException_7message___get__(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":613
 *     def message(self):
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->_cpp_obj).message_ref().value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 613, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":611
 * 
 *     @property
 *     def message(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.TokenizerPrefixException.message.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":616
 * 
 * 
 *     def __hash__(TokenizerPrefixException self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6picard_5types_24TokenizerPrefixException_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6picard_5types_24TokenizerPrefixException_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_24TokenizerPrefixException_4__hash__(((struct __pyx_obj_6picard_5types_TokenizerPrefixException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6picard_5types_24TokenizerPrefixException_4__hash__(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "picard/types.pyx":617
 * 
 *     def __hash__(TokenizerPrefixException self):
 *         return  super().__hash__()             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(TokenizerPrefixException self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "picard/types.pyx":616
 * 
 * 
 *     def __hash__(TokenizerPrefixException self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.TokenizerPrefixException.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":619
 *         return  super().__hash__()
 * 
 *     def __copy__(TokenizerPrefixException self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cTokenizerPrefixException] cpp_obj = make_shared[cTokenizerPrefixException](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_24TokenizerPrefixException_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_24TokenizerPrefixException_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_24TokenizerPrefixException_6__copy__(((struct __pyx_obj_6picard_5types_TokenizerPrefixException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_24TokenizerPrefixException_6__copy__(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self) {
  std::shared_ptr<::cpp2::TokenizerPrefixException>  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::TokenizerPrefixException>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":620
 * 
 *     def __copy__(TokenizerPrefixException self):
 *         cdef shared_ptr[cTokenizerPrefixException] cpp_obj = make_shared[cTokenizerPrefixException](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::TokenizerPrefixException>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 620, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":623
 *             deref(self._cpp_obj)
 *         )
 *         return TokenizerPrefixException.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_24TokenizerPrefixException_create(cython_std::move<std::shared_ptr<::cpp2::TokenizerPrefixException> >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":619
 *         return  super().__hash__()
 * 
 *     def __copy__(TokenizerPrefixException self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cTokenizerPrefixException] cpp_obj = make_shared[cTokenizerPrefixException](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.TokenizerPrefixException.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":625
 *         return TokenizerPrefixException.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cTokenizerPrefixException](
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_24TokenizerPrefixException_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6picard_5types_24TokenizerPrefixException_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_24TokenizerPrefixException_8__richcmp__(((struct __pyx_obj_6picard_5types_TokenizerPrefixException *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_24TokenizerPrefixException_8__richcmp__(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "picard/types.pyx":626
 * 
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)             # <<<<<<<<<<<<<<
 *         return __richcmp[cTokenizerPrefixException](
 *             self._cpp_obj,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_TokenizerPrefixException *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_cmp_sametype(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":627
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cTokenizerPrefixException](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<TokenizerPrefixException>other)._cpp_obj,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":631
 *             (<TokenizerPrefixException>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = (__pyx_v_r == Py_None);
  if ((__pyx_t_2 != 0)) {

    /* "picard/types.pyx":627
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cTokenizerPrefixException](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<TokenizerPrefixException>other)._cpp_obj,
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(::thrift::py3::richcmp<::cpp2::TokenizerPrefixException>(__pyx_v_self->_cpp_obj, ((struct __pyx_obj_6picard_5types_TokenizerPrefixException *)__pyx_v_other)->_cpp_obj, __pyx_v_op)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 627, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "picard/types.pyx":631
 *             (<TokenizerPrefixException>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_1 = __pyx_v_r;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":625
 *         return TokenizerPrefixException.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cTokenizerPrefixException](
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.TokenizerPrefixException.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":634
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__TokenizerPrefixException()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_24TokenizerPrefixException_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_24TokenizerPrefixException_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_24TokenizerPrefixException_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_24TokenizerPrefixException_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_24TokenizerPrefixException_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_24TokenizerPrefixException_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":635
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__TokenizerPrefixException()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__TokenizerPrefixException()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":634
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__TokenizerPrefixException()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.TokenizerPrefixException.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":638
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cTokenizerPrefixException].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_24TokenizerPrefixException_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_24TokenizerPrefixException_13__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_24TokenizerPrefixException_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_24TokenizerPrefixException_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_24TokenizerPrefixException_12__get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_24TokenizerPrefixException_12__get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":640
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cTokenizerPrefixException].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::StructMetadata<::cpp2::TokenizerPrefixException> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":641
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cTokenizerPrefixException].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":638
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cTokenizerPrefixException].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.TokenizerPrefixException.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":644
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.TokenizerPrefixException"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_24TokenizerPrefixException_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_24TokenizerPrefixException_15__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_24TokenizerPrefixException_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_24TokenizerPrefixException_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_24TokenizerPrefixException_14__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_24TokenizerPrefixException_14__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":645
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.TokenizerPrefixException"             # <<<<<<<<<<<<<<
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_TokenizerPrefixException);
  __pyx_r = __pyx_kp_u_picard_TokenizerPrefixException;
  goto __pyx_L0;

  /* "picard/types.pyx":644
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.TokenizerPrefixException"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":647
 *         return "picard.TokenizerPrefixException"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cTokenizerPrefixException](idx)
 * 
 */

static std::string_view __pyx_f_6picard_5types_24TokenizerPrefixException__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self, size_t __pyx_v_idx) {
  std::string_view __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string_view __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_field_name_by_index", 0);

  /* "picard/types.pyx":648
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 *         return __get_field_name_by_index[cTokenizerPrefixException](idx)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  try {
    __pyx_t_1 = ::thrift::py3::get_field_name_by_index<::cpp2::TokenizerPrefixException>(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 648, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "picard/types.pyx":647
 *         return "picard.TokenizerPrefixException"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cTokenizerPrefixException](idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("picard.types.TokenizerPrefixException._fbthrift_get_field_name_by_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":650
 *         return __get_field_name_by_index[cTokenizerPrefixException](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 1
 * 
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_24TokenizerPrefixException_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_24TokenizerPrefixException_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6picard_5types_24TokenizerPrefixException_16__cinit__(((struct __pyx_obj_6picard_5types_TokenizerPrefixException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_24TokenizerPrefixException_16__cinit__(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "picard/types.pyx":651
 * 
 *     def __cinit__(self):
 *         self._fbthrift_struct_size = 1             # <<<<<<<<<<<<<<
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(TokenizerPrefixException self, __Protocol proto):
 */
  __pyx_v_self->__pyx_base._fbthrift_struct_size = 1;

  /* "picard/types.pyx":650
 *         return __get_field_name_by_index[cTokenizerPrefixException](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 1
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":653
 *         self._fbthrift_struct_size = 1
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(TokenizerPrefixException self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_24TokenizerPrefixException__serialize(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  std::unique_ptr<folly::IOBuf>  __pyx_v_data;
  struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::unique_ptr<folly::IOBuf>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_serialize", 0);

  /* "picard/types.pyx":655
 *     cdef _fbthrift_iobuf.IOBuf _serialize(TokenizerPrefixException self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cTokenizerPrefixException](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":656
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 *             data = cmove(serializer.cserialize[cTokenizerPrefixException](self._cpp_obj.get(), proto))             # <<<<<<<<<<<<<<
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 */
        try {
          __pyx_t_1 = ::thrift::py3::serialize<::cpp2::TokenizerPrefixException>(__pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 656, __pyx_L4_error)
        }
        __pyx_v_data = cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_t_1);
      }

      /* "picard/types.pyx":655
 *     cdef _fbthrift_iobuf.IOBuf _serialize(TokenizerPrefixException self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cTokenizerPrefixException](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":657
 *         with nogil:
 *             data = cmove(serializer.cserialize[cTokenizerPrefixException](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))             # <<<<<<<<<<<<<<
 * 
 *     cdef cuint32_t _deserialize(TokenizerPrefixException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = ((PyObject *)__pyx_f_5folly_5iobuf_from_unique_ptr(cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_v_data))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 657, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_5folly_5iobuf_IOBuf *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":653
 *         self._fbthrift_struct_size = 1
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(TokenizerPrefixException self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.TokenizerPrefixException._serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":659
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(TokenizerPrefixException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cTokenizerPrefixException]()
 */

static uint32_t __pyx_f_6picard_5types_24TokenizerPrefixException__deserialize(struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  uint32_t __pyx_v_needed;
  uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::TokenizerPrefixException>  __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_deserialize", 0);

  /* "picard/types.pyx":661
 *     cdef cuint32_t _deserialize(TokenizerPrefixException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cTokenizerPrefixException]()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             needed = serializer.cdeserialize[cTokenizerPrefixException](buf, self._cpp_obj.get(), proto)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::TokenizerPrefixException>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 661, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":662
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cTokenizerPrefixException]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cTokenizerPrefixException](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":663
 *         self._cpp_obj = make_shared[cTokenizerPrefixException]()
 *         with nogil:
 *             needed = serializer.cdeserialize[cTokenizerPrefixException](buf, self._cpp_obj.get(), proto)             # <<<<<<<<<<<<<<
 *         return needed
 * 
 */
        try {
          __pyx_t_2 = ::thrift::py3::deserialize<::cpp2::TokenizerPrefixException>(__pyx_v_buf, __pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 663, __pyx_L4_error)
        }
        __pyx_v_needed = __pyx_t_2;
      }

      /* "picard/types.pyx":662
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cTokenizerPrefixException]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cTokenizerPrefixException](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":664
 *         with nogil:
 *             needed = serializer.cdeserialize[cTokenizerPrefixException](buf, self._cpp_obj.get(), proto)
 *         return needed             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_needed;
  goto __pyx_L0;

  /* "picard/types.pyx":659
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(TokenizerPrefixException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cTokenizerPrefixException]()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.TokenizerPrefixException._deserialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":669
 * @__cython.auto_pickle(False)
 * cdef class ModeException(thrift.py3.types.Struct):
 *     def __init__(ModeException self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cModeException]()
 *         self._fields_setter = _fbthrift_types_fields.__ModeException_FieldsSetter.create(self._cpp_obj.get())
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_13ModeException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_13ModeException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_13ModeException___init__(((struct __pyx_obj_6picard_5types_ModeException *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_13ModeException___init__(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::ModeException>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":670
 * cdef class ModeException(thrift.py3.types.Struct):
 *     def __init__(ModeException self, **kwargs):
 *         self._cpp_obj = make_shared[cModeException]()             # <<<<<<<<<<<<<<
 *         self._fields_setter = _fbthrift_types_fields.__ModeException_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::ModeException>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 670, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":671
 *     def __init__(ModeException self, **kwargs):
 *         self._cpp_obj = make_shared[cModeException]()
 *         self._fields_setter = _fbthrift_types_fields.__ModeException_FieldsSetter.create(self._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         super().__init__(**kwargs)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___ModeException_FieldsSetter->create(__pyx_v_self->_cpp_obj.get())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_fields_setter));
  __pyx_v_self->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___ModeException_FieldsSetter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":672
 *         self._cpp_obj = make_shared[cModeException]()
 *         self._fields_setter = _fbthrift_types_fields.__ModeException_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def __call__(ModeException self, **kwargs):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_ModeException));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_ModeException));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_ModeException));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":669
 * @__cython.auto_pickle(False)
 * cdef class ModeException(thrift.py3.types.Struct):
 *     def __init__(ModeException self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cModeException]()
 *         self._fields_setter = _fbthrift_types_fields.__ModeException_FieldsSetter.create(self._cpp_obj.get())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.ModeException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":674
 *         super().__init__(**kwargs)
 * 
 *     def __call__(ModeException self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_13ModeException_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6picard_5types_13ModeException_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__call__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__call__", 1))) return NULL;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_13ModeException_2__call__(((struct __pyx_obj_6picard_5types_ModeException *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_13ModeException_2__call__(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6picard_5types_ModeException *__pyx_v___fbthrift_inst = 0;
  PyObject *__pyx_v___fbthrift_name = NULL;
  PyObject *__pyx_v__fbthrift_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::shared_ptr<::cpp2::ModeException>  __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "picard/types.pyx":675
 * 
 *     def __call__(ModeException self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef ModeException __fbthrift_inst = ModeException.__new__(ModeException)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 675, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":676
 *     def __call__(ModeException self, **kwargs):
 *         if not kwargs:
 *             return self             # <<<<<<<<<<<<<<
 *         cdef ModeException __fbthrift_inst = ModeException.__new__(ModeException)
 *         __fbthrift_inst._cpp_obj = make_shared[cModeException](deref(self._cpp_obj))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "picard/types.pyx":675
 * 
 *     def __call__(ModeException self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef ModeException __fbthrift_inst = ModeException.__new__(ModeException)
 */
  }

  /* "picard/types.pyx":677
 *         if not kwargs:
 *             return self
 *         cdef ModeException __fbthrift_inst = ModeException.__new__(ModeException)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = make_shared[cModeException](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ModeException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 */
  __pyx_t_3 = ((PyObject *)__pyx_tp_new_6picard_5types_ModeException(((PyTypeObject *)__pyx_ptype_6picard_5types_ModeException), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 677, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_ModeException *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":678
 *             return self
 *         cdef ModeException __fbthrift_inst = ModeException.__new__(ModeException)
 *         __fbthrift_inst._cpp_obj = make_shared[cModeException](deref(self._cpp_obj))             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ModeException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 */
  try {
    __pyx_t_4 = std::make_shared<::cpp2::ModeException>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 678, __pyx_L1_error)
  }
  __pyx_v___fbthrift_inst->_cpp_obj = __pyx_t_4;

  /* "picard/types.pyx":679
 *         cdef ModeException __fbthrift_inst = ModeException.__new__(ModeException)
 *         __fbthrift_inst._cpp_obj = make_shared[cModeException](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ModeException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 */
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___ModeException_FieldsSetter->create(__pyx_v___fbthrift_inst->_cpp_obj.get())); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v___fbthrift_inst->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v___fbthrift_inst->_fields_setter));
  __pyx_v___fbthrift_inst->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___ModeException_FieldsSetter *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":680
 *         __fbthrift_inst._cpp_obj = make_shared[cModeException](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ModeException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():             # <<<<<<<<<<<<<<
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst
 */
  __pyx_t_5 = 0;
  __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_kwargs, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_8;
  __pyx_t_8 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_6, &__pyx_t_5, &__pyx_t_8, &__pyx_t_9, NULL, __pyx_t_7);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v___fbthrift_name, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v__fbthrift_value, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "picard/types.pyx":681
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__ModeException_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v___fbthrift_name))||((__pyx_v___fbthrift_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v___fbthrift_name)->tp_name), 0))) __PYX_ERR(0, 681, __pyx_L1_error)
    ((struct __pyx_vtabstruct_6picard_5types_ModeException *)__pyx_v___fbthrift_inst->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_set_field(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v___fbthrift_inst), ((PyObject*)__pyx_v___fbthrift_name), __pyx_v__fbthrift_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "picard/types.pyx":682
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":674
 *         super().__init__(**kwargs)
 * 
 *     def __call__(ModeException self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("picard.types.ModeException.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XDECREF(__pyx_v___fbthrift_name);
  __Pyx_XDECREF(__pyx_v__fbthrift_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":684
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

static void __pyx_f_6picard_5types_13ModeException__fbthrift_set_field(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_set_field", 0);

  /* "picard/types.pyx":685
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 *         self._fields_setter.set_field(name.encode("utf-8"), value)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _fbthrift_isset(self):
 */
  if (unlikely(__pyx_v_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 685, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 685, __pyx_L1_error)
  ((struct __pyx_vtabstruct_6picard_12types_fields___ModeException_FieldsSetter *)__pyx_v_self->_fields_setter->__pyx_base.__pyx_vtab)->__pyx_base.set_field(((struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter *)__pyx_v_self->_fields_setter), __pyx_t_2, __pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":684
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.ModeException._fbthrift_set_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "picard/types.pyx":687
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("ModeException", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 */

static PyObject *__pyx_f_6picard_5types_13ModeException__fbthrift_isset(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_isset", 0);

  /* "picard/types.pyx":688
 * 
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("ModeException", {             # <<<<<<<<<<<<<<
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 *         })
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_thrift); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_py3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IsSet); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":689
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("ModeException", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),             # <<<<<<<<<<<<<<
 *         })
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).message_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_message, __pyx_t_4) < 0) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_ModeException, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_ModeException, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_ModeException);
    __Pyx_GIVEREF(__pyx_n_u_ModeException);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_n_u_ModeException);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":687
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("ModeException", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.ModeException._fbthrift_isset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":693
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cModeException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <ModeException>ModeException.__new__(ModeException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

static PyObject *__pyx_f_6picard_5types_13ModeException_create(std::shared_ptr<::cpp2::ModeException>  __pyx_v_cpp_obj) {
  struct __pyx_obj_6picard_5types_ModeException *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":694
 *     @staticmethod
 *     cdef create(shared_ptr[cModeException] cpp_obj):
 *         __fbthrift_inst = <ModeException>ModeException.__new__(ModeException)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_ModeException(((PyTypeObject *)__pyx_ptype_6picard_5types_ModeException), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_ModeException *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":695
 *     cdef create(shared_ptr[cModeException] cpp_obj):
 *         __fbthrift_inst = <ModeException>ModeException.__new__(ModeException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<::cpp2::ModeException> >(__pyx_v_cpp_obj);

  /* "picard/types.pyx":696
 *         __fbthrift_inst = <ModeException>ModeException.__new__(ModeException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":693
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cModeException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <ModeException>ModeException.__new__(ModeException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.ModeException.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":699
 * 
 *     @property
 *     def message(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_13ModeException_7message_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_13ModeException_7message_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_13ModeException_7message___get__(((struct __pyx_obj_6picard_5types_ModeException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_13ModeException_7message___get__(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":701
 *     def message(self):
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->_cpp_obj).message_ref().value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 701, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":699
 * 
 *     @property
 *     def message(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.ModeException.message.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":704
 * 
 * 
 *     def __hash__(ModeException self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6picard_5types_13ModeException_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6picard_5types_13ModeException_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_13ModeException_4__hash__(((struct __pyx_obj_6picard_5types_ModeException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6picard_5types_13ModeException_4__hash__(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "picard/types.pyx":705
 * 
 *     def __hash__(ModeException self):
 *         return  super().__hash__()             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(ModeException self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_ModeException));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_ModeException));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_ModeException));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "picard/types.pyx":704
 * 
 * 
 *     def __hash__(ModeException self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.ModeException.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":707
 *         return  super().__hash__()
 * 
 *     def __copy__(ModeException self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cModeException] cpp_obj = make_shared[cModeException](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_13ModeException_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_13ModeException_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_13ModeException_6__copy__(((struct __pyx_obj_6picard_5types_ModeException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_13ModeException_6__copy__(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self) {
  std::shared_ptr<::cpp2::ModeException>  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::ModeException>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":708
 * 
 *     def __copy__(ModeException self):
 *         cdef shared_ptr[cModeException] cpp_obj = make_shared[cModeException](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::ModeException>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 708, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":711
 *             deref(self._cpp_obj)
 *         )
 *         return ModeException.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_13ModeException_create(cython_std::move<std::shared_ptr<::cpp2::ModeException> >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":707
 *         return  super().__hash__()
 * 
 *     def __copy__(ModeException self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cModeException] cpp_obj = make_shared[cModeException](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.ModeException.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":713
 *         return ModeException.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cModeException](
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_13ModeException_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6picard_5types_13ModeException_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_13ModeException_8__richcmp__(((struct __pyx_obj_6picard_5types_ModeException *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_13ModeException_8__richcmp__(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "picard/types.pyx":714
 * 
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)             # <<<<<<<<<<<<<<
 *         return __richcmp[cModeException](
 *             self._cpp_obj,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_ModeException *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_cmp_sametype(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":715
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cModeException](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<ModeException>other)._cpp_obj,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":719
 *             (<ModeException>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = (__pyx_v_r == Py_None);
  if ((__pyx_t_2 != 0)) {

    /* "picard/types.pyx":715
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cModeException](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<ModeException>other)._cpp_obj,
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(::thrift::py3::richcmp<::cpp2::ModeException>(__pyx_v_self->_cpp_obj, ((struct __pyx_obj_6picard_5types_ModeException *)__pyx_v_other)->_cpp_obj, __pyx_v_op)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "picard/types.pyx":719
 *             (<ModeException>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_1 = __pyx_v_r;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":713
 *         return ModeException.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cModeException](
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.ModeException.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":722
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__ModeException()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_13ModeException_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_13ModeException_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_13ModeException_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_13ModeException_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_13ModeException_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_13ModeException_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":723
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__ModeException()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__ModeException()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":722
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__ModeException()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.ModeException.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":726
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cModeException].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_13ModeException_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_13ModeException_13__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_13ModeException_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_13ModeException_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_13ModeException_12__get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_13ModeException_12__get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":728
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cModeException].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::StructMetadata<::cpp2::ModeException> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":729
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cModeException].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":726
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cModeException].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.ModeException.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":732
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.ModeException"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_13ModeException_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_13ModeException_15__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_13ModeException_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_13ModeException_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_13ModeException_14__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_13ModeException_14__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":733
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.ModeException"             # <<<<<<<<<<<<<<
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_ModeException);
  __pyx_r = __pyx_kp_u_picard_ModeException;
  goto __pyx_L0;

  /* "picard/types.pyx":732
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.ModeException"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":735
 *         return "picard.ModeException"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cModeException](idx)
 * 
 */

static std::string_view __pyx_f_6picard_5types_13ModeException__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self, size_t __pyx_v_idx) {
  std::string_view __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string_view __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_field_name_by_index", 0);

  /* "picard/types.pyx":736
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 *         return __get_field_name_by_index[cModeException](idx)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  try {
    __pyx_t_1 = ::thrift::py3::get_field_name_by_index<::cpp2::ModeException>(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 736, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "picard/types.pyx":735
 *         return "picard.ModeException"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cModeException](idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("picard.types.ModeException._fbthrift_get_field_name_by_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":738
 *         return __get_field_name_by_index[cModeException](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 1
 * 
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_13ModeException_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_13ModeException_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6picard_5types_13ModeException_16__cinit__(((struct __pyx_obj_6picard_5types_ModeException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_13ModeException_16__cinit__(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "picard/types.pyx":739
 * 
 *     def __cinit__(self):
 *         self._fbthrift_struct_size = 1             # <<<<<<<<<<<<<<
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(ModeException self, __Protocol proto):
 */
  __pyx_v_self->__pyx_base._fbthrift_struct_size = 1;

  /* "picard/types.pyx":738
 *         return __get_field_name_by_index[cModeException](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 1
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":741
 *         self._fbthrift_struct_size = 1
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(ModeException self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_13ModeException__serialize(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  std::unique_ptr<folly::IOBuf>  __pyx_v_data;
  struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::unique_ptr<folly::IOBuf>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_serialize", 0);

  /* "picard/types.pyx":743
 *     cdef _fbthrift_iobuf.IOBuf _serialize(ModeException self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cModeException](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":744
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 *             data = cmove(serializer.cserialize[cModeException](self._cpp_obj.get(), proto))             # <<<<<<<<<<<<<<
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 */
        try {
          __pyx_t_1 = ::thrift::py3::serialize<::cpp2::ModeException>(__pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 744, __pyx_L4_error)
        }
        __pyx_v_data = cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_t_1);
      }

      /* "picard/types.pyx":743
 *     cdef _fbthrift_iobuf.IOBuf _serialize(ModeException self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cModeException](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":745
 *         with nogil:
 *             data = cmove(serializer.cserialize[cModeException](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))             # <<<<<<<<<<<<<<
 * 
 *     cdef cuint32_t _deserialize(ModeException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = ((PyObject *)__pyx_f_5folly_5iobuf_from_unique_ptr(cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_v_data))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_5folly_5iobuf_IOBuf *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":741
 *         self._fbthrift_struct_size = 1
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(ModeException self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.ModeException._serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":747
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(ModeException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cModeException]()
 */

static uint32_t __pyx_f_6picard_5types_13ModeException__deserialize(struct __pyx_obj_6picard_5types_ModeException *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  uint32_t __pyx_v_needed;
  uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::ModeException>  __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_deserialize", 0);

  /* "picard/types.pyx":749
 *     cdef cuint32_t _deserialize(ModeException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cModeException]()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             needed = serializer.cdeserialize[cModeException](buf, self._cpp_obj.get(), proto)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::ModeException>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 749, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":750
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cModeException]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cModeException](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":751
 *         self._cpp_obj = make_shared[cModeException]()
 *         with nogil:
 *             needed = serializer.cdeserialize[cModeException](buf, self._cpp_obj.get(), proto)             # <<<<<<<<<<<<<<
 *         return needed
 * 
 */
        try {
          __pyx_t_2 = ::thrift::py3::deserialize<::cpp2::ModeException>(__pyx_v_buf, __pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 751, __pyx_L4_error)
        }
        __pyx_v_needed = __pyx_t_2;
      }

      /* "picard/types.pyx":750
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cModeException]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cModeException](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":752
 *         with nogil:
 *             needed = serializer.cdeserialize[cModeException](buf, self._cpp_obj.get(), proto)
 *         return needed             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_needed;
  goto __pyx_L0;

  /* "picard/types.pyx":747
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(ModeException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cModeException]()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.ModeException._deserialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":761
 *     Type = __FeedFatalExceptionType
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *         self, *,
 *         TokenizerNotRegisteredException tokenizerNotRegisteredException=None,
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_18FeedFatalException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_18FeedFatalException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_tokenizerNotRegisteredException = 0;
  struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_tokenizerPrefixException = 0;
  struct __pyx_obj_6picard_5types_ModeException *__pyx_v_modeException = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tokenizerNotRegisteredException,&__pyx_n_s_tokenizerPrefixException,&__pyx_n_s_modeException,0};
    PyObject* values[3] = {0,0,0};

    /* "picard/types.pyx":763
 *     def __init__(
 *         self, *,
 *         TokenizerNotRegisteredException tokenizerNotRegisteredException=None,             # <<<<<<<<<<<<<<
 *         TokenizerPrefixException tokenizerPrefixException=None,
 *         ModeException modeException=None
 */
    values[0] = (PyObject *)((struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)Py_None);

    /* "picard/types.pyx":764
 *         self, *,
 *         TokenizerNotRegisteredException tokenizerNotRegisteredException=None,
 *         TokenizerPrefixException tokenizerPrefixException=None,             # <<<<<<<<<<<<<<
 *         ModeException modeException=None
 *     ):
 */
    values[1] = (PyObject *)((struct __pyx_obj_6picard_5types_TokenizerPrefixException *)Py_None);

    /* "picard/types.pyx":765
 *         TokenizerNotRegisteredException tokenizerNotRegisteredException=None,
 *         TokenizerPrefixException tokenizerPrefixException=None,
 *         ModeException modeException=None             # <<<<<<<<<<<<<<
 *     ):
 *         self._cpp_obj = __to_shared_ptr(cmove(FeedFatalException._make_instance(
 */
    values[2] = (PyObject *)((struct __pyx_obj_6picard_5types_ModeException *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      if (kw_args > 0 && likely(kw_args <= 3)) {
        Py_ssize_t index;
        for (index = 0; index < 3 && kw_args > 0; index++) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, *__pyx_pyargnames[index]);
          if (value) { values[index] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, 0, "__init__") < 0)) __PYX_ERR(0, 761, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 0) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_tokenizerNotRegisteredException = ((struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)values[0]);
    __pyx_v_tokenizerPrefixException = ((struct __pyx_obj_6picard_5types_TokenizerPrefixException *)values[1]);
    __pyx_v_modeException = ((struct __pyx_obj_6picard_5types_ModeException *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 761, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.FeedFatalException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tokenizerNotRegisteredException), __pyx_ptype_6picard_5types_TokenizerNotRegisteredException, 1, "tokenizerNotRegisteredException", 0))) __PYX_ERR(0, 763, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tokenizerPrefixException), __pyx_ptype_6picard_5types_TokenizerPrefixException, 1, "tokenizerPrefixException", 0))) __PYX_ERR(0, 764, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_modeException), __pyx_ptype_6picard_5types_ModeException, 1, "modeException", 0))) __PYX_ERR(0, 765, __pyx_L1_error)
  __pyx_r = __pyx_pf_6picard_5types_18FeedFatalException___init__(((struct __pyx_obj_6picard_5types_FeedFatalException *)__pyx_v_self), __pyx_v_tokenizerNotRegisteredException, __pyx_v_tokenizerPrefixException, __pyx_v_modeException);

  /* "picard/types.pyx":761
 *     Type = __FeedFatalExceptionType
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *         self, *,
 *         TokenizerNotRegisteredException tokenizerNotRegisteredException=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_18FeedFatalException___init__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self, struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_tokenizerNotRegisteredException, struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_tokenizerPrefixException, struct __pyx_obj_6picard_5types_ModeException *__pyx_v_modeException) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::unique_ptr<::cpp2::FeedFatalException>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":767
 *         ModeException modeException=None
 *     ):
 *         self._cpp_obj = __to_shared_ptr(cmove(FeedFatalException._make_instance(             # <<<<<<<<<<<<<<
 *           NULL,
 *           tokenizerNotRegisteredException,
 */
  __pyx_t_1 = __pyx_f_6picard_5types_18FeedFatalException__make_instance(NULL, __pyx_v_tokenizerNotRegisteredException, __pyx_v_tokenizerPrefixException, __pyx_v_modeException); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 767, __pyx_L1_error)
  __pyx_v_self->_cpp_obj = folly::to_shared_ptr<::cpp2::FeedFatalException>(cython_std::move<std::unique_ptr<::cpp2::FeedFatalException> >(__pyx_t_1));

  /* "picard/types.pyx":773
 *           modeException,
 *         )))
 *         self._load_cache()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_6picard_5types_FeedFatalException *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->_load_cache(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":761
 *     Type = __FeedFatalExceptionType
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *         self, *,
 *         TokenizerNotRegisteredException tokenizerNotRegisteredException=None,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedFatalException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":776
 * 
 *     @staticmethod
 *     def fromValue(value):             # <<<<<<<<<<<<<<
 *         if value is None:
 *             return FeedFatalException()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_3fromValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_18FeedFatalException_3fromValue = {"fromValue", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedFatalException_3fromValue, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_3fromValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fromValue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fromValue") < 0)) __PYX_ERR(0, 776, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_value = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fromValue", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 776, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.FeedFatalException.fromValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_18FeedFatalException_2fromValue(__pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_2fromValue(PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fromValue", 0);

  /* "picard/types.pyx":777
 *     @staticmethod
 *     def fromValue(value):
 *         if value is None:             # <<<<<<<<<<<<<<
 *             return FeedFatalException()
 *         if isinstance(value, TokenizerNotRegisteredException):
 */
  __pyx_t_1 = (__pyx_v_value == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":778
 *     def fromValue(value):
 *         if value is None:
 *             return FeedFatalException()             # <<<<<<<<<<<<<<
 *         if isinstance(value, TokenizerNotRegisteredException):
 *             return FeedFatalException(tokenizerNotRegisteredException=value)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":777
 *     @staticmethod
 *     def fromValue(value):
 *         if value is None:             # <<<<<<<<<<<<<<
 *             return FeedFatalException()
 *         if isinstance(value, TokenizerNotRegisteredException):
 */
  }

  /* "picard/types.pyx":779
 *         if value is None:
 *             return FeedFatalException()
 *         if isinstance(value, TokenizerNotRegisteredException):             # <<<<<<<<<<<<<<
 *             return FeedFatalException(tokenizerNotRegisteredException=value)
 *         if isinstance(value, TokenizerPrefixException):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6picard_5types_TokenizerNotRegisteredException); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "picard/types.pyx":780
 *             return FeedFatalException()
 *         if isinstance(value, TokenizerNotRegisteredException):
 *             return FeedFatalException(tokenizerNotRegisteredException=value)             # <<<<<<<<<<<<<<
 *         if isinstance(value, TokenizerPrefixException):
 *             return FeedFatalException(tokenizerPrefixException=value)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_tokenizerNotRegisteredException, __pyx_v_value) < 0) __PYX_ERR(0, 780, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":779
 *         if value is None:
 *             return FeedFatalException()
 *         if isinstance(value, TokenizerNotRegisteredException):             # <<<<<<<<<<<<<<
 *             return FeedFatalException(tokenizerNotRegisteredException=value)
 *         if isinstance(value, TokenizerPrefixException):
 */
  }

  /* "picard/types.pyx":781
 *         if isinstance(value, TokenizerNotRegisteredException):
 *             return FeedFatalException(tokenizerNotRegisteredException=value)
 *         if isinstance(value, TokenizerPrefixException):             # <<<<<<<<<<<<<<
 *             return FeedFatalException(tokenizerPrefixException=value)
 *         if isinstance(value, ModeException):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6picard_5types_TokenizerPrefixException); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":782
 *             return FeedFatalException(tokenizerNotRegisteredException=value)
 *         if isinstance(value, TokenizerPrefixException):
 *             return FeedFatalException(tokenizerPrefixException=value)             # <<<<<<<<<<<<<<
 *         if isinstance(value, ModeException):
 *             return FeedFatalException(modeException=value)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_tokenizerPrefixException, __pyx_v_value) < 0) __PYX_ERR(0, 782, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException), __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":781
 *         if isinstance(value, TokenizerNotRegisteredException):
 *             return FeedFatalException(tokenizerNotRegisteredException=value)
 *         if isinstance(value, TokenizerPrefixException):             # <<<<<<<<<<<<<<
 *             return FeedFatalException(tokenizerPrefixException=value)
 *         if isinstance(value, ModeException):
 */
  }

  /* "picard/types.pyx":783
 *         if isinstance(value, TokenizerPrefixException):
 *             return FeedFatalException(tokenizerPrefixException=value)
 *         if isinstance(value, ModeException):             # <<<<<<<<<<<<<<
 *             return FeedFatalException(modeException=value)
 *         raise ValueError(f"Unable to derive correct union field for value: {value}")
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6picard_5types_ModeException); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "picard/types.pyx":784
 *             return FeedFatalException(tokenizerPrefixException=value)
 *         if isinstance(value, ModeException):
 *             return FeedFatalException(modeException=value)             # <<<<<<<<<<<<<<
 *         raise ValueError(f"Unable to derive correct union field for value: {value}")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_modeException, __pyx_v_value) < 0) __PYX_ERR(0, 784, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":783
 *         if isinstance(value, TokenizerPrefixException):
 *             return FeedFatalException(tokenizerPrefixException=value)
 *         if isinstance(value, ModeException):             # <<<<<<<<<<<<<<
 *             return FeedFatalException(modeException=value)
 *         raise ValueError(f"Unable to derive correct union field for value: {value}")
 */
  }

  /* "picard/types.pyx":785
 *         if isinstance(value, ModeException):
 *             return FeedFatalException(modeException=value)
 *         raise ValueError(f"Unable to derive correct union field for value: {value}")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_value, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unable_to_derive_correct_union_f, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(0, 785, __pyx_L1_error)

  /* "picard/types.pyx":776
 * 
 *     @staticmethod
 *     def fromValue(value):             # <<<<<<<<<<<<<<
 *         if value is None:
 *             return FeedFatalException()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.FeedFatalException.fromValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":788
 * 
 *     @staticmethod
 *     cdef unique_ptr[cFeedFatalException] _make_instance(             # <<<<<<<<<<<<<<
 *         cFeedFatalException* base_instance,
 *         TokenizerNotRegisteredException tokenizerNotRegisteredException,
 */

static std::unique_ptr<::cpp2::FeedFatalException>  __pyx_f_6picard_5types_18FeedFatalException__make_instance(CYTHON_UNUSED ::cpp2::FeedFatalException *__pyx_v_base_instance, struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *__pyx_v_tokenizerNotRegisteredException, struct __pyx_obj_6picard_5types_TokenizerPrefixException *__pyx_v_tokenizerPrefixException, struct __pyx_obj_6picard_5types_ModeException *__pyx_v_modeException) {
  std::unique_ptr<::cpp2::FeedFatalException>  __pyx_v_c_inst;
  int __pyx_v_any_set;
  std::unique_ptr<::cpp2::FeedFatalException>  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_instance", 0);

  /* "picard/types.pyx":794
 *         ModeException modeException
 *     ) except *:
 *         cdef unique_ptr[cFeedFatalException] c_inst = make_unique[cFeedFatalException]()             # <<<<<<<<<<<<<<
 *         cdef bint any_set = False
 *         if tokenizerNotRegisteredException is not None:
 */
  __pyx_v_c_inst = std::make_unique<::cpp2::FeedFatalException>();

  /* "picard/types.pyx":795
 *     ) except *:
 *         cdef unique_ptr[cFeedFatalException] c_inst = make_unique[cFeedFatalException]()
 *         cdef bint any_set = False             # <<<<<<<<<<<<<<
 *         if tokenizerNotRegisteredException is not None:
 *             if any_set:
 */
  __pyx_v_any_set = 0;

  /* "picard/types.pyx":796
 *         cdef unique_ptr[cFeedFatalException] c_inst = make_unique[cFeedFatalException]()
 *         cdef bint any_set = False
 *         if tokenizerNotRegisteredException is not None:             # <<<<<<<<<<<<<<
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_tokenizerNotRegisteredException) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":797
 *         cdef bint any_set = False
 *         if tokenizerNotRegisteredException is not None:
 *             if any_set:             # <<<<<<<<<<<<<<
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_tokenizerNotRegisteredException(deref((<TokenizerNotRegisteredException?> tokenizerNotRegisteredException)._cpp_obj))
 */
    __pyx_t_2 = (__pyx_v_any_set != 0);
    if (unlikely(__pyx_t_2)) {

      /* "picard/types.pyx":798
 *         if tokenizerNotRegisteredException is not None:
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")             # <<<<<<<<<<<<<<
 *             deref(c_inst).set_tokenizerNotRegisteredException(deref((<TokenizerNotRegisteredException?> tokenizerNotRegisteredException)._cpp_obj))
 *             any_set = True
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 798, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 798, __pyx_L1_error)

      /* "picard/types.pyx":797
 *         cdef bint any_set = False
 *         if tokenizerNotRegisteredException is not None:
 *             if any_set:             # <<<<<<<<<<<<<<
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_tokenizerNotRegisteredException(deref((<TokenizerNotRegisteredException?> tokenizerNotRegisteredException)._cpp_obj))
 */
    }

    /* "picard/types.pyx":799
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_tokenizerNotRegisteredException(deref((<TokenizerNotRegisteredException?> tokenizerNotRegisteredException)._cpp_obj))             # <<<<<<<<<<<<<<
 *             any_set = True
 *         if tokenizerPrefixException is not None:
 */
    if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_tokenizerNotRegisteredException), __pyx_ptype_6picard_5types_TokenizerNotRegisteredException)))) __PYX_ERR(0, 799, __pyx_L1_error)
    (void)((*__pyx_v_c_inst).set_tokenizerNotRegisteredException((*__pyx_v_tokenizerNotRegisteredException->_cpp_obj)));

    /* "picard/types.pyx":800
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_tokenizerNotRegisteredException(deref((<TokenizerNotRegisteredException?> tokenizerNotRegisteredException)._cpp_obj))
 *             any_set = True             # <<<<<<<<<<<<<<
 *         if tokenizerPrefixException is not None:
 *             if any_set:
 */
    __pyx_v_any_set = 1;

    /* "picard/types.pyx":796
 *         cdef unique_ptr[cFeedFatalException] c_inst = make_unique[cFeedFatalException]()
 *         cdef bint any_set = False
 *         if tokenizerNotRegisteredException is not None:             # <<<<<<<<<<<<<<
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 */
  }

  /* "picard/types.pyx":801
 *             deref(c_inst).set_tokenizerNotRegisteredException(deref((<TokenizerNotRegisteredException?> tokenizerNotRegisteredException)._cpp_obj))
 *             any_set = True
 *         if tokenizerPrefixException is not None:             # <<<<<<<<<<<<<<
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_tokenizerPrefixException) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "picard/types.pyx":802
 *             any_set = True
 *         if tokenizerPrefixException is not None:
 *             if any_set:             # <<<<<<<<<<<<<<
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_tokenizerPrefixException(deref((<TokenizerPrefixException?> tokenizerPrefixException)._cpp_obj))
 */
    __pyx_t_1 = (__pyx_v_any_set != 0);
    if (unlikely(__pyx_t_1)) {

      /* "picard/types.pyx":803
 *         if tokenizerPrefixException is not None:
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")             # <<<<<<<<<<<<<<
 *             deref(c_inst).set_tokenizerPrefixException(deref((<TokenizerPrefixException?> tokenizerPrefixException)._cpp_obj))
 *             any_set = True
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 803, __pyx_L1_error)

      /* "picard/types.pyx":802
 *             any_set = True
 *         if tokenizerPrefixException is not None:
 *             if any_set:             # <<<<<<<<<<<<<<
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_tokenizerPrefixException(deref((<TokenizerPrefixException?> tokenizerPrefixException)._cpp_obj))
 */
    }

    /* "picard/types.pyx":804
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_tokenizerPrefixException(deref((<TokenizerPrefixException?> tokenizerPrefixException)._cpp_obj))             # <<<<<<<<<<<<<<
 *             any_set = True
 *         if modeException is not None:
 */
    if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_tokenizerPrefixException), __pyx_ptype_6picard_5types_TokenizerPrefixException)))) __PYX_ERR(0, 804, __pyx_L1_error)
    (void)((*__pyx_v_c_inst).set_tokenizerPrefixException((*__pyx_v_tokenizerPrefixException->_cpp_obj)));

    /* "picard/types.pyx":805
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_tokenizerPrefixException(deref((<TokenizerPrefixException?> tokenizerPrefixException)._cpp_obj))
 *             any_set = True             # <<<<<<<<<<<<<<
 *         if modeException is not None:
 *             if any_set:
 */
    __pyx_v_any_set = 1;

    /* "picard/types.pyx":801
 *             deref(c_inst).set_tokenizerNotRegisteredException(deref((<TokenizerNotRegisteredException?> tokenizerNotRegisteredException)._cpp_obj))
 *             any_set = True
 *         if tokenizerPrefixException is not None:             # <<<<<<<<<<<<<<
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 */
  }

  /* "picard/types.pyx":806
 *             deref(c_inst).set_tokenizerPrefixException(deref((<TokenizerPrefixException?> tokenizerPrefixException)._cpp_obj))
 *             any_set = True
 *         if modeException is not None:             # <<<<<<<<<<<<<<
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_modeException) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":807
 *             any_set = True
 *         if modeException is not None:
 *             if any_set:             # <<<<<<<<<<<<<<
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_modeException(deref((<ModeException?> modeException)._cpp_obj))
 */
    __pyx_t_2 = (__pyx_v_any_set != 0);
    if (unlikely(__pyx_t_2)) {

      /* "picard/types.pyx":808
 *         if modeException is not None:
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")             # <<<<<<<<<<<<<<
 *             deref(c_inst).set_modeException(deref((<ModeException?> modeException)._cpp_obj))
 *             any_set = True
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 808, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 808, __pyx_L1_error)

      /* "picard/types.pyx":807
 *             any_set = True
 *         if modeException is not None:
 *             if any_set:             # <<<<<<<<<<<<<<
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_modeException(deref((<ModeException?> modeException)._cpp_obj))
 */
    }

    /* "picard/types.pyx":809
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_modeException(deref((<ModeException?> modeException)._cpp_obj))             # <<<<<<<<<<<<<<
 *             any_set = True
 *         # in C++ you don't have to call move(), but this doesn't translate
 */
    if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_modeException), __pyx_ptype_6picard_5types_ModeException)))) __PYX_ERR(0, 809, __pyx_L1_error)
    (void)((*__pyx_v_c_inst).set_modeException((*__pyx_v_modeException->_cpp_obj)));

    /* "picard/types.pyx":810
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_modeException(deref((<ModeException?> modeException)._cpp_obj))
 *             any_set = True             # <<<<<<<<<<<<<<
 *         # in C++ you don't have to call move(), but this doesn't translate
 *         # into a C++ return statement, so you do here
 */
    __pyx_v_any_set = 1;

    /* "picard/types.pyx":806
 *             deref(c_inst).set_tokenizerPrefixException(deref((<TokenizerPrefixException?> tokenizerPrefixException)._cpp_obj))
 *             any_set = True
 *         if modeException is not None:             # <<<<<<<<<<<<<<
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 */
  }

  /* "picard/types.pyx":813
 *         # in C++ you don't have to call move(), but this doesn't translate
 *         # into a C++ return statement, so you do here
 *         return cmove(c_inst)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = cython_std::move<std::unique_ptr<::cpp2::FeedFatalException> >(__pyx_v_c_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":788
 * 
 *     @staticmethod
 *     cdef unique_ptr[cFeedFatalException] _make_instance(             # <<<<<<<<<<<<<<
 *         cFeedFatalException* base_instance,
 *         TokenizerNotRegisteredException tokenizerNotRegisteredException,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedFatalException._make_instance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":816
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedFatalException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedFatalException>FeedFatalException.__new__(FeedFatalException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

static PyObject *__pyx_f_6picard_5types_18FeedFatalException_create(std::shared_ptr<::cpp2::FeedFatalException>  __pyx_v_cpp_obj) {
  struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":817
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedFatalException] cpp_obj):
 *         __fbthrift_inst = <FeedFatalException>FeedFatalException.__new__(FeedFatalException)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         __fbthrift_inst._load_cache()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_FeedFatalException(((PyTypeObject *)__pyx_ptype_6picard_5types_FeedFatalException), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 817, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_FeedFatalException *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":818
 *     cdef create(shared_ptr[cFeedFatalException] cpp_obj):
 *         __fbthrift_inst = <FeedFatalException>FeedFatalException.__new__(FeedFatalException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._load_cache()
 *         return __fbthrift_inst
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<::cpp2::FeedFatalException> >(__pyx_v_cpp_obj);

  /* "picard/types.pyx":819
 *         __fbthrift_inst = <FeedFatalException>FeedFatalException.__new__(FeedFatalException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         __fbthrift_inst._load_cache()             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_6picard_5types_FeedFatalException *)__pyx_v___fbthrift_inst->__pyx_base.__pyx_base.__pyx_vtab)->_load_cache(__pyx_v___fbthrift_inst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":820
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         __fbthrift_inst._load_cache()
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":816
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedFatalException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedFatalException>FeedFatalException.__new__(FeedFatalException)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedFatalException.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":823
 * 
 *     @property
 *     def tokenizerNotRegisteredException(self):             # <<<<<<<<<<<<<<
 *         if self.type.value != 1:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not tokenizerNotRegisteredException')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_31tokenizerNotRegisteredException_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_31tokenizerNotRegisteredException_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedFatalException_31tokenizerNotRegisteredException___get__(((struct __pyx_obj_6picard_5types_FeedFatalException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_31tokenizerNotRegisteredException___get__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":824
 *     @property
 *     def tokenizerNotRegisteredException(self):
 *         if self.type.value != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not tokenizerNotRegisteredException')
 *         return self.value
 */
  __pyx_t_1 = ((__pyx_v_self->type->__pyx_base.value != 1) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "picard/types.pyx":825
 *     def tokenizerNotRegisteredException(self):
 *         if self.type.value != 1:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not tokenizerNotRegisteredException')             # <<<<<<<<<<<<<<
 *         return self.value
 * 
 */
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Union_contains_a_value_of_type);
    __pyx_t_3 += 31;
    __Pyx_GIVEREF(__pyx_kp_u_Union_contains_a_value_of_type);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Union_contains_a_value_of_type);
    __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_self->type->__pyx_base.name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_4;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_not_tokenizerNotRegisteredExcep);
    __pyx_t_3 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_not_tokenizerNotRegisteredExcep);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_not_tokenizerNotRegisteredExcep);
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 825, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 825, __pyx_L1_error)

    /* "picard/types.pyx":824
 *     @property
 *     def tokenizerNotRegisteredException(self):
 *         if self.type.value != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not tokenizerNotRegisteredException')
 *         return self.value
 */
  }

  /* "picard/types.pyx":826
 *         if self.type.value != 1:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not tokenizerNotRegisteredException')
 *         return self.value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->value);
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* "picard/types.pyx":823
 * 
 *     @property
 *     def tokenizerNotRegisteredException(self):             # <<<<<<<<<<<<<<
 *         if self.type.value != 1:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not tokenizerNotRegisteredException')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.FeedFatalException.tokenizerNotRegisteredException.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":829
 * 
 *     @property
 *     def tokenizerPrefixException(self):             # <<<<<<<<<<<<<<
 *         if self.type.value != 2:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not tokenizerPrefixException')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_24tokenizerPrefixException_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_24tokenizerPrefixException_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedFatalException_24tokenizerPrefixException___get__(((struct __pyx_obj_6picard_5types_FeedFatalException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_24tokenizerPrefixException___get__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":830
 *     @property
 *     def tokenizerPrefixException(self):
 *         if self.type.value != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not tokenizerPrefixException')
 *         return self.value
 */
  __pyx_t_1 = ((__pyx_v_self->type->__pyx_base.value != 2) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "picard/types.pyx":831
 *     def tokenizerPrefixException(self):
 *         if self.type.value != 2:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not tokenizerPrefixException')             # <<<<<<<<<<<<<<
 *         return self.value
 * 
 */
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Union_contains_a_value_of_type);
    __pyx_t_3 += 31;
    __Pyx_GIVEREF(__pyx_kp_u_Union_contains_a_value_of_type);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Union_contains_a_value_of_type);
    __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_self->type->__pyx_base.name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_4;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_not_tokenizerPrefixException);
    __pyx_t_3 += 30;
    __Pyx_GIVEREF(__pyx_kp_u_not_tokenizerPrefixException);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_not_tokenizerPrefixException);
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 831, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 831, __pyx_L1_error)

    /* "picard/types.pyx":830
 *     @property
 *     def tokenizerPrefixException(self):
 *         if self.type.value != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not tokenizerPrefixException')
 *         return self.value
 */
  }

  /* "picard/types.pyx":832
 *         if self.type.value != 2:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not tokenizerPrefixException')
 *         return self.value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->value);
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* "picard/types.pyx":829
 * 
 *     @property
 *     def tokenizerPrefixException(self):             # <<<<<<<<<<<<<<
 *         if self.type.value != 2:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not tokenizerPrefixException')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.FeedFatalException.tokenizerPrefixException.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":835
 * 
 *     @property
 *     def modeException(self):             # <<<<<<<<<<<<<<
 *         if self.type.value != 3:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not modeException')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_13modeException_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_13modeException_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedFatalException_13modeException___get__(((struct __pyx_obj_6picard_5types_FeedFatalException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_13modeException___get__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":836
 *     @property
 *     def modeException(self):
 *         if self.type.value != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not modeException')
 *         return self.value
 */
  __pyx_t_1 = ((__pyx_v_self->type->__pyx_base.value != 3) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "picard/types.pyx":837
 *     def modeException(self):
 *         if self.type.value != 3:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not modeException')             # <<<<<<<<<<<<<<
 *         return self.value
 * 
 */
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Union_contains_a_value_of_type);
    __pyx_t_3 += 31;
    __Pyx_GIVEREF(__pyx_kp_u_Union_contains_a_value_of_type);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Union_contains_a_value_of_type);
    __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_self->type->__pyx_base.name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_4;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_not_modeException);
    __pyx_t_3 += 19;
    __Pyx_GIVEREF(__pyx_kp_u_not_modeException);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_not_modeException);
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 837, __pyx_L1_error)

    /* "picard/types.pyx":836
 *     @property
 *     def modeException(self):
 *         if self.type.value != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not modeException')
 *         return self.value
 */
  }

  /* "picard/types.pyx":838
 *         if self.type.value != 3:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not modeException')
 *         return self.value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->value);
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* "picard/types.pyx":835
 * 
 *     @property
 *     def modeException(self):             # <<<<<<<<<<<<<<
 *         if self.type.value != 3:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not modeException')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.FeedFatalException.modeException.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":841
 * 
 * 
 *     def __hash__(FeedFatalException self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6picard_5types_18FeedFatalException_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6picard_5types_18FeedFatalException_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedFatalException_4__hash__(((struct __pyx_obj_6picard_5types_FeedFatalException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6picard_5types_18FeedFatalException_4__hash__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "picard/types.pyx":842
 * 
 *     def __hash__(FeedFatalException self):
 *         return  super().__hash__()             # <<<<<<<<<<<<<<
 * 
 *     cdef _load_cache(FeedFatalException self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 842, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "picard/types.pyx":841
 * 
 * 
 *     def __hash__(FeedFatalException self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedFatalException.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":844
 *         return  super().__hash__()
 * 
 *     cdef _load_cache(FeedFatalException self):             # <<<<<<<<<<<<<<
 *         self.type = FeedFatalException.Type(<int>(deref(self._cpp_obj).getType()))
 *         cdef int type = self.type.value
 */

static PyObject *__pyx_f_6picard_5types_18FeedFatalException__load_cache(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self) {
  int __pyx_v_type;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::shared_ptr<::cpp2::TokenizerNotRegisteredException>  __pyx_t_6;
  std::shared_ptr<::cpp2::TokenizerPrefixException>  __pyx_t_7;
  std::shared_ptr<::cpp2::ModeException>  __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_load_cache", 0);

  /* "picard/types.pyx":845
 * 
 *     cdef _load_cache(FeedFatalException self):
 *         self.type = FeedFatalException.Type(<int>(deref(self._cpp_obj).getType()))             # <<<<<<<<<<<<<<
 *         cdef int type = self.type.value
 *         if type == 0:    # Empty
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException), __pyx_n_s_Type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(((int)(*__pyx_v_self->_cpp_obj).getType())); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6picard_5types___FeedFatalExceptionType))))) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->type);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->type));
  __pyx_v_self->type = ((struct __pyx_obj_6picard_5types___FeedFatalExceptionType *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":846
 *     cdef _load_cache(FeedFatalException self):
 *         self.type = FeedFatalException.Type(<int>(deref(self._cpp_obj).getType()))
 *         cdef int type = self.type.value             # <<<<<<<<<<<<<<
 *         if type == 0:    # Empty
 *             self.value = None
 */
  __pyx_t_5 = __pyx_v_self->type->__pyx_base.value;
  __pyx_v_type = __pyx_t_5;

  /* "picard/types.pyx":847
 *         self.type = FeedFatalException.Type(<int>(deref(self._cpp_obj).getType()))
 *         cdef int type = self.type.value
 *         if type == 0:    # Empty             # <<<<<<<<<<<<<<
 *             self.value = None
 *         elif type == 1:
 */
  switch (__pyx_v_type) {
    case 0:

    /* "picard/types.pyx":848
 *         cdef int type = self.type.value
 *         if type == 0:    # Empty
 *             self.value = None             # <<<<<<<<<<<<<<
 *         elif type == 1:
 *             self.value = TokenizerNotRegisteredException.create(make_shared[cTokenizerNotRegisteredException](deref(self._cpp_obj).get_tokenizerNotRegisteredException()))
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->value);
    __Pyx_DECREF(__pyx_v_self->value);
    __pyx_v_self->value = Py_None;

    /* "picard/types.pyx":847
 *         self.type = FeedFatalException.Type(<int>(deref(self._cpp_obj).getType()))
 *         cdef int type = self.type.value
 *         if type == 0:    # Empty             # <<<<<<<<<<<<<<
 *             self.value = None
 *         elif type == 1:
 */
    break;
    case 1:

    /* "picard/types.pyx":850
 *             self.value = None
 *         elif type == 1:
 *             self.value = TokenizerNotRegisteredException.create(make_shared[cTokenizerNotRegisteredException](deref(self._cpp_obj).get_tokenizerNotRegisteredException()))             # <<<<<<<<<<<<<<
 *         elif type == 2:
 *             self.value = TokenizerPrefixException.create(make_shared[cTokenizerPrefixException](deref(self._cpp_obj).get_tokenizerPrefixException()))
 */
    try {
      __pyx_t_6 = std::make_shared<::cpp2::TokenizerNotRegisteredException>((*__pyx_v_self->_cpp_obj).get_tokenizerNotRegisteredException());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 850, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_f_6picard_5types_31TokenizerNotRegisteredException_create(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 850, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->value);
    __Pyx_DECREF(__pyx_v_self->value);
    __pyx_v_self->value = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "picard/types.pyx":849
 *         if type == 0:    # Empty
 *             self.value = None
 *         elif type == 1:             # <<<<<<<<<<<<<<
 *             self.value = TokenizerNotRegisteredException.create(make_shared[cTokenizerNotRegisteredException](deref(self._cpp_obj).get_tokenizerNotRegisteredException()))
 *         elif type == 2:
 */
    break;
    case 2:

    /* "picard/types.pyx":852
 *             self.value = TokenizerNotRegisteredException.create(make_shared[cTokenizerNotRegisteredException](deref(self._cpp_obj).get_tokenizerNotRegisteredException()))
 *         elif type == 2:
 *             self.value = TokenizerPrefixException.create(make_shared[cTokenizerPrefixException](deref(self._cpp_obj).get_tokenizerPrefixException()))             # <<<<<<<<<<<<<<
 *         elif type == 3:
 *             self.value = ModeException.create(make_shared[cModeException](deref(self._cpp_obj).get_modeException()))
 */
    try {
      __pyx_t_7 = std::make_shared<::cpp2::TokenizerPrefixException>((*__pyx_v_self->_cpp_obj).get_tokenizerPrefixException());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 852, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_f_6picard_5types_24TokenizerPrefixException_create(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->value);
    __Pyx_DECREF(__pyx_v_self->value);
    __pyx_v_self->value = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "picard/types.pyx":851
 *         elif type == 1:
 *             self.value = TokenizerNotRegisteredException.create(make_shared[cTokenizerNotRegisteredException](deref(self._cpp_obj).get_tokenizerNotRegisteredException()))
 *         elif type == 2:             # <<<<<<<<<<<<<<
 *             self.value = TokenizerPrefixException.create(make_shared[cTokenizerPrefixException](deref(self._cpp_obj).get_tokenizerPrefixException()))
 *         elif type == 3:
 */
    break;
    case 3:

    /* "picard/types.pyx":854
 *             self.value = TokenizerPrefixException.create(make_shared[cTokenizerPrefixException](deref(self._cpp_obj).get_tokenizerPrefixException()))
 *         elif type == 3:
 *             self.value = ModeException.create(make_shared[cModeException](deref(self._cpp_obj).get_modeException()))             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(FeedFatalException self):
 */
    try {
      __pyx_t_8 = std::make_shared<::cpp2::ModeException>((*__pyx_v_self->_cpp_obj).get_modeException());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 854, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_f_6picard_5types_13ModeException_create(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->value);
    __Pyx_DECREF(__pyx_v_self->value);
    __pyx_v_self->value = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "picard/types.pyx":853
 *         elif type == 2:
 *             self.value = TokenizerPrefixException.create(make_shared[cTokenizerPrefixException](deref(self._cpp_obj).get_tokenizerPrefixException()))
 *         elif type == 3:             # <<<<<<<<<<<<<<
 *             self.value = ModeException.create(make_shared[cModeException](deref(self._cpp_obj).get_modeException()))
 * 
 */
    break;
    default: break;
  }

  /* "picard/types.pyx":844
 *         return  super().__hash__()
 * 
 *     cdef _load_cache(FeedFatalException self):             # <<<<<<<<<<<<<<
 *         self.type = FeedFatalException.Type(<int>(deref(self._cpp_obj).getType()))
 *         cdef int type = self.type.value
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.FeedFatalException._load_cache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":856
 *             self.value = ModeException.create(make_shared[cModeException](deref(self._cpp_obj).get_modeException()))
 * 
 *     def __copy__(FeedFatalException self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cFeedFatalException] cpp_obj = make_shared[cFeedFatalException](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedFatalException_6__copy__(((struct __pyx_obj_6picard_5types_FeedFatalException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_6__copy__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self) {
  std::shared_ptr<::cpp2::FeedFatalException>  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedFatalException>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":857
 * 
 *     def __copy__(FeedFatalException self):
 *         cdef shared_ptr[cFeedFatalException] cpp_obj = make_shared[cFeedFatalException](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedFatalException>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 857, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":860
 *             deref(self._cpp_obj)
 *         )
 *         return FeedFatalException.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_18FeedFatalException_create(cython_std::move<std::shared_ptr<::cpp2::FeedFatalException> >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":856
 *             self.value = ModeException.create(make_shared[cModeException](deref(self._cpp_obj).get_modeException()))
 * 
 *     def __copy__(FeedFatalException self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cFeedFatalException] cpp_obj = make_shared[cFeedFatalException](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedFatalException.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":862
 *         return FeedFatalException.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedFatalException](
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedFatalException_8__richcmp__(((struct __pyx_obj_6picard_5types_FeedFatalException *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_8__richcmp__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "picard/types.pyx":863
 * 
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)             # <<<<<<<<<<<<<<
 *         return __richcmp[cFeedFatalException](
 *             self._cpp_obj,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_FeedFatalException *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base._fbthrift_cmp_sametype(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":864
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedFatalException](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<FeedFatalException>other)._cpp_obj,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":868
 *             (<FeedFatalException>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = (__pyx_v_r == Py_None);
  if ((__pyx_t_2 != 0)) {

    /* "picard/types.pyx":864
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedFatalException](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<FeedFatalException>other)._cpp_obj,
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(::thrift::py3::richcmp<::cpp2::FeedFatalException>(__pyx_v_self->_cpp_obj, ((struct __pyx_obj_6picard_5types_FeedFatalException *)__pyx_v_other)->_cpp_obj, __pyx_v_op)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "picard/types.pyx":868
 *             (<FeedFatalException>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_1 = __pyx_v_r;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":862
 *         return FeedFatalException.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedFatalException](
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedFatalException.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":871
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedFatalException()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_18FeedFatalException_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedFatalException_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_18FeedFatalException_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":872
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__FeedFatalException()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__FeedFatalException()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":871
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedFatalException()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedFatalException.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":875
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedFatalException].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_18FeedFatalException_13__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedFatalException_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_18FeedFatalException_12__get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_12__get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":877
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedFatalException].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::StructMetadata<::cpp2::FeedFatalException> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":878
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedFatalException].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":875
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedFatalException].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedFatalException.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":881
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedFatalException"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_18FeedFatalException_15__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedFatalException_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_18FeedFatalException_14__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_14__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":882
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.FeedFatalException"             # <<<<<<<<<<<<<<
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_FeedFatalException);
  __pyx_r = __pyx_kp_u_picard_FeedFatalException;
  goto __pyx_L0;

  /* "picard/types.pyx":881
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedFatalException"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":884
 *         return "picard.FeedFatalException"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cFeedFatalException](idx)
 * 
 */

static std::string_view __pyx_f_6picard_5types_18FeedFatalException__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self, size_t __pyx_v_idx) {
  std::string_view __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string_view __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_field_name_by_index", 0);

  /* "picard/types.pyx":885
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 *         return __get_field_name_by_index[cFeedFatalException](idx)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  try {
    __pyx_t_1 = ::thrift::py3::get_field_name_by_index<::cpp2::FeedFatalException>(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 885, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "picard/types.pyx":884
 *         return "picard.FeedFatalException"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cFeedFatalException](idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("picard.types.FeedFatalException._fbthrift_get_field_name_by_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":887
 *         return __get_field_name_by_index[cFeedFatalException](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 3
 * 
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_18FeedFatalException_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_18FeedFatalException_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6picard_5types_18FeedFatalException_16__cinit__(((struct __pyx_obj_6picard_5types_FeedFatalException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_18FeedFatalException_16__cinit__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "picard/types.pyx":888
 * 
 *     def __cinit__(self):
 *         self._fbthrift_struct_size = 3             # <<<<<<<<<<<<<<
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedFatalException self, __Protocol proto):
 */
  __pyx_v_self->__pyx_base.__pyx_base._fbthrift_struct_size = 3;

  /* "picard/types.pyx":887
 *         return __get_field_name_by_index[cFeedFatalException](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 3
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":890
 *         self._fbthrift_struct_size = 3
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedFatalException self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_18FeedFatalException__serialize(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  std::unique_ptr<folly::IOBuf>  __pyx_v_data;
  struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::unique_ptr<folly::IOBuf>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_serialize", 0);

  /* "picard/types.pyx":892
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedFatalException self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cFeedFatalException](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":893
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 *             data = cmove(serializer.cserialize[cFeedFatalException](self._cpp_obj.get(), proto))             # <<<<<<<<<<<<<<
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 */
        try {
          __pyx_t_1 = ::thrift::py3::serialize<::cpp2::FeedFatalException>(__pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 893, __pyx_L4_error)
        }
        __pyx_v_data = cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_t_1);
      }

      /* "picard/types.pyx":892
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedFatalException self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cFeedFatalException](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":894
 *         with nogil:
 *             data = cmove(serializer.cserialize[cFeedFatalException](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))             # <<<<<<<<<<<<<<
 * 
 *     cdef cuint32_t _deserialize(FeedFatalException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = ((PyObject *)__pyx_f_5folly_5iobuf_from_unique_ptr(cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_v_data))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_5folly_5iobuf_IOBuf *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":890
 *         self._fbthrift_struct_size = 3
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedFatalException self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedFatalException._serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":896
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(FeedFatalException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedFatalException]()
 */

static uint32_t __pyx_f_6picard_5types_18FeedFatalException__deserialize(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  uint32_t __pyx_v_needed;
  uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedFatalException>  __pyx_t_1;
  uint32_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_deserialize", 0);

  /* "picard/types.pyx":898
 *     cdef cuint32_t _deserialize(FeedFatalException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedFatalException]()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedFatalException](buf, self._cpp_obj.get(), proto)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedFatalException>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 898, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":899
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedFatalException]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cFeedFatalException](buf, self._cpp_obj.get(), proto)
 *         # force a cache reload since the underlying data's changed
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":900
 *         self._cpp_obj = make_shared[cFeedFatalException]()
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedFatalException](buf, self._cpp_obj.get(), proto)             # <<<<<<<<<<<<<<
 *         # force a cache reload since the underlying data's changed
 *         self._load_cache()
 */
        try {
          __pyx_t_2 = ::thrift::py3::deserialize<::cpp2::FeedFatalException>(__pyx_v_buf, __pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 900, __pyx_L4_error)
        }
        __pyx_v_needed = __pyx_t_2;
      }

      /* "picard/types.pyx":899
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedFatalException]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cFeedFatalException](buf, self._cpp_obj.get(), proto)
 *         # force a cache reload since the underlying data's changed
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":902
 *             needed = serializer.cdeserialize[cFeedFatalException](buf, self._cpp_obj.get(), proto)
 *         # force a cache reload since the underlying data's changed
 *         self._load_cache()             # <<<<<<<<<<<<<<
 *         return needed
 * 
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_6picard_5types_FeedFatalException *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->_load_cache(__pyx_v_self); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "picard/types.pyx":903
 *         # force a cache reload since the underlying data's changed
 *         self._load_cache()
 *         return needed             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_needed;
  goto __pyx_L0;

  /* "picard/types.pyx":896
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(FeedFatalException self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedFatalException]()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedFatalException._deserialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pxd":374
 * cdef class FeedFatalException(thrift.py3.types.Union):
 *     cdef shared_ptr[cFeedFatalException] _cpp_obj
 *     cdef readonly __FeedFatalExceptionType type             # <<<<<<<<<<<<<<
 *     cdef readonly object value
 *     cdef _load_cache(FeedFatalException self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedFatalException_4type___get__(((struct __pyx_obj_6picard_5types_FeedFatalException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_4type___get__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->type));
  __pyx_r = ((PyObject *)__pyx_v_self->type);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pxd":375
 *     cdef shared_ptr[cFeedFatalException] _cpp_obj
 *     cdef readonly __FeedFatalExceptionType type
 *     cdef readonly object value             # <<<<<<<<<<<<<<
 *     cdef _load_cache(FeedFatalException self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18FeedFatalException_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedFatalException_5value___get__(((struct __pyx_obj_6picard_5types_FeedFatalException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedFatalException_5value___get__(struct __pyx_obj_6picard_5types_FeedFatalException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->value);
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":908
 * @__cython.auto_pickle(False)
 * cdef class FeedException(thrift.py3.exceptions.GeneratedError):
 *     def __init__(FeedException self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cFeedException]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedException_FieldsSetter.create(self._cpp_obj.get())
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_13FeedException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_13FeedException_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6picard_5types_13FeedException___init__(((struct __pyx_obj_6picard_5types_FeedException *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_13FeedException___init__(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self, PyObject *__pyx_v_args, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedException>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":909
 * cdef class FeedException(thrift.py3.exceptions.GeneratedError):
 *     def __init__(FeedException self, *args, **kwargs):
 *         self._cpp_obj = make_shared[cFeedException]()             # <<<<<<<<<<<<<<
 *         self._fields_setter = _fbthrift_types_fields.__FeedException_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__( *args, **kwargs)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedException>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 909, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":910
 *     def __init__(FeedException self, *args, **kwargs):
 *         self._cpp_obj = make_shared[cFeedException]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedException_FieldsSetter.create(self._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         super().__init__( *args, **kwargs)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___FeedException_FieldsSetter->create(__pyx_v_self->_cpp_obj.get())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_fields_setter));
  __pyx_v_self->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedException_FieldsSetter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":911
 *         self._cpp_obj = make_shared[cFeedException]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedException_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__( *args, **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_FeedException));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_FeedException));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_FeedException));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_v_args, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":908
 * @__cython.auto_pickle(False)
 * cdef class FeedException(thrift.py3.exceptions.GeneratedError):
 *     def __init__(FeedException self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cFeedException]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedException_FieldsSetter.create(self._cpp_obj.get())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.FeedException.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":913
 *         super().__init__( *args, **kwargs)
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

static void __pyx_f_6picard_5types_13FeedException__fbthrift_set_field(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_set_field", 0);

  /* "picard/types.pyx":914
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 *         self._fields_setter.set_field(name.encode("utf-8"), value)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _fbthrift_isset(self):
 */
  if (unlikely(__pyx_v_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 914, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 914, __pyx_L1_error)
  ((struct __pyx_vtabstruct_6picard_12types_fields___FeedException_FieldsSetter *)__pyx_v_self->_fields_setter->__pyx_base.__pyx_vtab)->__pyx_base.set_field(((struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter *)__pyx_v_self->_fields_setter), __pyx_t_2, __pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":913
 *         super().__init__( *args, **kwargs)
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedException._fbthrift_set_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "picard/types.pyx":916
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("FeedException", {
 *           "feedFatalException": deref(self._cpp_obj).feedFatalException_ref().has_value(),
 */

static PyObject *__pyx_f_6picard_5types_13FeedException__fbthrift_isset(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_isset", 0);

  /* "picard/types.pyx":917
 * 
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("FeedException", {             # <<<<<<<<<<<<<<
 *           "feedFatalException": deref(self._cpp_obj).feedFatalException_ref().has_value(),
 *         })
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_thrift); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_py3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IsSet); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":918
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("FeedException", {
 *           "feedFatalException": deref(self._cpp_obj).feedFatalException_ref().has_value(),             # <<<<<<<<<<<<<<
 *         })
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).feedFatalException_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_feedFatalException, __pyx_t_4) < 0) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_FeedException, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_FeedException, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_FeedException);
    __Pyx_GIVEREF(__pyx_n_u_FeedException);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_n_u_FeedException);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":916
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("FeedException", {
 *           "feedFatalException": deref(self._cpp_obj).feedFatalException_ref().has_value(),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.FeedException._fbthrift_isset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6picard_5types_13FeedException_6create_2generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "picard/types.pyx":925
 *         __fbthrift_inst = <FeedException>FeedException.__new__(FeedException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */

static PyObject *__pyx_pf_6picard_5types_13FeedException_6create_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr *)__pyx_tp_new_6picard_5types___pyx_scope_struct_5_genexpr(__pyx_ptype_6picard_5types___pyx_scope_struct_5_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 925, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6picard_5types_13FeedException_6create_2generator11, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_FeedException_create_locals_gene, __pyx_n_s_picard_types); if (unlikely(!gen)) __PYX_ERR(0, 925, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.FeedException.create.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6picard_5types_13FeedException_6create_2generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L8_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 925, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst)) { __Pyx_RaiseClosureNameError("__fbthrift_inst"); __PYX_ERR(0, 925, __pyx_L1_error) }
  if (likely(PyList_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst))) || PyTuple_CheckExact(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst))) {
    __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst); __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v___fbthrift_inst)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 925, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 925, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 925, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 925, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(0, 925, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 925, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 925, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 925, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_5 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 925, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
      index = 0; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 925, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 925, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v__);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v__, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_v);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_v, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_v);
    __pyx_r = __pyx_cur_scope->__pyx_v_v;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L8_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 925, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":922
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedException>FeedException.__new__(FeedException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

static PyObject *__pyx_f_6picard_5types_13FeedException_create(std::shared_ptr<::cpp2::FeedException>  __pyx_v_cpp_obj) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create *__pyx_cur_scope;
  PyObject *__pyx_gb_6picard_5types_13FeedException_6create_2generator11 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create *)__pyx_tp_new_6picard_5types___pyx_scope_struct_4_create(__pyx_ptype_6picard_5types___pyx_scope_struct_4_create, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 922, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }

  /* "picard/types.pyx":923
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedException] cpp_obj):
 *         __fbthrift_inst = <FeedException>FeedException.__new__(FeedException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString((*__pyx_v_cpp_obj).what()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 923, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = ((PyObject *)__pyx_tp_new_6picard_5types_FeedException(((PyTypeObject *)__pyx_ptype_6picard_5types_FeedException), __pyx_t_1, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 923, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = ((PyObject *)__pyx_t_2);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_FeedException *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":924
 *     cdef create(shared_ptr[cFeedException] cpp_obj):
 *         __fbthrift_inst = <FeedException>FeedException.__new__(FeedException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)             # <<<<<<<<<<<<<<
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))
 *         return __fbthrift_inst
 */
  __pyx_cur_scope->__pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<::cpp2::FeedException> >(__pyx_v_cpp_obj);

  /* "picard/types.pyx":925
 *         __fbthrift_inst = <FeedException>FeedException.__new__(FeedException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_builtins); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Exception); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_init); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst));
  __Pyx_GIVEREF(((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst));
  __pyx_t_3 = __pyx_pf_6picard_5types_13FeedException_6create_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":926
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         _builtins.Exception.__init__(__fbthrift_inst, *(v for _, v in __fbthrift_inst))
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":922
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedException] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedException>FeedException.__new__(FeedException, (<bytes>deref(cpp_obj).what()).decode('utf-8'))
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.FeedException.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_gb_6picard_5types_13FeedException_6create_2generator11);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":929
 * 
 *     @property
 *     def feedFatalException(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_feedFatalException is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_13FeedException_18feedFatalException_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_13FeedException_18feedFatalException_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_13FeedException_18feedFatalException___get__(((struct __pyx_obj_6picard_5types_FeedException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_13FeedException_18feedFatalException___get__(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":931
 *     def feedFatalException(self):
 * 
 *         if self.__fbthrift_cached_feedFatalException is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_feedFatalException = FeedFatalException.create(__reference_shared_ptr(deref(self._cpp_obj).feedFatalException_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_feedFatalException
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_feedFatalException) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":932
 * 
 *         if self.__fbthrift_cached_feedFatalException is None:
 *             self.__fbthrift_cached_feedFatalException = FeedFatalException.create(__reference_shared_ptr(deref(self._cpp_obj).feedFatalException_ref().ref(), self._cpp_obj))             # <<<<<<<<<<<<<<
 *         return self.__fbthrift_cached_feedFatalException
 * 
 */
    __pyx_t_3 = __pyx_f_6picard_5types_18FeedFatalException_create(::thrift::py3::reference_shared_ptr<::cpp2::FeedFatalException &>((*__pyx_v_self->_cpp_obj).feedFatalException_ref().value(), __pyx_v_self->_cpp_obj)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6picard_5types_FeedFatalException))))) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->__pyx___fbthrift_cached_feedFatalException);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_feedFatalException));
    __pyx_v_self->__pyx___fbthrift_cached_feedFatalException = ((struct __pyx_obj_6picard_5types_FeedFatalException *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "picard/types.pyx":931
 *     def feedFatalException(self):
 * 
 *         if self.__fbthrift_cached_feedFatalException is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_feedFatalException = FeedFatalException.create(__reference_shared_ptr(deref(self._cpp_obj).feedFatalException_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_feedFatalException
 */
  }

  /* "picard/types.pyx":933
 *         if self.__fbthrift_cached_feedFatalException is None:
 *             self.__fbthrift_cached_feedFatalException = FeedFatalException.create(__reference_shared_ptr(deref(self._cpp_obj).feedFatalException_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_feedFatalException             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_feedFatalException));
  __pyx_r = ((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_feedFatalException);
  goto __pyx_L0;

  /* "picard/types.pyx":929
 * 
 *     @property
 *     def feedFatalException(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_feedFatalException is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedException.feedFatalException.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":936
 * 
 * 
 *     def __hash__(FeedException self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6picard_5types_13FeedException_3__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6picard_5types_13FeedException_3__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_13FeedException_2__hash__(((struct __pyx_obj_6picard_5types_FeedException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6picard_5types_13FeedException_2__hash__(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "picard/types.pyx":937
 * 
 *     def __hash__(FeedException self):
 *         return  super().__hash__()             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(FeedException self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_FeedException));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_FeedException));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_FeedException));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 937, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "picard/types.pyx":936
 * 
 * 
 *     def __hash__(FeedException self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedException.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":939
 *         return  super().__hash__()
 * 
 *     def __copy__(FeedException self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cFeedException] cpp_obj = make_shared[cFeedException](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_13FeedException_5__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_13FeedException_5__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_13FeedException_4__copy__(((struct __pyx_obj_6picard_5types_FeedException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_13FeedException_4__copy__(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self) {
  std::shared_ptr<::cpp2::FeedException>  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedException>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":940
 * 
 *     def __copy__(FeedException self):
 *         cdef shared_ptr[cFeedException] cpp_obj = make_shared[cFeedException](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedException>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 940, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":943
 *             deref(self._cpp_obj)
 *         )
 *         return FeedException.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_13FeedException_create(cython_std::move<std::shared_ptr<::cpp2::FeedException> >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":939
 *         return  super().__hash__()
 * 
 *     def __copy__(FeedException self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cFeedException] cpp_obj = make_shared[cFeedException](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedException.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":945
 *         return FeedException.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedException](
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_13FeedException_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6picard_5types_13FeedException_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_13FeedException_6__richcmp__(((struct __pyx_obj_6picard_5types_FeedException *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_13FeedException_6__richcmp__(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "picard/types.pyx":946
 * 
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)             # <<<<<<<<<<<<<<
 *         return __richcmp[cFeedException](
 *             self._cpp_obj,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_FeedException *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_cmp_sametype(((struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":947
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedException](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<FeedException>other)._cpp_obj,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":951
 *             (<FeedException>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = (__pyx_v_r == Py_None);
  if ((__pyx_t_2 != 0)) {

    /* "picard/types.pyx":947
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedException](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<FeedException>other)._cpp_obj,
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(::thrift::py3::richcmp<::cpp2::FeedException>(__pyx_v_self->_cpp_obj, ((struct __pyx_obj_6picard_5types_FeedException *)__pyx_v_other)->_cpp_obj, __pyx_v_op)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "picard/types.pyx":951
 *             (<FeedException>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_1 = __pyx_v_r;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":945
 *         return FeedException.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedException](
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedException.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":954
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedException()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_13FeedException_9__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_13FeedException_9__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_13FeedException_9__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_13FeedException_9__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_13FeedException_8__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_13FeedException_8__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":955
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__FeedException()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__FeedException()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":954
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedException()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedException.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":958
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cFeedException].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_13FeedException_11__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_13FeedException_11__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_13FeedException_11__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_13FeedException_11__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_13FeedException_10__get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_13FeedException_10__get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":960
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cFeedException].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::ExceptionMetadata<::cpp2::FeedException> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":961
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cFeedException].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":958
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cFeedException].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedException.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":964
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedException"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_13FeedException_13__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_13FeedException_13__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_13FeedException_13__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_13FeedException_13__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_13FeedException_12__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_13FeedException_12__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":965
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.FeedException"             # <<<<<<<<<<<<<<
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_FeedException);
  __pyx_r = __pyx_kp_u_picard_FeedException;
  goto __pyx_L0;

  /* "picard/types.pyx":964
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedException"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":967
 *         return "picard.FeedException"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cFeedException](idx)
 * 
 */

static std::string_view __pyx_f_6picard_5types_13FeedException__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self, size_t __pyx_v_idx) {
  std::string_view __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string_view __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_field_name_by_index", 0);

  /* "picard/types.pyx":968
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 *         return __get_field_name_by_index[cFeedException](idx)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  try {
    __pyx_t_1 = ::thrift::py3::get_field_name_by_index<::cpp2::FeedException>(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 968, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "picard/types.pyx":967
 *         return "picard.FeedException"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cFeedException](idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("picard.types.FeedException._fbthrift_get_field_name_by_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":970
 *         return __get_field_name_by_index[cFeedException](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 1
 * 
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_13FeedException_15__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_13FeedException_15__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6picard_5types_13FeedException_14__cinit__(((struct __pyx_obj_6picard_5types_FeedException *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_13FeedException_14__cinit__(struct __pyx_obj_6picard_5types_FeedException *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "picard/types.pyx":971
 * 
 *     def __cinit__(self):
 *         self._fbthrift_struct_size = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->__pyx_base._fbthrift_struct_size = 1;

  /* "picard/types.pyx":970
 *         return __get_field_name_by_index[cFeedException](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 1
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":977
 * @__cython.auto_pickle(False)
 * cdef class FeedParseFailure(thrift.py3.types.Struct):
 *     def __init__(FeedParseFailure self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cFeedParseFailure]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedParseFailure_FieldsSetter.create(self._cpp_obj.get())
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_16FeedParseFailure_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_16FeedParseFailure_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_16FeedParseFailure___init__(((struct __pyx_obj_6picard_5types_FeedParseFailure *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_16FeedParseFailure___init__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedParseFailure>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":978
 * cdef class FeedParseFailure(thrift.py3.types.Struct):
 *     def __init__(FeedParseFailure self, **kwargs):
 *         self._cpp_obj = make_shared[cFeedParseFailure]()             # <<<<<<<<<<<<<<
 *         self._fields_setter = _fbthrift_types_fields.__FeedParseFailure_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedParseFailure>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 978, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":979
 *     def __init__(FeedParseFailure self, **kwargs):
 *         self._cpp_obj = make_shared[cFeedParseFailure]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedParseFailure_FieldsSetter.create(self._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         super().__init__(**kwargs)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___FeedParseFailure_FieldsSetter->create(__pyx_v_self->_cpp_obj.get())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_fields_setter));
  __pyx_v_self->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedParseFailure_FieldsSetter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":980
 *         self._cpp_obj = make_shared[cFeedParseFailure]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedParseFailure_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def __call__(FeedParseFailure self, **kwargs):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":977
 * @__cython.auto_pickle(False)
 * cdef class FeedParseFailure(thrift.py3.types.Struct):
 *     def __init__(FeedParseFailure self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cFeedParseFailure]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedParseFailure_FieldsSetter.create(self._cpp_obj.get())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.FeedParseFailure.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":982
 *         super().__init__(**kwargs)
 * 
 *     def __call__(FeedParseFailure self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__call__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__call__", 1))) return NULL;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_16FeedParseFailure_2__call__(((struct __pyx_obj_6picard_5types_FeedParseFailure *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_2__call__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v___fbthrift_inst = 0;
  PyObject *__pyx_v___fbthrift_name = NULL;
  PyObject *__pyx_v__fbthrift_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::shared_ptr<::cpp2::FeedParseFailure>  __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "picard/types.pyx":983
 * 
 *     def __call__(FeedParseFailure self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef FeedParseFailure __fbthrift_inst = FeedParseFailure.__new__(FeedParseFailure)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 983, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":984
 *     def __call__(FeedParseFailure self, **kwargs):
 *         if not kwargs:
 *             return self             # <<<<<<<<<<<<<<
 *         cdef FeedParseFailure __fbthrift_inst = FeedParseFailure.__new__(FeedParseFailure)
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedParseFailure](deref(self._cpp_obj))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "picard/types.pyx":983
 * 
 *     def __call__(FeedParseFailure self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef FeedParseFailure __fbthrift_inst = FeedParseFailure.__new__(FeedParseFailure)
 */
  }

  /* "picard/types.pyx":985
 *         if not kwargs:
 *             return self
 *         cdef FeedParseFailure __fbthrift_inst = FeedParseFailure.__new__(FeedParseFailure)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedParseFailure](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedParseFailure_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 */
  __pyx_t_3 = ((PyObject *)__pyx_tp_new_6picard_5types_FeedParseFailure(((PyTypeObject *)__pyx_ptype_6picard_5types_FeedParseFailure), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_FeedParseFailure *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":986
 *             return self
 *         cdef FeedParseFailure __fbthrift_inst = FeedParseFailure.__new__(FeedParseFailure)
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedParseFailure](deref(self._cpp_obj))             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedParseFailure_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 */
  try {
    __pyx_t_4 = std::make_shared<::cpp2::FeedParseFailure>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 986, __pyx_L1_error)
  }
  __pyx_v___fbthrift_inst->_cpp_obj = __pyx_t_4;

  /* "picard/types.pyx":987
 *         cdef FeedParseFailure __fbthrift_inst = FeedParseFailure.__new__(FeedParseFailure)
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedParseFailure](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedParseFailure_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 */
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___FeedParseFailure_FieldsSetter->create(__pyx_v___fbthrift_inst->_cpp_obj.get())); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v___fbthrift_inst->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v___fbthrift_inst->_fields_setter));
  __pyx_v___fbthrift_inst->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedParseFailure_FieldsSetter *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":988
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedParseFailure](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedParseFailure_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():             # <<<<<<<<<<<<<<
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst
 */
  __pyx_t_5 = 0;
  __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_kwargs, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_8;
  __pyx_t_8 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_6, &__pyx_t_5, &__pyx_t_8, &__pyx_t_9, NULL, __pyx_t_7);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 988, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v___fbthrift_name, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v__fbthrift_value, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "picard/types.pyx":989
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedParseFailure_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v___fbthrift_name))||((__pyx_v___fbthrift_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v___fbthrift_name)->tp_name), 0))) __PYX_ERR(0, 989, __pyx_L1_error)
    ((struct __pyx_vtabstruct_6picard_5types_FeedParseFailure *)__pyx_v___fbthrift_inst->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_set_field(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v___fbthrift_inst), ((PyObject*)__pyx_v___fbthrift_name), __pyx_v__fbthrift_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 989, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "picard/types.pyx":990
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":982
 *         super().__init__(**kwargs)
 * 
 *     def __call__(FeedParseFailure self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("picard.types.FeedParseFailure.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XDECREF(__pyx_v___fbthrift_name);
  __Pyx_XDECREF(__pyx_v__fbthrift_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":992
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

static void __pyx_f_6picard_5types_16FeedParseFailure__fbthrift_set_field(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_set_field", 0);

  /* "picard/types.pyx":993
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 *         self._fields_setter.set_field(name.encode("utf-8"), value)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _fbthrift_isset(self):
 */
  if (unlikely(__pyx_v_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 993, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 993, __pyx_L1_error)
  ((struct __pyx_vtabstruct_6picard_12types_fields___FeedParseFailure_FieldsSetter *)__pyx_v_self->_fields_setter->__pyx_base.__pyx_vtab)->__pyx_base.set_field(((struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter *)__pyx_v_self->_fields_setter), __pyx_t_2, __pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 993, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":992
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedParseFailure._fbthrift_set_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "picard/types.pyx":995
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("FeedParseFailure", {
 *           "input": deref(self._cpp_obj).input_ref().has_value(),
 */

static PyObject *__pyx_f_6picard_5types_16FeedParseFailure__fbthrift_isset(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_isset", 0);

  /* "picard/types.pyx":996
 * 
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("FeedParseFailure", {             # <<<<<<<<<<<<<<
 *           "input": deref(self._cpp_obj).input_ref().has_value(),
 *           "contexts": deref(self._cpp_obj).contexts_ref().has_value(),
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_thrift); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_py3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IsSet); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":997
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("FeedParseFailure", {
 *           "input": deref(self._cpp_obj).input_ref().has_value(),             # <<<<<<<<<<<<<<
 *           "contexts": deref(self._cpp_obj).contexts_ref().has_value(),
 *           "description": deref(self._cpp_obj).description_ref().has_value(),
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).input_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_input, __pyx_t_4) < 0) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":998
 *         return thrift.py3.types._IsSet("FeedParseFailure", {
 *           "input": deref(self._cpp_obj).input_ref().has_value(),
 *           "contexts": deref(self._cpp_obj).contexts_ref().has_value(),             # <<<<<<<<<<<<<<
 *           "description": deref(self._cpp_obj).description_ref().has_value(),
 *         })
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).contexts_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_contexts, __pyx_t_4) < 0) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":999
 *           "input": deref(self._cpp_obj).input_ref().has_value(),
 *           "contexts": deref(self._cpp_obj).contexts_ref().has_value(),
 *           "description": deref(self._cpp_obj).description_ref().has_value(),             # <<<<<<<<<<<<<<
 *         })
 * 
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).description_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_description, __pyx_t_4) < 0) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_FeedParseFailure, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_FeedParseFailure, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_FeedParseFailure);
    __Pyx_GIVEREF(__pyx_n_u_FeedParseFailure);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_n_u_FeedParseFailure);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 996, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":995
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("FeedParseFailure", {
 *           "input": deref(self._cpp_obj).input_ref().has_value(),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.FeedParseFailure._fbthrift_isset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1003
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedParseFailure] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedParseFailure>FeedParseFailure.__new__(FeedParseFailure)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

static PyObject *__pyx_f_6picard_5types_16FeedParseFailure_create(std::shared_ptr<::cpp2::FeedParseFailure>  __pyx_v_cpp_obj) {
  struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":1004
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedParseFailure] cpp_obj):
 *         __fbthrift_inst = <FeedParseFailure>FeedParseFailure.__new__(FeedParseFailure)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_FeedParseFailure(((PyTypeObject *)__pyx_ptype_6picard_5types_FeedParseFailure), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1004, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_FeedParseFailure *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1005
 *     cdef create(shared_ptr[cFeedParseFailure] cpp_obj):
 *         __fbthrift_inst = <FeedParseFailure>FeedParseFailure.__new__(FeedParseFailure)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<::cpp2::FeedParseFailure> >(__pyx_v_cpp_obj);

  /* "picard/types.pyx":1006
 *         __fbthrift_inst = <FeedParseFailure>FeedParseFailure.__new__(FeedParseFailure)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1003
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedParseFailure] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedParseFailure>FeedParseFailure.__new__(FeedParseFailure)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedParseFailure.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1009
 * 
 *     @property
 *     def input(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).input_ref().value()).decode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_5input_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_5input_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_16FeedParseFailure_5input___get__(((struct __pyx_obj_6picard_5types_FeedParseFailure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_5input___get__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":1011
 *     def input(self):
 * 
 *         return (<bytes>deref(self._cpp_obj).input_ref().value()).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->_cpp_obj).input_ref().value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 1011, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1009
 * 
 *     @property
 *     def input(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).input_ref().value()).decode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedParseFailure.input.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1014
 * 
 *     @property
 *     def contexts(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_contexts is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_8contexts_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_8contexts_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_16FeedParseFailure_8contexts___get__(((struct __pyx_obj_6picard_5types_FeedParseFailure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_8contexts___get__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":1016
 *     def contexts(self):
 * 
 *         if self.__fbthrift_cached_contexts is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_contexts = List__string.create(__reference_shared_ptr(deref(self._cpp_obj).contexts_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_contexts
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_contexts) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1017
 * 
 *         if self.__fbthrift_cached_contexts is None:
 *             self.__fbthrift_cached_contexts = List__string.create(__reference_shared_ptr(deref(self._cpp_obj).contexts_ref().ref(), self._cpp_obj))             # <<<<<<<<<<<<<<
 *         return self.__fbthrift_cached_contexts
 * 
 */
    __pyx_t_3 = __pyx_f_6picard_5types_12List__string_create(::thrift::py3::reference_shared_ptr<std::vector<std::string>  &>((*__pyx_v_self->_cpp_obj).contexts_ref().value(), __pyx_v_self->_cpp_obj)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1017, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6picard_5types_List__string))))) __PYX_ERR(0, 1017, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->__pyx___fbthrift_cached_contexts);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_contexts));
    __pyx_v_self->__pyx___fbthrift_cached_contexts = ((struct __pyx_obj_6picard_5types_List__string *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "picard/types.pyx":1016
 *     def contexts(self):
 * 
 *         if self.__fbthrift_cached_contexts is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_contexts = List__string.create(__reference_shared_ptr(deref(self._cpp_obj).contexts_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_contexts
 */
  }

  /* "picard/types.pyx":1018
 *         if self.__fbthrift_cached_contexts is None:
 *             self.__fbthrift_cached_contexts = List__string.create(__reference_shared_ptr(deref(self._cpp_obj).contexts_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_contexts             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_contexts));
  __pyx_r = ((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_contexts);
  goto __pyx_L0;

  /* "picard/types.pyx":1014
 * 
 *     @property
 *     def contexts(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_contexts is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedParseFailure.contexts.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1021
 * 
 *     @property
 *     def description(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).description_ref().value()).decode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_11description_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_11description_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_16FeedParseFailure_11description___get__(((struct __pyx_obj_6picard_5types_FeedParseFailure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_11description___get__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":1023
 *     def description(self):
 * 
 *         return (<bytes>deref(self._cpp_obj).description_ref().value()).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->_cpp_obj).description_ref().value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 1023, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1021
 * 
 *     @property
 *     def description(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).description_ref().value()).decode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedParseFailure.description.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1026
 * 
 * 
 *     def __hash__(FeedParseFailure self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6picard_5types_16FeedParseFailure_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6picard_5types_16FeedParseFailure_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_16FeedParseFailure_4__hash__(((struct __pyx_obj_6picard_5types_FeedParseFailure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6picard_5types_16FeedParseFailure_4__hash__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "picard/types.pyx":1027
 * 
 *     def __hash__(FeedParseFailure self):
 *         return  super().__hash__()             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(FeedParseFailure self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "picard/types.pyx":1026
 * 
 * 
 *     def __hash__(FeedParseFailure self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedParseFailure.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1029
 *         return  super().__hash__()
 * 
 *     def __copy__(FeedParseFailure self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cFeedParseFailure] cpp_obj = make_shared[cFeedParseFailure](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_16FeedParseFailure_6__copy__(((struct __pyx_obj_6picard_5types_FeedParseFailure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_6__copy__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self) {
  std::shared_ptr<::cpp2::FeedParseFailure>  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedParseFailure>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":1030
 * 
 *     def __copy__(FeedParseFailure self):
 *         cdef shared_ptr[cFeedParseFailure] cpp_obj = make_shared[cFeedParseFailure](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedParseFailure>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1030, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1033
 *             deref(self._cpp_obj)
 *         )
 *         return FeedParseFailure.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_16FeedParseFailure_create(cython_std::move<std::shared_ptr<::cpp2::FeedParseFailure> >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1029
 *         return  super().__hash__()
 * 
 *     def __copy__(FeedParseFailure self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cFeedParseFailure] cpp_obj = make_shared[cFeedParseFailure](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedParseFailure.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1035
 *         return FeedParseFailure.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedParseFailure](
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_16FeedParseFailure_8__richcmp__(((struct __pyx_obj_6picard_5types_FeedParseFailure *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_8__richcmp__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "picard/types.pyx":1036
 * 
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)             # <<<<<<<<<<<<<<
 *         return __richcmp[cFeedParseFailure](
 *             self._cpp_obj,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_FeedParseFailure *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_cmp_sametype(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1037
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedParseFailure](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<FeedParseFailure>other)._cpp_obj,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":1041
 *             (<FeedParseFailure>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = (__pyx_v_r == Py_None);
  if ((__pyx_t_2 != 0)) {

    /* "picard/types.pyx":1037
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedParseFailure](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<FeedParseFailure>other)._cpp_obj,
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(::thrift::py3::richcmp<::cpp2::FeedParseFailure>(__pyx_v_self->_cpp_obj, ((struct __pyx_obj_6picard_5types_FeedParseFailure *)__pyx_v_other)->_cpp_obj, __pyx_v_op)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1037, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "picard/types.pyx":1041
 *             (<FeedParseFailure>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_1 = __pyx_v_r;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1035
 *         return FeedParseFailure.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedParseFailure](
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedParseFailure.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1044
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedParseFailure()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_16FeedParseFailure_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_16FeedParseFailure_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_16FeedParseFailure_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":1045
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__FeedParseFailure()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__FeedParseFailure()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1044
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedParseFailure()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedParseFailure.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1048
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedParseFailure].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_16FeedParseFailure_13__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_16FeedParseFailure_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_16FeedParseFailure_12__get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_12__get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":1050
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedParseFailure].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::StructMetadata<::cpp2::FeedParseFailure> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":1051
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedParseFailure].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1048
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedParseFailure].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedParseFailure.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1054
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedParseFailure"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_16FeedParseFailure_15__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_16FeedParseFailure_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_16FeedParseFailure_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_16FeedParseFailure_14__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_16FeedParseFailure_14__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":1055
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.FeedParseFailure"             # <<<<<<<<<<<<<<
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_FeedParseFailure);
  __pyx_r = __pyx_kp_u_picard_FeedParseFailure;
  goto __pyx_L0;

  /* "picard/types.pyx":1054
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedParseFailure"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1057
 *         return "picard.FeedParseFailure"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cFeedParseFailure](idx)
 * 
 */

static std::string_view __pyx_f_6picard_5types_16FeedParseFailure__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self, size_t __pyx_v_idx) {
  std::string_view __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string_view __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_field_name_by_index", 0);

  /* "picard/types.pyx":1058
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 *         return __get_field_name_by_index[cFeedParseFailure](idx)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  try {
    __pyx_t_1 = ::thrift::py3::get_field_name_by_index<::cpp2::FeedParseFailure>(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1058, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "picard/types.pyx":1057
 *         return "picard.FeedParseFailure"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cFeedParseFailure](idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("picard.types.FeedParseFailure._fbthrift_get_field_name_by_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1060
 *         return __get_field_name_by_index[cFeedParseFailure](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 3
 * 
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_16FeedParseFailure_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_16FeedParseFailure_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6picard_5types_16FeedParseFailure_16__cinit__(((struct __pyx_obj_6picard_5types_FeedParseFailure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_16FeedParseFailure_16__cinit__(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "picard/types.pyx":1061
 * 
 *     def __cinit__(self):
 *         self._fbthrift_struct_size = 3             # <<<<<<<<<<<<<<
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedParseFailure self, __Protocol proto):
 */
  __pyx_v_self->__pyx_base._fbthrift_struct_size = 3;

  /* "picard/types.pyx":1060
 *         return __get_field_name_by_index[cFeedParseFailure](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 3
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1063
 *         self._fbthrift_struct_size = 3
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedParseFailure self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_16FeedParseFailure__serialize(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  std::unique_ptr<folly::IOBuf>  __pyx_v_data;
  struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::unique_ptr<folly::IOBuf>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_serialize", 0);

  /* "picard/types.pyx":1065
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedParseFailure self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cFeedParseFailure](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":1066
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 *             data = cmove(serializer.cserialize[cFeedParseFailure](self._cpp_obj.get(), proto))             # <<<<<<<<<<<<<<
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 */
        try {
          __pyx_t_1 = ::thrift::py3::serialize<::cpp2::FeedParseFailure>(__pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1066, __pyx_L4_error)
        }
        __pyx_v_data = cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_t_1);
      }

      /* "picard/types.pyx":1065
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedParseFailure self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cFeedParseFailure](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":1067
 *         with nogil:
 *             data = cmove(serializer.cserialize[cFeedParseFailure](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))             # <<<<<<<<<<<<<<
 * 
 *     cdef cuint32_t _deserialize(FeedParseFailure self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = ((PyObject *)__pyx_f_5folly_5iobuf_from_unique_ptr(cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_v_data))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_5folly_5iobuf_IOBuf *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1063
 *         self._fbthrift_struct_size = 3
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedParseFailure self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedParseFailure._serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1069
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(FeedParseFailure self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedParseFailure]()
 */

static uint32_t __pyx_f_6picard_5types_16FeedParseFailure__deserialize(struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  uint32_t __pyx_v_needed;
  uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedParseFailure>  __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_deserialize", 0);

  /* "picard/types.pyx":1071
 *     cdef cuint32_t _deserialize(FeedParseFailure self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedParseFailure]()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedParseFailure](buf, self._cpp_obj.get(), proto)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedParseFailure>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1071, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1072
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedParseFailure]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cFeedParseFailure](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":1073
 *         self._cpp_obj = make_shared[cFeedParseFailure]()
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedParseFailure](buf, self._cpp_obj.get(), proto)             # <<<<<<<<<<<<<<
 *         return needed
 * 
 */
        try {
          __pyx_t_2 = ::thrift::py3::deserialize<::cpp2::FeedParseFailure>(__pyx_v_buf, __pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1073, __pyx_L4_error)
        }
        __pyx_v_needed = __pyx_t_2;
      }

      /* "picard/types.pyx":1072
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedParseFailure]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cFeedParseFailure](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":1074
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedParseFailure](buf, self._cpp_obj.get(), proto)
 *         return needed             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_needed;
  goto __pyx_L0;

  /* "picard/types.pyx":1069
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(FeedParseFailure self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedParseFailure]()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.FeedParseFailure._deserialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1079
 * @__cython.auto_pickle(False)
 * cdef class FeedTimeoutFailure(thrift.py3.types.Struct):
 *     def __init__(FeedTimeoutFailure self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cFeedTimeoutFailure]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedTimeoutFailure_FieldsSetter.create(self._cpp_obj.get())
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_18FeedTimeoutFailure_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_18FeedTimeoutFailure_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_18FeedTimeoutFailure___init__(((struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_18FeedTimeoutFailure___init__(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedTimeoutFailure>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":1080
 * cdef class FeedTimeoutFailure(thrift.py3.types.Struct):
 *     def __init__(FeedTimeoutFailure self, **kwargs):
 *         self._cpp_obj = make_shared[cFeedTimeoutFailure]()             # <<<<<<<<<<<<<<
 *         self._fields_setter = _fbthrift_types_fields.__FeedTimeoutFailure_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedTimeoutFailure>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1080, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1081
 *     def __init__(FeedTimeoutFailure self, **kwargs):
 *         self._cpp_obj = make_shared[cFeedTimeoutFailure]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedTimeoutFailure_FieldsSetter.create(self._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         super().__init__(**kwargs)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter->create(__pyx_v_self->_cpp_obj.get())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_fields_setter));
  __pyx_v_self->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1082
 *         self._cpp_obj = make_shared[cFeedTimeoutFailure]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedTimeoutFailure_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def __call__(FeedTimeoutFailure self, **kwargs):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":1079
 * @__cython.auto_pickle(False)
 * cdef class FeedTimeoutFailure(thrift.py3.types.Struct):
 *     def __init__(FeedTimeoutFailure self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cFeedTimeoutFailure]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedTimeoutFailure_FieldsSetter.create(self._cpp_obj.get())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.FeedTimeoutFailure.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1084
 *         super().__init__(**kwargs)
 * 
 *     def __call__(FeedTimeoutFailure self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedTimeoutFailure_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18FeedTimeoutFailure_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__call__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__call__", 1))) return NULL;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_18FeedTimeoutFailure_2__call__(((struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedTimeoutFailure_2__call__(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v___fbthrift_inst = 0;
  PyObject *__pyx_v___fbthrift_name = NULL;
  PyObject *__pyx_v__fbthrift_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::shared_ptr<::cpp2::FeedTimeoutFailure>  __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "picard/types.pyx":1085
 * 
 *     def __call__(FeedTimeoutFailure self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef FeedTimeoutFailure __fbthrift_inst = FeedTimeoutFailure.__new__(FeedTimeoutFailure)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1086
 *     def __call__(FeedTimeoutFailure self, **kwargs):
 *         if not kwargs:
 *             return self             # <<<<<<<<<<<<<<
 *         cdef FeedTimeoutFailure __fbthrift_inst = FeedTimeoutFailure.__new__(FeedTimeoutFailure)
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedTimeoutFailure](deref(self._cpp_obj))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "picard/types.pyx":1085
 * 
 *     def __call__(FeedTimeoutFailure self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef FeedTimeoutFailure __fbthrift_inst = FeedTimeoutFailure.__new__(FeedTimeoutFailure)
 */
  }

  /* "picard/types.pyx":1087
 *         if not kwargs:
 *             return self
 *         cdef FeedTimeoutFailure __fbthrift_inst = FeedTimeoutFailure.__new__(FeedTimeoutFailure)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedTimeoutFailure](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedTimeoutFailure_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 */
  __pyx_t_3 = ((PyObject *)__pyx_tp_new_6picard_5types_FeedTimeoutFailure(((PyTypeObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1087, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":1088
 *             return self
 *         cdef FeedTimeoutFailure __fbthrift_inst = FeedTimeoutFailure.__new__(FeedTimeoutFailure)
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedTimeoutFailure](deref(self._cpp_obj))             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedTimeoutFailure_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 */
  try {
    __pyx_t_4 = std::make_shared<::cpp2::FeedTimeoutFailure>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1088, __pyx_L1_error)
  }
  __pyx_v___fbthrift_inst->_cpp_obj = __pyx_t_4;

  /* "picard/types.pyx":1089
 *         cdef FeedTimeoutFailure __fbthrift_inst = FeedTimeoutFailure.__new__(FeedTimeoutFailure)
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedTimeoutFailure](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedTimeoutFailure_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 */
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter->create(__pyx_v___fbthrift_inst->_cpp_obj.get())); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v___fbthrift_inst->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v___fbthrift_inst->_fields_setter));
  __pyx_v___fbthrift_inst->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":1090
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedTimeoutFailure](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedTimeoutFailure_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():             # <<<<<<<<<<<<<<
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst
 */
  __pyx_t_5 = 0;
  __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_kwargs, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_8;
  __pyx_t_8 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_6, &__pyx_t_5, &__pyx_t_8, &__pyx_t_9, NULL, __pyx_t_7);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 1090, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v___fbthrift_name, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v__fbthrift_value, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "picard/types.pyx":1091
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedTimeoutFailure_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v___fbthrift_name))||((__pyx_v___fbthrift_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v___fbthrift_name)->tp_name), 0))) __PYX_ERR(0, 1091, __pyx_L1_error)
    ((struct __pyx_vtabstruct_6picard_5types_FeedTimeoutFailure *)__pyx_v___fbthrift_inst->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_set_field(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v___fbthrift_inst), ((PyObject*)__pyx_v___fbthrift_name), __pyx_v__fbthrift_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1091, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "picard/types.pyx":1092
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1084
 *         super().__init__(**kwargs)
 * 
 *     def __call__(FeedTimeoutFailure self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("picard.types.FeedTimeoutFailure.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XDECREF(__pyx_v___fbthrift_name);
  __Pyx_XDECREF(__pyx_v__fbthrift_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1094
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

static void __pyx_f_6picard_5types_18FeedTimeoutFailure__fbthrift_set_field(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_set_field", 0);

  /* "picard/types.pyx":1095
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 *         self._fields_setter.set_field(name.encode("utf-8"), value)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _fbthrift_isset(self):
 */
  if (unlikely(__pyx_v_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 1095, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 1095, __pyx_L1_error)
  ((struct __pyx_vtabstruct_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter *)__pyx_v_self->_fields_setter->__pyx_base.__pyx_vtab)->__pyx_base.set_field(((struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter *)__pyx_v_self->_fields_setter), __pyx_t_2, __pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":1094
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedTimeoutFailure._fbthrift_set_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "picard/types.pyx":1097
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("FeedTimeoutFailure", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 */

static PyObject *__pyx_f_6picard_5types_18FeedTimeoutFailure__fbthrift_isset(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_isset", 0);

  /* "picard/types.pyx":1098
 * 
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("FeedTimeoutFailure", {             # <<<<<<<<<<<<<<
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 *         })
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_thrift); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_py3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IsSet); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":1099
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("FeedTimeoutFailure", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),             # <<<<<<<<<<<<<<
 *         })
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).message_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_message, __pyx_t_4) < 0) __PYX_ERR(0, 1099, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_FeedTimeoutFailure, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_FeedTimeoutFailure, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1098, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_FeedTimeoutFailure);
    __Pyx_GIVEREF(__pyx_n_u_FeedTimeoutFailure);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_n_u_FeedTimeoutFailure);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1097
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("FeedTimeoutFailure", {
 *           "message": deref(self._cpp_obj).message_ref().has_value(),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.FeedTimeoutFailure._fbthrift_isset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1103
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedTimeoutFailure] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedTimeoutFailure>FeedTimeoutFailure.__new__(FeedTimeoutFailure)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

static PyObject *__pyx_f_6picard_5types_18FeedTimeoutFailure_create(std::shared_ptr<::cpp2::FeedTimeoutFailure>  __pyx_v_cpp_obj) {
  struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":1104
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedTimeoutFailure] cpp_obj):
 *         __fbthrift_inst = <FeedTimeoutFailure>FeedTimeoutFailure.__new__(FeedTimeoutFailure)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_FeedTimeoutFailure(((PyTypeObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1104, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1105
 *     cdef create(shared_ptr[cFeedTimeoutFailure] cpp_obj):
 *         __fbthrift_inst = <FeedTimeoutFailure>FeedTimeoutFailure.__new__(FeedTimeoutFailure)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<::cpp2::FeedTimeoutFailure> >(__pyx_v_cpp_obj);

  /* "picard/types.pyx":1106
 *         __fbthrift_inst = <FeedTimeoutFailure>FeedTimeoutFailure.__new__(FeedTimeoutFailure)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1103
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedTimeoutFailure] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedTimeoutFailure>FeedTimeoutFailure.__new__(FeedTimeoutFailure)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedTimeoutFailure.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1109
 * 
 *     @property
 *     def message(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedTimeoutFailure_7message_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18FeedTimeoutFailure_7message_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedTimeoutFailure_7message___get__(((struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedTimeoutFailure_7message___get__(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":1111
 *     def message(self):
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->_cpp_obj).message_ref().value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 1111, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1109
 * 
 *     @property
 *     def message(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).message_ref().value()).decode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedTimeoutFailure.message.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1114
 * 
 * 
 *     def __hash__(FeedTimeoutFailure self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6picard_5types_18FeedTimeoutFailure_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6picard_5types_18FeedTimeoutFailure_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedTimeoutFailure_4__hash__(((struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6picard_5types_18FeedTimeoutFailure_4__hash__(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "picard/types.pyx":1115
 * 
 *     def __hash__(FeedTimeoutFailure self):
 *         return  super().__hash__()             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(FeedTimeoutFailure self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1115, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "picard/types.pyx":1114
 * 
 * 
 *     def __hash__(FeedTimeoutFailure self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedTimeoutFailure.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1117
 *         return  super().__hash__()
 * 
 *     def __copy__(FeedTimeoutFailure self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cFeedTimeoutFailure] cpp_obj = make_shared[cFeedTimeoutFailure](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedTimeoutFailure_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18FeedTimeoutFailure_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedTimeoutFailure_6__copy__(((struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedTimeoutFailure_6__copy__(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self) {
  std::shared_ptr<::cpp2::FeedTimeoutFailure>  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedTimeoutFailure>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":1118
 * 
 *     def __copy__(FeedTimeoutFailure self):
 *         cdef shared_ptr[cFeedTimeoutFailure] cpp_obj = make_shared[cFeedTimeoutFailure](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedTimeoutFailure>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1118, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1121
 *             deref(self._cpp_obj)
 *         )
 *         return FeedTimeoutFailure.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_18FeedTimeoutFailure_create(cython_std::move<std::shared_ptr<::cpp2::FeedTimeoutFailure> >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1117
 *         return  super().__hash__()
 * 
 *     def __copy__(FeedTimeoutFailure self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cFeedTimeoutFailure] cpp_obj = make_shared[cFeedTimeoutFailure](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedTimeoutFailure.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1123
 *         return FeedTimeoutFailure.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedTimeoutFailure](
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedTimeoutFailure_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18FeedTimeoutFailure_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedTimeoutFailure_8__richcmp__(((struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedTimeoutFailure_8__richcmp__(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "picard/types.pyx":1124
 * 
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)             # <<<<<<<<<<<<<<
 *         return __richcmp[cFeedTimeoutFailure](
 *             self._cpp_obj,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_FeedTimeoutFailure *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_cmp_sametype(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1125
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedTimeoutFailure](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<FeedTimeoutFailure>other)._cpp_obj,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":1129
 *             (<FeedTimeoutFailure>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = (__pyx_v_r == Py_None);
  if ((__pyx_t_2 != 0)) {

    /* "picard/types.pyx":1125
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedTimeoutFailure](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<FeedTimeoutFailure>other)._cpp_obj,
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(::thrift::py3::richcmp<::cpp2::FeedTimeoutFailure>(__pyx_v_self->_cpp_obj, ((struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)__pyx_v_other)->_cpp_obj, __pyx_v_op)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "picard/types.pyx":1129
 *             (<FeedTimeoutFailure>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_1 = __pyx_v_r;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1123
 *         return FeedTimeoutFailure.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedTimeoutFailure](
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedTimeoutFailure.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1132
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedTimeoutFailure()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedTimeoutFailure_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_18FeedTimeoutFailure_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedTimeoutFailure_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_18FeedTimeoutFailure_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_18FeedTimeoutFailure_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedTimeoutFailure_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":1133
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__FeedTimeoutFailure()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__FeedTimeoutFailure()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1132
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedTimeoutFailure()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedTimeoutFailure.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1136
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedTimeoutFailure].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedTimeoutFailure_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_18FeedTimeoutFailure_13__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedTimeoutFailure_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_18FeedTimeoutFailure_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_18FeedTimeoutFailure_12__get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedTimeoutFailure_12__get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":1138
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedTimeoutFailure].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::StructMetadata<::cpp2::FeedTimeoutFailure> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":1139
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedTimeoutFailure].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1136
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedTimeoutFailure].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedTimeoutFailure.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1142
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedTimeoutFailure"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedTimeoutFailure_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_18FeedTimeoutFailure_15__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedTimeoutFailure_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_18FeedTimeoutFailure_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_18FeedTimeoutFailure_14__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedTimeoutFailure_14__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":1143
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.FeedTimeoutFailure"             # <<<<<<<<<<<<<<
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_FeedTimeoutFailure);
  __pyx_r = __pyx_kp_u_picard_FeedTimeoutFailure;
  goto __pyx_L0;

  /* "picard/types.pyx":1142
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedTimeoutFailure"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1145
 *         return "picard.FeedTimeoutFailure"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cFeedTimeoutFailure](idx)
 * 
 */

static std::string_view __pyx_f_6picard_5types_18FeedTimeoutFailure__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self, size_t __pyx_v_idx) {
  std::string_view __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string_view __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_field_name_by_index", 0);

  /* "picard/types.pyx":1146
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 *         return __get_field_name_by_index[cFeedTimeoutFailure](idx)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  try {
    __pyx_t_1 = ::thrift::py3::get_field_name_by_index<::cpp2::FeedTimeoutFailure>(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1146, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "picard/types.pyx":1145
 *         return "picard.FeedTimeoutFailure"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cFeedTimeoutFailure](idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("picard.types.FeedTimeoutFailure._fbthrift_get_field_name_by_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1148
 *         return __get_field_name_by_index[cFeedTimeoutFailure](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 1
 * 
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_18FeedTimeoutFailure_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_18FeedTimeoutFailure_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6picard_5types_18FeedTimeoutFailure_16__cinit__(((struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_18FeedTimeoutFailure_16__cinit__(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "picard/types.pyx":1149
 * 
 *     def __cinit__(self):
 *         self._fbthrift_struct_size = 1             # <<<<<<<<<<<<<<
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedTimeoutFailure self, __Protocol proto):
 */
  __pyx_v_self->__pyx_base._fbthrift_struct_size = 1;

  /* "picard/types.pyx":1148
 *         return __get_field_name_by_index[cFeedTimeoutFailure](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 1
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1151
 *         self._fbthrift_struct_size = 1
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedTimeoutFailure self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_18FeedTimeoutFailure__serialize(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  std::unique_ptr<folly::IOBuf>  __pyx_v_data;
  struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::unique_ptr<folly::IOBuf>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_serialize", 0);

  /* "picard/types.pyx":1153
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedTimeoutFailure self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cFeedTimeoutFailure](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":1154
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 *             data = cmove(serializer.cserialize[cFeedTimeoutFailure](self._cpp_obj.get(), proto))             # <<<<<<<<<<<<<<
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 */
        try {
          __pyx_t_1 = ::thrift::py3::serialize<::cpp2::FeedTimeoutFailure>(__pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1154, __pyx_L4_error)
        }
        __pyx_v_data = cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_t_1);
      }

      /* "picard/types.pyx":1153
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedTimeoutFailure self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cFeedTimeoutFailure](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":1155
 *         with nogil:
 *             data = cmove(serializer.cserialize[cFeedTimeoutFailure](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))             # <<<<<<<<<<<<<<
 * 
 *     cdef cuint32_t _deserialize(FeedTimeoutFailure self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = ((PyObject *)__pyx_f_5folly_5iobuf_from_unique_ptr(cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_v_data))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_5folly_5iobuf_IOBuf *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1151
 *         self._fbthrift_struct_size = 1
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedTimeoutFailure self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedTimeoutFailure._serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1157
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(FeedTimeoutFailure self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedTimeoutFailure]()
 */

static uint32_t __pyx_f_6picard_5types_18FeedTimeoutFailure__deserialize(struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  uint32_t __pyx_v_needed;
  uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedTimeoutFailure>  __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_deserialize", 0);

  /* "picard/types.pyx":1159
 *     cdef cuint32_t _deserialize(FeedTimeoutFailure self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedTimeoutFailure]()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedTimeoutFailure](buf, self._cpp_obj.get(), proto)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedTimeoutFailure>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1159, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1160
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedTimeoutFailure]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cFeedTimeoutFailure](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":1161
 *         self._cpp_obj = make_shared[cFeedTimeoutFailure]()
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedTimeoutFailure](buf, self._cpp_obj.get(), proto)             # <<<<<<<<<<<<<<
 *         return needed
 * 
 */
        try {
          __pyx_t_2 = ::thrift::py3::deserialize<::cpp2::FeedTimeoutFailure>(__pyx_v_buf, __pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1161, __pyx_L4_error)
        }
        __pyx_v_needed = __pyx_t_2;
      }

      /* "picard/types.pyx":1160
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedTimeoutFailure]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cFeedTimeoutFailure](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":1162
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedTimeoutFailure](buf, self._cpp_obj.get(), proto)
 *         return needed             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_needed;
  goto __pyx_L0;

  /* "picard/types.pyx":1157
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(FeedTimeoutFailure self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedTimeoutFailure]()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.FeedTimeoutFailure._deserialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1167
 * @__cython.auto_pickle(False)
 * cdef class FeedPartialSuccess(thrift.py3.types.Struct):
 *     def __init__(FeedPartialSuccess self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cFeedPartialSuccess]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedPartialSuccess_FieldsSetter.create(self._cpp_obj.get())
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_18FeedPartialSuccess_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_18FeedPartialSuccess_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_18FeedPartialSuccess___init__(((struct __pyx_obj_6picard_5types_FeedPartialSuccess *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_18FeedPartialSuccess___init__(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedPartialSuccess>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":1168
 * cdef class FeedPartialSuccess(thrift.py3.types.Struct):
 *     def __init__(FeedPartialSuccess self, **kwargs):
 *         self._cpp_obj = make_shared[cFeedPartialSuccess]()             # <<<<<<<<<<<<<<
 *         self._fields_setter = _fbthrift_types_fields.__FeedPartialSuccess_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedPartialSuccess>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1168, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1169
 *     def __init__(FeedPartialSuccess self, **kwargs):
 *         self._cpp_obj = make_shared[cFeedPartialSuccess]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedPartialSuccess_FieldsSetter.create(self._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         super().__init__(**kwargs)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___FeedPartialSuccess_FieldsSetter->create(__pyx_v_self->_cpp_obj.get())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_fields_setter));
  __pyx_v_self->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedPartialSuccess_FieldsSetter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1170
 *         self._cpp_obj = make_shared[cFeedPartialSuccess]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedPartialSuccess_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def __call__(FeedPartialSuccess self, **kwargs):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":1167
 * @__cython.auto_pickle(False)
 * cdef class FeedPartialSuccess(thrift.py3.types.Struct):
 *     def __init__(FeedPartialSuccess self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cFeedPartialSuccess]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedPartialSuccess_FieldsSetter.create(self._cpp_obj.get())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.FeedPartialSuccess.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1172
 *         super().__init__(**kwargs)
 * 
 *     def __call__(FeedPartialSuccess self, **kwargs):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedPartialSuccess_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18FeedPartialSuccess_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__call__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__call__", 1))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_18FeedPartialSuccess_2__call__(((struct __pyx_obj_6picard_5types_FeedPartialSuccess *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedPartialSuccess_2__call__(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "picard/types.pyx":1173
 * 
 *     def __call__(FeedPartialSuccess self, **kwargs):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "picard/types.pyx":1172
 *         super().__init__(**kwargs)
 * 
 *     def __call__(FeedPartialSuccess self, **kwargs):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1175
 *         return self
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

static void __pyx_f_6picard_5types_18FeedPartialSuccess__fbthrift_set_field(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_set_field", 0);

  /* "picard/types.pyx":1176
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 *         self._fields_setter.set_field(name.encode("utf-8"), value)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _fbthrift_isset(self):
 */
  if (unlikely(__pyx_v_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 1176, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 1176, __pyx_L1_error)
  ((struct __pyx_vtabstruct_6picard_12types_fields___FeedPartialSuccess_FieldsSetter *)__pyx_v_self->_fields_setter->__pyx_base.__pyx_vtab)->__pyx_base.set_field(((struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter *)__pyx_v_self->_fields_setter), __pyx_t_2, __pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1176, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":1175
 *         return self
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedPartialSuccess._fbthrift_set_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "picard/types.pyx":1178
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("FeedPartialSuccess", {
 *         })
 */

static PyObject *__pyx_f_6picard_5types_18FeedPartialSuccess__fbthrift_isset(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_isset", 0);

  /* "picard/types.pyx":1179
 * 
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("FeedPartialSuccess", {             # <<<<<<<<<<<<<<
 *         })
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_thrift); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_py3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IsSet); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_FeedPartialSuccess, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_FeedPartialSuccess, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_FeedPartialSuccess);
    __Pyx_GIVEREF(__pyx_n_u_FeedPartialSuccess);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_n_u_FeedPartialSuccess);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1178
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("FeedPartialSuccess", {
 *         })
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.FeedPartialSuccess._fbthrift_isset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1183
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedPartialSuccess] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedPartialSuccess>FeedPartialSuccess.__new__(FeedPartialSuccess)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

static PyObject *__pyx_f_6picard_5types_18FeedPartialSuccess_create(std::shared_ptr<::cpp2::FeedPartialSuccess>  __pyx_v_cpp_obj) {
  struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":1184
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedPartialSuccess] cpp_obj):
 *         __fbthrift_inst = <FeedPartialSuccess>FeedPartialSuccess.__new__(FeedPartialSuccess)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_FeedPartialSuccess(((PyTypeObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1184, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_FeedPartialSuccess *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1185
 *     cdef create(shared_ptr[cFeedPartialSuccess] cpp_obj):
 *         __fbthrift_inst = <FeedPartialSuccess>FeedPartialSuccess.__new__(FeedPartialSuccess)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<::cpp2::FeedPartialSuccess> >(__pyx_v_cpp_obj);

  /* "picard/types.pyx":1186
 *         __fbthrift_inst = <FeedPartialSuccess>FeedPartialSuccess.__new__(FeedPartialSuccess)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1183
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedPartialSuccess] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedPartialSuccess>FeedPartialSuccess.__new__(FeedPartialSuccess)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedPartialSuccess.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1189
 * 
 * 
 *     def __hash__(FeedPartialSuccess self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6picard_5types_18FeedPartialSuccess_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6picard_5types_18FeedPartialSuccess_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedPartialSuccess_4__hash__(((struct __pyx_obj_6picard_5types_FeedPartialSuccess *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6picard_5types_18FeedPartialSuccess_4__hash__(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "picard/types.pyx":1190
 * 
 *     def __hash__(FeedPartialSuccess self):
 *         return  super().__hash__()             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(FeedPartialSuccess self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1190, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "picard/types.pyx":1189
 * 
 * 
 *     def __hash__(FeedPartialSuccess self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedPartialSuccess.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1192
 *         return  super().__hash__()
 * 
 *     def __copy__(FeedPartialSuccess self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cFeedPartialSuccess] cpp_obj = make_shared[cFeedPartialSuccess](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedPartialSuccess_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18FeedPartialSuccess_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedPartialSuccess_6__copy__(((struct __pyx_obj_6picard_5types_FeedPartialSuccess *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedPartialSuccess_6__copy__(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self) {
  std::shared_ptr<::cpp2::FeedPartialSuccess>  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedPartialSuccess>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":1193
 * 
 *     def __copy__(FeedPartialSuccess self):
 *         cdef shared_ptr[cFeedPartialSuccess] cpp_obj = make_shared[cFeedPartialSuccess](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedPartialSuccess>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1193, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1196
 *             deref(self._cpp_obj)
 *         )
 *         return FeedPartialSuccess.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_18FeedPartialSuccess_create(cython_std::move<std::shared_ptr<::cpp2::FeedPartialSuccess> >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1192
 *         return  super().__hash__()
 * 
 *     def __copy__(FeedPartialSuccess self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cFeedPartialSuccess] cpp_obj = make_shared[cFeedPartialSuccess](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedPartialSuccess.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1198
 *         return FeedPartialSuccess.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedPartialSuccess](
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedPartialSuccess_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18FeedPartialSuccess_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18FeedPartialSuccess_8__richcmp__(((struct __pyx_obj_6picard_5types_FeedPartialSuccess *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedPartialSuccess_8__richcmp__(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "picard/types.pyx":1199
 * 
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)             # <<<<<<<<<<<<<<
 *         return __richcmp[cFeedPartialSuccess](
 *             self._cpp_obj,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_FeedPartialSuccess *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_cmp_sametype(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1200
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedPartialSuccess](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<FeedPartialSuccess>other)._cpp_obj,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":1204
 *             (<FeedPartialSuccess>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = (__pyx_v_r == Py_None);
  if ((__pyx_t_2 != 0)) {

    /* "picard/types.pyx":1200
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedPartialSuccess](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<FeedPartialSuccess>other)._cpp_obj,
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(::thrift::py3::richcmp<::cpp2::FeedPartialSuccess>(__pyx_v_self->_cpp_obj, ((struct __pyx_obj_6picard_5types_FeedPartialSuccess *)__pyx_v_other)->_cpp_obj, __pyx_v_op)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "picard/types.pyx":1204
 *             (<FeedPartialSuccess>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_1 = __pyx_v_r;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1198
 *         return FeedPartialSuccess.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedPartialSuccess](
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedPartialSuccess.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1207
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedPartialSuccess()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedPartialSuccess_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_18FeedPartialSuccess_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedPartialSuccess_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_18FeedPartialSuccess_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_18FeedPartialSuccess_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedPartialSuccess_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":1208
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__FeedPartialSuccess()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__FeedPartialSuccess()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1207
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedPartialSuccess()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedPartialSuccess.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1211
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedPartialSuccess].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedPartialSuccess_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_18FeedPartialSuccess_13__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedPartialSuccess_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_18FeedPartialSuccess_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_18FeedPartialSuccess_12__get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedPartialSuccess_12__get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":1213
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedPartialSuccess].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::StructMetadata<::cpp2::FeedPartialSuccess> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":1214
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedPartialSuccess].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1211
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedPartialSuccess].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedPartialSuccess.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1217
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedPartialSuccess"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18FeedPartialSuccess_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_18FeedPartialSuccess_15__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedPartialSuccess_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_18FeedPartialSuccess_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_18FeedPartialSuccess_14__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18FeedPartialSuccess_14__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":1218
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.FeedPartialSuccess"             # <<<<<<<<<<<<<<
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_FeedPartialSuccess);
  __pyx_r = __pyx_kp_u_picard_FeedPartialSuccess;
  goto __pyx_L0;

  /* "picard/types.pyx":1217
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedPartialSuccess"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1220
 *         return "picard.FeedPartialSuccess"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cFeedPartialSuccess](idx)
 * 
 */

static std::string_view __pyx_f_6picard_5types_18FeedPartialSuccess__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self, size_t __pyx_v_idx) {
  std::string_view __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string_view __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_field_name_by_index", 0);

  /* "picard/types.pyx":1221
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 *         return __get_field_name_by_index[cFeedPartialSuccess](idx)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  try {
    __pyx_t_1 = ::thrift::py3::get_field_name_by_index<::cpp2::FeedPartialSuccess>(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1221, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "picard/types.pyx":1220
 *         return "picard.FeedPartialSuccess"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cFeedPartialSuccess](idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("picard.types.FeedPartialSuccess._fbthrift_get_field_name_by_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1223
 *         return __get_field_name_by_index[cFeedPartialSuccess](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 0
 * 
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_18FeedPartialSuccess_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_18FeedPartialSuccess_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6picard_5types_18FeedPartialSuccess_16__cinit__(((struct __pyx_obj_6picard_5types_FeedPartialSuccess *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_18FeedPartialSuccess_16__cinit__(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "picard/types.pyx":1224
 * 
 *     def __cinit__(self):
 *         self._fbthrift_struct_size = 0             # <<<<<<<<<<<<<<
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedPartialSuccess self, __Protocol proto):
 */
  __pyx_v_self->__pyx_base._fbthrift_struct_size = 0;

  /* "picard/types.pyx":1223
 *         return __get_field_name_by_index[cFeedPartialSuccess](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 0
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1226
 *         self._fbthrift_struct_size = 0
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedPartialSuccess self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_18FeedPartialSuccess__serialize(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  std::unique_ptr<folly::IOBuf>  __pyx_v_data;
  struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::unique_ptr<folly::IOBuf>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_serialize", 0);

  /* "picard/types.pyx":1228
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedPartialSuccess self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cFeedPartialSuccess](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":1229
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 *             data = cmove(serializer.cserialize[cFeedPartialSuccess](self._cpp_obj.get(), proto))             # <<<<<<<<<<<<<<
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 */
        try {
          __pyx_t_1 = ::thrift::py3::serialize<::cpp2::FeedPartialSuccess>(__pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1229, __pyx_L4_error)
        }
        __pyx_v_data = cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_t_1);
      }

      /* "picard/types.pyx":1228
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedPartialSuccess self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cFeedPartialSuccess](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":1230
 *         with nogil:
 *             data = cmove(serializer.cserialize[cFeedPartialSuccess](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))             # <<<<<<<<<<<<<<
 * 
 *     cdef cuint32_t _deserialize(FeedPartialSuccess self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = ((PyObject *)__pyx_f_5folly_5iobuf_from_unique_ptr(cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_v_data))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_5folly_5iobuf_IOBuf *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1226
 *         self._fbthrift_struct_size = 0
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedPartialSuccess self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedPartialSuccess._serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1232
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(FeedPartialSuccess self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedPartialSuccess]()
 */

static uint32_t __pyx_f_6picard_5types_18FeedPartialSuccess__deserialize(struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  uint32_t __pyx_v_needed;
  uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedPartialSuccess>  __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_deserialize", 0);

  /* "picard/types.pyx":1234
 *     cdef cuint32_t _deserialize(FeedPartialSuccess self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedPartialSuccess]()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedPartialSuccess](buf, self._cpp_obj.get(), proto)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedPartialSuccess>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1234, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1235
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedPartialSuccess]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cFeedPartialSuccess](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":1236
 *         self._cpp_obj = make_shared[cFeedPartialSuccess]()
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedPartialSuccess](buf, self._cpp_obj.get(), proto)             # <<<<<<<<<<<<<<
 *         return needed
 * 
 */
        try {
          __pyx_t_2 = ::thrift::py3::deserialize<::cpp2::FeedPartialSuccess>(__pyx_v_buf, __pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1236, __pyx_L4_error)
        }
        __pyx_v_needed = __pyx_t_2;
      }

      /* "picard/types.pyx":1235
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedPartialSuccess]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cFeedPartialSuccess](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":1237
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedPartialSuccess](buf, self._cpp_obj.get(), proto)
 *         return needed             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_needed;
  goto __pyx_L0;

  /* "picard/types.pyx":1232
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(FeedPartialSuccess self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedPartialSuccess]()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.FeedPartialSuccess._deserialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1242
 * @__cython.auto_pickle(False)
 * cdef class FeedCompleteSuccess(thrift.py3.types.Struct):
 *     def __init__(FeedCompleteSuccess self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cFeedCompleteSuccess]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedCompleteSuccess_FieldsSetter.create(self._cpp_obj.get())
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_19FeedCompleteSuccess_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_19FeedCompleteSuccess_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_19FeedCompleteSuccess___init__(((struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_19FeedCompleteSuccess___init__(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedCompleteSuccess>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":1243
 * cdef class FeedCompleteSuccess(thrift.py3.types.Struct):
 *     def __init__(FeedCompleteSuccess self, **kwargs):
 *         self._cpp_obj = make_shared[cFeedCompleteSuccess]()             # <<<<<<<<<<<<<<
 *         self._fields_setter = _fbthrift_types_fields.__FeedCompleteSuccess_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedCompleteSuccess>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1243, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1244
 *     def __init__(FeedCompleteSuccess self, **kwargs):
 *         self._cpp_obj = make_shared[cFeedCompleteSuccess]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedCompleteSuccess_FieldsSetter.create(self._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         super().__init__(**kwargs)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter->create(__pyx_v_self->_cpp_obj.get())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_fields_setter));
  __pyx_v_self->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1245
 *         self._cpp_obj = make_shared[cFeedCompleteSuccess]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedCompleteSuccess_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def __call__(FeedCompleteSuccess self, **kwargs):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":1242
 * @__cython.auto_pickle(False)
 * cdef class FeedCompleteSuccess(thrift.py3.types.Struct):
 *     def __init__(FeedCompleteSuccess self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cFeedCompleteSuccess]()
 *         self._fields_setter = _fbthrift_types_fields.__FeedCompleteSuccess_FieldsSetter.create(self._cpp_obj.get())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.FeedCompleteSuccess.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1247
 *         super().__init__(**kwargs)
 * 
 *     def __call__(FeedCompleteSuccess self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_19FeedCompleteSuccess_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6picard_5types_19FeedCompleteSuccess_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__call__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__call__", 1))) return NULL;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_19FeedCompleteSuccess_2__call__(((struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_19FeedCompleteSuccess_2__call__(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v___fbthrift_inst = 0;
  PyObject *__pyx_v___fbthrift_name = NULL;
  PyObject *__pyx_v__fbthrift_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::shared_ptr<::cpp2::FeedCompleteSuccess>  __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "picard/types.pyx":1248
 * 
 *     def __call__(FeedCompleteSuccess self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef FeedCompleteSuccess __fbthrift_inst = FeedCompleteSuccess.__new__(FeedCompleteSuccess)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1249
 *     def __call__(FeedCompleteSuccess self, **kwargs):
 *         if not kwargs:
 *             return self             # <<<<<<<<<<<<<<
 *         cdef FeedCompleteSuccess __fbthrift_inst = FeedCompleteSuccess.__new__(FeedCompleteSuccess)
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedCompleteSuccess](deref(self._cpp_obj))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "picard/types.pyx":1248
 * 
 *     def __call__(FeedCompleteSuccess self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef FeedCompleteSuccess __fbthrift_inst = FeedCompleteSuccess.__new__(FeedCompleteSuccess)
 */
  }

  /* "picard/types.pyx":1250
 *         if not kwargs:
 *             return self
 *         cdef FeedCompleteSuccess __fbthrift_inst = FeedCompleteSuccess.__new__(FeedCompleteSuccess)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedCompleteSuccess](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedCompleteSuccess_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 */
  __pyx_t_3 = ((PyObject *)__pyx_tp_new_6picard_5types_FeedCompleteSuccess(((PyTypeObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1250, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":1251
 *             return self
 *         cdef FeedCompleteSuccess __fbthrift_inst = FeedCompleteSuccess.__new__(FeedCompleteSuccess)
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedCompleteSuccess](deref(self._cpp_obj))             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedCompleteSuccess_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 */
  try {
    __pyx_t_4 = std::make_shared<::cpp2::FeedCompleteSuccess>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1251, __pyx_L1_error)
  }
  __pyx_v___fbthrift_inst->_cpp_obj = __pyx_t_4;

  /* "picard/types.pyx":1252
 *         cdef FeedCompleteSuccess __fbthrift_inst = FeedCompleteSuccess.__new__(FeedCompleteSuccess)
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedCompleteSuccess](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedCompleteSuccess_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 */
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter->create(__pyx_v___fbthrift_inst->_cpp_obj.get())); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v___fbthrift_inst->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v___fbthrift_inst->_fields_setter));
  __pyx_v___fbthrift_inst->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":1253
 *         __fbthrift_inst._cpp_obj = make_shared[cFeedCompleteSuccess](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedCompleteSuccess_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():             # <<<<<<<<<<<<<<
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst
 */
  __pyx_t_5 = 0;
  __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_kwargs, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_8;
  __pyx_t_8 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_6, &__pyx_t_5, &__pyx_t_8, &__pyx_t_9, NULL, __pyx_t_7);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 1253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v___fbthrift_name, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v__fbthrift_value, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "picard/types.pyx":1254
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__FeedCompleteSuccess_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v___fbthrift_name))||((__pyx_v___fbthrift_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v___fbthrift_name)->tp_name), 0))) __PYX_ERR(0, 1254, __pyx_L1_error)
    ((struct __pyx_vtabstruct_6picard_5types_FeedCompleteSuccess *)__pyx_v___fbthrift_inst->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_set_field(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v___fbthrift_inst), ((PyObject*)__pyx_v___fbthrift_name), __pyx_v__fbthrift_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1254, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "picard/types.pyx":1255
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1247
 *         super().__init__(**kwargs)
 * 
 *     def __call__(FeedCompleteSuccess self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("picard.types.FeedCompleteSuccess.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XDECREF(__pyx_v___fbthrift_name);
  __Pyx_XDECREF(__pyx_v__fbthrift_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1257
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

static void __pyx_f_6picard_5types_19FeedCompleteSuccess__fbthrift_set_field(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_set_field", 0);

  /* "picard/types.pyx":1258
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 *         self._fields_setter.set_field(name.encode("utf-8"), value)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _fbthrift_isset(self):
 */
  if (unlikely(__pyx_v_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 1258, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 1258, __pyx_L1_error)
  ((struct __pyx_vtabstruct_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter *)__pyx_v_self->_fields_setter->__pyx_base.__pyx_vtab)->__pyx_base.set_field(((struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter *)__pyx_v_self->_fields_setter), __pyx_t_2, __pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1258, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":1257
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedCompleteSuccess._fbthrift_set_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "picard/types.pyx":1260
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("FeedCompleteSuccess", {
 *           "leftover": deref(self._cpp_obj).leftover_ref().has_value(),
 */

static PyObject *__pyx_f_6picard_5types_19FeedCompleteSuccess__fbthrift_isset(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_isset", 0);

  /* "picard/types.pyx":1261
 * 
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("FeedCompleteSuccess", {             # <<<<<<<<<<<<<<
 *           "leftover": deref(self._cpp_obj).leftover_ref().has_value(),
 *         })
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_thrift); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_py3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IsSet); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":1262
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("FeedCompleteSuccess", {
 *           "leftover": deref(self._cpp_obj).leftover_ref().has_value(),             # <<<<<<<<<<<<<<
 *         })
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).leftover_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_leftover, __pyx_t_4) < 0) __PYX_ERR(0, 1262, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_FeedCompleteSuccess, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1261, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_FeedCompleteSuccess, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1261, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_FeedCompleteSuccess);
    __Pyx_GIVEREF(__pyx_n_u_FeedCompleteSuccess);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_n_u_FeedCompleteSuccess);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1260
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("FeedCompleteSuccess", {
 *           "leftover": deref(self._cpp_obj).leftover_ref().has_value(),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.FeedCompleteSuccess._fbthrift_isset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1266
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedCompleteSuccess] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedCompleteSuccess>FeedCompleteSuccess.__new__(FeedCompleteSuccess)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

static PyObject *__pyx_f_6picard_5types_19FeedCompleteSuccess_create(std::shared_ptr<::cpp2::FeedCompleteSuccess>  __pyx_v_cpp_obj) {
  struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":1267
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedCompleteSuccess] cpp_obj):
 *         __fbthrift_inst = <FeedCompleteSuccess>FeedCompleteSuccess.__new__(FeedCompleteSuccess)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_FeedCompleteSuccess(((PyTypeObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1268
 *     cdef create(shared_ptr[cFeedCompleteSuccess] cpp_obj):
 *         __fbthrift_inst = <FeedCompleteSuccess>FeedCompleteSuccess.__new__(FeedCompleteSuccess)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<::cpp2::FeedCompleteSuccess> >(__pyx_v_cpp_obj);

  /* "picard/types.pyx":1269
 *         __fbthrift_inst = <FeedCompleteSuccess>FeedCompleteSuccess.__new__(FeedCompleteSuccess)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1266
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedCompleteSuccess] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedCompleteSuccess>FeedCompleteSuccess.__new__(FeedCompleteSuccess)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedCompleteSuccess.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1272
 * 
 *     @property
 *     def leftover(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).leftover_ref().value()).decode('UTF-8')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_19FeedCompleteSuccess_8leftover_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_19FeedCompleteSuccess_8leftover_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_19FeedCompleteSuccess_8leftover___get__(((struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_19FeedCompleteSuccess_8leftover___get__(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":1274
 *     def leftover(self):
 * 
 *         return (<bytes>deref(self._cpp_obj).leftover_ref().value()).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string((*__pyx_v_self->_cpp_obj).leftover_ref().value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "decode");
    __PYX_ERR(0, 1274, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_decode_bytes(((PyObject*)__pyx_t_1), 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1272
 * 
 *     @property
 *     def leftover(self):             # <<<<<<<<<<<<<<
 * 
 *         return (<bytes>deref(self._cpp_obj).leftover_ref().value()).decode('UTF-8')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedCompleteSuccess.leftover.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1277
 * 
 * 
 *     def __hash__(FeedCompleteSuccess self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6picard_5types_19FeedCompleteSuccess_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6picard_5types_19FeedCompleteSuccess_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_19FeedCompleteSuccess_4__hash__(((struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6picard_5types_19FeedCompleteSuccess_4__hash__(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "picard/types.pyx":1278
 * 
 *     def __hash__(FeedCompleteSuccess self):
 *         return  super().__hash__()             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(FeedCompleteSuccess self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "picard/types.pyx":1277
 * 
 * 
 *     def __hash__(FeedCompleteSuccess self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedCompleteSuccess.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1280
 *         return  super().__hash__()
 * 
 *     def __copy__(FeedCompleteSuccess self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cFeedCompleteSuccess] cpp_obj = make_shared[cFeedCompleteSuccess](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_19FeedCompleteSuccess_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_19FeedCompleteSuccess_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_19FeedCompleteSuccess_6__copy__(((struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_19FeedCompleteSuccess_6__copy__(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self) {
  std::shared_ptr<::cpp2::FeedCompleteSuccess>  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedCompleteSuccess>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":1281
 * 
 *     def __copy__(FeedCompleteSuccess self):
 *         cdef shared_ptr[cFeedCompleteSuccess] cpp_obj = make_shared[cFeedCompleteSuccess](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedCompleteSuccess>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1281, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1284
 *             deref(self._cpp_obj)
 *         )
 *         return FeedCompleteSuccess.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_19FeedCompleteSuccess_create(cython_std::move<std::shared_ptr<::cpp2::FeedCompleteSuccess> >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1280
 *         return  super().__hash__()
 * 
 *     def __copy__(FeedCompleteSuccess self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cFeedCompleteSuccess] cpp_obj = make_shared[cFeedCompleteSuccess](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedCompleteSuccess.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1286
 *         return FeedCompleteSuccess.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedCompleteSuccess](
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_19FeedCompleteSuccess_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6picard_5types_19FeedCompleteSuccess_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_19FeedCompleteSuccess_8__richcmp__(((struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_19FeedCompleteSuccess_8__richcmp__(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "picard/types.pyx":1287
 * 
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)             # <<<<<<<<<<<<<<
 *         return __richcmp[cFeedCompleteSuccess](
 *             self._cpp_obj,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_FeedCompleteSuccess *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_cmp_sametype(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1288
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedCompleteSuccess](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<FeedCompleteSuccess>other)._cpp_obj,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":1292
 *             (<FeedCompleteSuccess>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = (__pyx_v_r == Py_None);
  if ((__pyx_t_2 != 0)) {

    /* "picard/types.pyx":1288
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedCompleteSuccess](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<FeedCompleteSuccess>other)._cpp_obj,
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(::thrift::py3::richcmp<::cpp2::FeedCompleteSuccess>(__pyx_v_self->_cpp_obj, ((struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)__pyx_v_other)->_cpp_obj, __pyx_v_op)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "picard/types.pyx":1292
 *             (<FeedCompleteSuccess>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_1 = __pyx_v_r;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1286
 *         return FeedCompleteSuccess.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedCompleteSuccess](
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedCompleteSuccess.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1295
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedCompleteSuccess()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_19FeedCompleteSuccess_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_19FeedCompleteSuccess_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_19FeedCompleteSuccess_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_19FeedCompleteSuccess_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_19FeedCompleteSuccess_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_19FeedCompleteSuccess_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":1296
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__FeedCompleteSuccess()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__FeedCompleteSuccess()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1295
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedCompleteSuccess()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedCompleteSuccess.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1299
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedCompleteSuccess].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_19FeedCompleteSuccess_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_19FeedCompleteSuccess_13__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_19FeedCompleteSuccess_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_19FeedCompleteSuccess_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_19FeedCompleteSuccess_12__get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_19FeedCompleteSuccess_12__get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":1301
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedCompleteSuccess].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::StructMetadata<::cpp2::FeedCompleteSuccess> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":1302
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedCompleteSuccess].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1299
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedCompleteSuccess].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedCompleteSuccess.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1305
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedCompleteSuccess"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_19FeedCompleteSuccess_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_19FeedCompleteSuccess_15__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_19FeedCompleteSuccess_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_19FeedCompleteSuccess_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_19FeedCompleteSuccess_14__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_19FeedCompleteSuccess_14__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":1306
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.FeedCompleteSuccess"             # <<<<<<<<<<<<<<
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_FeedCompleteSuccess);
  __pyx_r = __pyx_kp_u_picard_FeedCompleteSuccess;
  goto __pyx_L0;

  /* "picard/types.pyx":1305
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedCompleteSuccess"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1308
 *         return "picard.FeedCompleteSuccess"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cFeedCompleteSuccess](idx)
 * 
 */

static std::string_view __pyx_f_6picard_5types_19FeedCompleteSuccess__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self, size_t __pyx_v_idx) {
  std::string_view __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string_view __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_field_name_by_index", 0);

  /* "picard/types.pyx":1309
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 *         return __get_field_name_by_index[cFeedCompleteSuccess](idx)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  try {
    __pyx_t_1 = ::thrift::py3::get_field_name_by_index<::cpp2::FeedCompleteSuccess>(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1309, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "picard/types.pyx":1308
 *         return "picard.FeedCompleteSuccess"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cFeedCompleteSuccess](idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("picard.types.FeedCompleteSuccess._fbthrift_get_field_name_by_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1311
 *         return __get_field_name_by_index[cFeedCompleteSuccess](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 1
 * 
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_19FeedCompleteSuccess_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_19FeedCompleteSuccess_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6picard_5types_19FeedCompleteSuccess_16__cinit__(((struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_19FeedCompleteSuccess_16__cinit__(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "picard/types.pyx":1312
 * 
 *     def __cinit__(self):
 *         self._fbthrift_struct_size = 1             # <<<<<<<<<<<<<<
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedCompleteSuccess self, __Protocol proto):
 */
  __pyx_v_self->__pyx_base._fbthrift_struct_size = 1;

  /* "picard/types.pyx":1311
 *         return __get_field_name_by_index[cFeedCompleteSuccess](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 1
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1314
 *         self._fbthrift_struct_size = 1
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedCompleteSuccess self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_19FeedCompleteSuccess__serialize(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  std::unique_ptr<folly::IOBuf>  __pyx_v_data;
  struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::unique_ptr<folly::IOBuf>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_serialize", 0);

  /* "picard/types.pyx":1316
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedCompleteSuccess self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cFeedCompleteSuccess](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":1317
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 *             data = cmove(serializer.cserialize[cFeedCompleteSuccess](self._cpp_obj.get(), proto))             # <<<<<<<<<<<<<<
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 */
        try {
          __pyx_t_1 = ::thrift::py3::serialize<::cpp2::FeedCompleteSuccess>(__pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1317, __pyx_L4_error)
        }
        __pyx_v_data = cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_t_1);
      }

      /* "picard/types.pyx":1316
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedCompleteSuccess self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cFeedCompleteSuccess](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":1318
 *         with nogil:
 *             data = cmove(serializer.cserialize[cFeedCompleteSuccess](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))             # <<<<<<<<<<<<<<
 * 
 *     cdef cuint32_t _deserialize(FeedCompleteSuccess self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = ((PyObject *)__pyx_f_5folly_5iobuf_from_unique_ptr(cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_v_data))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_5folly_5iobuf_IOBuf *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1314
 *         self._fbthrift_struct_size = 1
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedCompleteSuccess self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedCompleteSuccess._serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1320
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(FeedCompleteSuccess self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedCompleteSuccess]()
 */

static uint32_t __pyx_f_6picard_5types_19FeedCompleteSuccess__deserialize(struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  uint32_t __pyx_v_needed;
  uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedCompleteSuccess>  __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_deserialize", 0);

  /* "picard/types.pyx":1322
 *     cdef cuint32_t _deserialize(FeedCompleteSuccess self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedCompleteSuccess]()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedCompleteSuccess](buf, self._cpp_obj.get(), proto)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedCompleteSuccess>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1322, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1323
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedCompleteSuccess]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cFeedCompleteSuccess](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":1324
 *         self._cpp_obj = make_shared[cFeedCompleteSuccess]()
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedCompleteSuccess](buf, self._cpp_obj.get(), proto)             # <<<<<<<<<<<<<<
 *         return needed
 * 
 */
        try {
          __pyx_t_2 = ::thrift::py3::deserialize<::cpp2::FeedCompleteSuccess>(__pyx_v_buf, __pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1324, __pyx_L4_error)
        }
        __pyx_v_needed = __pyx_t_2;
      }

      /* "picard/types.pyx":1323
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedCompleteSuccess]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cFeedCompleteSuccess](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":1325
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedCompleteSuccess](buf, self._cpp_obj.get(), proto)
 *         return needed             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_needed;
  goto __pyx_L0;

  /* "picard/types.pyx":1320
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(FeedCompleteSuccess self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedCompleteSuccess]()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.FeedCompleteSuccess._deserialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1334
 *     Type = __FeedResultType
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *         self, *,
 *         FeedParseFailure feedParseFailure=None,
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_10FeedResult_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_10FeedResult_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_feedParseFailure = 0;
  struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_feedTimeoutFailure = 0;
  struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_feedPartialSuccess = 0;
  struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_feedCompleteSuccess = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_feedParseFailure,&__pyx_n_s_feedTimeoutFailure,&__pyx_n_s_feedPartialSuccess,&__pyx_n_s_feedCompleteSuccess,0};
    PyObject* values[4] = {0,0,0,0};

    /* "picard/types.pyx":1336
 *     def __init__(
 *         self, *,
 *         FeedParseFailure feedParseFailure=None,             # <<<<<<<<<<<<<<
 *         FeedTimeoutFailure feedTimeoutFailure=None,
 *         FeedPartialSuccess feedPartialSuccess=None,
 */
    values[0] = (PyObject *)((struct __pyx_obj_6picard_5types_FeedParseFailure *)Py_None);

    /* "picard/types.pyx":1337
 *         self, *,
 *         FeedParseFailure feedParseFailure=None,
 *         FeedTimeoutFailure feedTimeoutFailure=None,             # <<<<<<<<<<<<<<
 *         FeedPartialSuccess feedPartialSuccess=None,
 *         FeedCompleteSuccess feedCompleteSuccess=None
 */
    values[1] = (PyObject *)((struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)Py_None);

    /* "picard/types.pyx":1338
 *         FeedParseFailure feedParseFailure=None,
 *         FeedTimeoutFailure feedTimeoutFailure=None,
 *         FeedPartialSuccess feedPartialSuccess=None,             # <<<<<<<<<<<<<<
 *         FeedCompleteSuccess feedCompleteSuccess=None
 *     ):
 */
    values[2] = (PyObject *)((struct __pyx_obj_6picard_5types_FeedPartialSuccess *)Py_None);

    /* "picard/types.pyx":1339
 *         FeedTimeoutFailure feedTimeoutFailure=None,
 *         FeedPartialSuccess feedPartialSuccess=None,
 *         FeedCompleteSuccess feedCompleteSuccess=None             # <<<<<<<<<<<<<<
 *     ):
 *         self._cpp_obj = __to_shared_ptr(cmove(FeedResult._make_instance(
 */
    values[3] = (PyObject *)((struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      if (kw_args > 0 && likely(kw_args <= 4)) {
        Py_ssize_t index;
        for (index = 0; index < 4 && kw_args > 0; index++) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, *__pyx_pyargnames[index]);
          if (value) { values[index] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, 0, "__init__") < 0)) __PYX_ERR(0, 1334, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 0) {
      goto __pyx_L5_argtuple_error;
    } else {
    }
    __pyx_v_feedParseFailure = ((struct __pyx_obj_6picard_5types_FeedParseFailure *)values[0]);
    __pyx_v_feedTimeoutFailure = ((struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)values[1]);
    __pyx_v_feedPartialSuccess = ((struct __pyx_obj_6picard_5types_FeedPartialSuccess *)values[2]);
    __pyx_v_feedCompleteSuccess = ((struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)values[3]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1334, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.FeedResult.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_feedParseFailure), __pyx_ptype_6picard_5types_FeedParseFailure, 1, "feedParseFailure", 0))) __PYX_ERR(0, 1336, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_feedTimeoutFailure), __pyx_ptype_6picard_5types_FeedTimeoutFailure, 1, "feedTimeoutFailure", 0))) __PYX_ERR(0, 1337, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_feedPartialSuccess), __pyx_ptype_6picard_5types_FeedPartialSuccess, 1, "feedPartialSuccess", 0))) __PYX_ERR(0, 1338, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_feedCompleteSuccess), __pyx_ptype_6picard_5types_FeedCompleteSuccess, 1, "feedCompleteSuccess", 0))) __PYX_ERR(0, 1339, __pyx_L1_error)
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult___init__(((struct __pyx_obj_6picard_5types_FeedResult *)__pyx_v_self), __pyx_v_feedParseFailure, __pyx_v_feedTimeoutFailure, __pyx_v_feedPartialSuccess, __pyx_v_feedCompleteSuccess);

  /* "picard/types.pyx":1334
 *     Type = __FeedResultType
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *         self, *,
 *         FeedParseFailure feedParseFailure=None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_10FeedResult___init__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self, struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_feedParseFailure, struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_feedTimeoutFailure, struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_feedPartialSuccess, struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_feedCompleteSuccess) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::unique_ptr<::cpp2::FeedResult>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":1341
 *         FeedCompleteSuccess feedCompleteSuccess=None
 *     ):
 *         self._cpp_obj = __to_shared_ptr(cmove(FeedResult._make_instance(             # <<<<<<<<<<<<<<
 *           NULL,
 *           feedParseFailure,
 */
  __pyx_t_1 = __pyx_f_6picard_5types_10FeedResult__make_instance(NULL, __pyx_v_feedParseFailure, __pyx_v_feedTimeoutFailure, __pyx_v_feedPartialSuccess, __pyx_v_feedCompleteSuccess); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1341, __pyx_L1_error)
  __pyx_v_self->_cpp_obj = folly::to_shared_ptr<::cpp2::FeedResult>(cython_std::move<std::unique_ptr<::cpp2::FeedResult> >(__pyx_t_1));

  /* "picard/types.pyx":1348
 *           feedCompleteSuccess,
 *         )))
 *         self._load_cache()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_6picard_5types_FeedResult *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->_load_cache(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":1334
 *     Type = __FeedResultType
 * 
 *     def __init__(             # <<<<<<<<<<<<<<
 *         self, *,
 *         FeedParseFailure feedParseFailure=None,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedResult.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1351
 * 
 *     @staticmethod
 *     def fromValue(value):             # <<<<<<<<<<<<<<
 *         if value is None:
 *             return FeedResult()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10FeedResult_3fromValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_10FeedResult_3fromValue = {"fromValue", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_10FeedResult_3fromValue, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_10FeedResult_3fromValue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_value = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fromValue (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_value,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fromValue") < 0)) __PYX_ERR(0, 1351, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_value = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fromValue", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1351, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.FeedResult.fromValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult_2fromValue(__pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10FeedResult_2fromValue(PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fromValue", 0);

  /* "picard/types.pyx":1352
 *     @staticmethod
 *     def fromValue(value):
 *         if value is None:             # <<<<<<<<<<<<<<
 *             return FeedResult()
 *         if isinstance(value, FeedParseFailure):
 */
  __pyx_t_1 = (__pyx_v_value == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1353
 *     def fromValue(value):
 *         if value is None:
 *             return FeedResult()             # <<<<<<<<<<<<<<
 *         if isinstance(value, FeedParseFailure):
 *             return FeedResult(feedParseFailure=value)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_6picard_5types_FeedResult)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":1352
 *     @staticmethod
 *     def fromValue(value):
 *         if value is None:             # <<<<<<<<<<<<<<
 *             return FeedResult()
 *         if isinstance(value, FeedParseFailure):
 */
  }

  /* "picard/types.pyx":1354
 *         if value is None:
 *             return FeedResult()
 *         if isinstance(value, FeedParseFailure):             # <<<<<<<<<<<<<<
 *             return FeedResult(feedParseFailure=value)
 *         if isinstance(value, FeedTimeoutFailure):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6picard_5types_FeedParseFailure); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "picard/types.pyx":1355
 *             return FeedResult()
 *         if isinstance(value, FeedParseFailure):
 *             return FeedResult(feedParseFailure=value)             # <<<<<<<<<<<<<<
 *         if isinstance(value, FeedTimeoutFailure):
 *             return FeedResult(feedTimeoutFailure=value)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_feedParseFailure, __pyx_v_value) < 0) __PYX_ERR(0, 1355, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6picard_5types_FeedResult), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":1354
 *         if value is None:
 *             return FeedResult()
 *         if isinstance(value, FeedParseFailure):             # <<<<<<<<<<<<<<
 *             return FeedResult(feedParseFailure=value)
 *         if isinstance(value, FeedTimeoutFailure):
 */
  }

  /* "picard/types.pyx":1356
 *         if isinstance(value, FeedParseFailure):
 *             return FeedResult(feedParseFailure=value)
 *         if isinstance(value, FeedTimeoutFailure):             # <<<<<<<<<<<<<<
 *             return FeedResult(feedTimeoutFailure=value)
 *         if isinstance(value, FeedPartialSuccess):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6picard_5types_FeedTimeoutFailure); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1357
 *             return FeedResult(feedParseFailure=value)
 *         if isinstance(value, FeedTimeoutFailure):
 *             return FeedResult(feedTimeoutFailure=value)             # <<<<<<<<<<<<<<
 *         if isinstance(value, FeedPartialSuccess):
 *             return FeedResult(feedPartialSuccess=value)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_feedTimeoutFailure, __pyx_v_value) < 0) __PYX_ERR(0, 1357, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6picard_5types_FeedResult), __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":1356
 *         if isinstance(value, FeedParseFailure):
 *             return FeedResult(feedParseFailure=value)
 *         if isinstance(value, FeedTimeoutFailure):             # <<<<<<<<<<<<<<
 *             return FeedResult(feedTimeoutFailure=value)
 *         if isinstance(value, FeedPartialSuccess):
 */
  }

  /* "picard/types.pyx":1358
 *         if isinstance(value, FeedTimeoutFailure):
 *             return FeedResult(feedTimeoutFailure=value)
 *         if isinstance(value, FeedPartialSuccess):             # <<<<<<<<<<<<<<
 *             return FeedResult(feedPartialSuccess=value)
 *         if isinstance(value, FeedCompleteSuccess):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6picard_5types_FeedPartialSuccess); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "picard/types.pyx":1359
 *             return FeedResult(feedTimeoutFailure=value)
 *         if isinstance(value, FeedPartialSuccess):
 *             return FeedResult(feedPartialSuccess=value)             # <<<<<<<<<<<<<<
 *         if isinstance(value, FeedCompleteSuccess):
 *             return FeedResult(feedCompleteSuccess=value)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_feedPartialSuccess, __pyx_v_value) < 0) __PYX_ERR(0, 1359, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6picard_5types_FeedResult), __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":1358
 *         if isinstance(value, FeedTimeoutFailure):
 *             return FeedResult(feedTimeoutFailure=value)
 *         if isinstance(value, FeedPartialSuccess):             # <<<<<<<<<<<<<<
 *             return FeedResult(feedPartialSuccess=value)
 *         if isinstance(value, FeedCompleteSuccess):
 */
  }

  /* "picard/types.pyx":1360
 *         if isinstance(value, FeedPartialSuccess):
 *             return FeedResult(feedPartialSuccess=value)
 *         if isinstance(value, FeedCompleteSuccess):             # <<<<<<<<<<<<<<
 *             return FeedResult(feedCompleteSuccess=value)
 *         raise ValueError(f"Unable to derive correct union field for value: {value}")
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_value, __pyx_ptype_6picard_5types_FeedCompleteSuccess); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1361
 *             return FeedResult(feedPartialSuccess=value)
 *         if isinstance(value, FeedCompleteSuccess):
 *             return FeedResult(feedCompleteSuccess=value)             # <<<<<<<<<<<<<<
 *         raise ValueError(f"Unable to derive correct union field for value: {value}")
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_feedCompleteSuccess, __pyx_v_value) < 0) __PYX_ERR(0, 1361, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6picard_5types_FeedResult), __pyx_empty_tuple, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":1360
 *         if isinstance(value, FeedPartialSuccess):
 *             return FeedResult(feedPartialSuccess=value)
 *         if isinstance(value, FeedCompleteSuccess):             # <<<<<<<<<<<<<<
 *             return FeedResult(feedCompleteSuccess=value)
 *         raise ValueError(f"Unable to derive correct union field for value: {value}")
 */
  }

  /* "picard/types.pyx":1362
 *         if isinstance(value, FeedCompleteSuccess):
 *             return FeedResult(feedCompleteSuccess=value)
 *         raise ValueError(f"Unable to derive correct union field for value: {value}")             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_value, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Unable_to_derive_correct_union_f, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(0, 1362, __pyx_L1_error)

  /* "picard/types.pyx":1351
 * 
 *     @staticmethod
 *     def fromValue(value):             # <<<<<<<<<<<<<<
 *         if value is None:
 *             return FeedResult()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.FeedResult.fromValue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1365
 * 
 *     @staticmethod
 *     cdef unique_ptr[cFeedResult] _make_instance(             # <<<<<<<<<<<<<<
 *         cFeedResult* base_instance,
 *         FeedParseFailure feedParseFailure,
 */

static std::unique_ptr<::cpp2::FeedResult>  __pyx_f_6picard_5types_10FeedResult__make_instance(CYTHON_UNUSED ::cpp2::FeedResult *__pyx_v_base_instance, struct __pyx_obj_6picard_5types_FeedParseFailure *__pyx_v_feedParseFailure, struct __pyx_obj_6picard_5types_FeedTimeoutFailure *__pyx_v_feedTimeoutFailure, struct __pyx_obj_6picard_5types_FeedPartialSuccess *__pyx_v_feedPartialSuccess, struct __pyx_obj_6picard_5types_FeedCompleteSuccess *__pyx_v_feedCompleteSuccess) {
  std::unique_ptr<::cpp2::FeedResult>  __pyx_v_c_inst;
  int __pyx_v_any_set;
  std::unique_ptr<::cpp2::FeedResult>  __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_instance", 0);

  /* "picard/types.pyx":1372
 *         FeedCompleteSuccess feedCompleteSuccess
 *     ) except *:
 *         cdef unique_ptr[cFeedResult] c_inst = make_unique[cFeedResult]()             # <<<<<<<<<<<<<<
 *         cdef bint any_set = False
 *         if feedParseFailure is not None:
 */
  __pyx_v_c_inst = std::make_unique<::cpp2::FeedResult>();

  /* "picard/types.pyx":1373
 *     ) except *:
 *         cdef unique_ptr[cFeedResult] c_inst = make_unique[cFeedResult]()
 *         cdef bint any_set = False             # <<<<<<<<<<<<<<
 *         if feedParseFailure is not None:
 *             if any_set:
 */
  __pyx_v_any_set = 0;

  /* "picard/types.pyx":1374
 *         cdef unique_ptr[cFeedResult] c_inst = make_unique[cFeedResult]()
 *         cdef bint any_set = False
 *         if feedParseFailure is not None:             # <<<<<<<<<<<<<<
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_feedParseFailure) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1375
 *         cdef bint any_set = False
 *         if feedParseFailure is not None:
 *             if any_set:             # <<<<<<<<<<<<<<
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedParseFailure(deref((<FeedParseFailure?> feedParseFailure)._cpp_obj))
 */
    __pyx_t_2 = (__pyx_v_any_set != 0);
    if (unlikely(__pyx_t_2)) {

      /* "picard/types.pyx":1376
 *         if feedParseFailure is not None:
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")             # <<<<<<<<<<<<<<
 *             deref(c_inst).set_feedParseFailure(deref((<FeedParseFailure?> feedParseFailure)._cpp_obj))
 *             any_set = True
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1376, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 1376, __pyx_L1_error)

      /* "picard/types.pyx":1375
 *         cdef bint any_set = False
 *         if feedParseFailure is not None:
 *             if any_set:             # <<<<<<<<<<<<<<
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedParseFailure(deref((<FeedParseFailure?> feedParseFailure)._cpp_obj))
 */
    }

    /* "picard/types.pyx":1377
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedParseFailure(deref((<FeedParseFailure?> feedParseFailure)._cpp_obj))             # <<<<<<<<<<<<<<
 *             any_set = True
 *         if feedTimeoutFailure is not None:
 */
    if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_feedParseFailure), __pyx_ptype_6picard_5types_FeedParseFailure)))) __PYX_ERR(0, 1377, __pyx_L1_error)
    (void)((*__pyx_v_c_inst).set_feedParseFailure((*__pyx_v_feedParseFailure->_cpp_obj)));

    /* "picard/types.pyx":1378
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedParseFailure(deref((<FeedParseFailure?> feedParseFailure)._cpp_obj))
 *             any_set = True             # <<<<<<<<<<<<<<
 *         if feedTimeoutFailure is not None:
 *             if any_set:
 */
    __pyx_v_any_set = 1;

    /* "picard/types.pyx":1374
 *         cdef unique_ptr[cFeedResult] c_inst = make_unique[cFeedResult]()
 *         cdef bint any_set = False
 *         if feedParseFailure is not None:             # <<<<<<<<<<<<<<
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 */
  }

  /* "picard/types.pyx":1379
 *             deref(c_inst).set_feedParseFailure(deref((<FeedParseFailure?> feedParseFailure)._cpp_obj))
 *             any_set = True
 *         if feedTimeoutFailure is not None:             # <<<<<<<<<<<<<<
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_feedTimeoutFailure) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "picard/types.pyx":1380
 *             any_set = True
 *         if feedTimeoutFailure is not None:
 *             if any_set:             # <<<<<<<<<<<<<<
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedTimeoutFailure(deref((<FeedTimeoutFailure?> feedTimeoutFailure)._cpp_obj))
 */
    __pyx_t_1 = (__pyx_v_any_set != 0);
    if (unlikely(__pyx_t_1)) {

      /* "picard/types.pyx":1381
 *         if feedTimeoutFailure is not None:
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")             # <<<<<<<<<<<<<<
 *             deref(c_inst).set_feedTimeoutFailure(deref((<FeedTimeoutFailure?> feedTimeoutFailure)._cpp_obj))
 *             any_set = True
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1381, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 1381, __pyx_L1_error)

      /* "picard/types.pyx":1380
 *             any_set = True
 *         if feedTimeoutFailure is not None:
 *             if any_set:             # <<<<<<<<<<<<<<
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedTimeoutFailure(deref((<FeedTimeoutFailure?> feedTimeoutFailure)._cpp_obj))
 */
    }

    /* "picard/types.pyx":1382
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedTimeoutFailure(deref((<FeedTimeoutFailure?> feedTimeoutFailure)._cpp_obj))             # <<<<<<<<<<<<<<
 *             any_set = True
 *         if feedPartialSuccess is not None:
 */
    if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_feedTimeoutFailure), __pyx_ptype_6picard_5types_FeedTimeoutFailure)))) __PYX_ERR(0, 1382, __pyx_L1_error)
    (void)((*__pyx_v_c_inst).set_feedTimeoutFailure((*__pyx_v_feedTimeoutFailure->_cpp_obj)));

    /* "picard/types.pyx":1383
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedTimeoutFailure(deref((<FeedTimeoutFailure?> feedTimeoutFailure)._cpp_obj))
 *             any_set = True             # <<<<<<<<<<<<<<
 *         if feedPartialSuccess is not None:
 *             if any_set:
 */
    __pyx_v_any_set = 1;

    /* "picard/types.pyx":1379
 *             deref(c_inst).set_feedParseFailure(deref((<FeedParseFailure?> feedParseFailure)._cpp_obj))
 *             any_set = True
 *         if feedTimeoutFailure is not None:             # <<<<<<<<<<<<<<
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 */
  }

  /* "picard/types.pyx":1384
 *             deref(c_inst).set_feedTimeoutFailure(deref((<FeedTimeoutFailure?> feedTimeoutFailure)._cpp_obj))
 *             any_set = True
 *         if feedPartialSuccess is not None:             # <<<<<<<<<<<<<<
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_feedPartialSuccess) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1385
 *             any_set = True
 *         if feedPartialSuccess is not None:
 *             if any_set:             # <<<<<<<<<<<<<<
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedPartialSuccess(deref((<FeedPartialSuccess?> feedPartialSuccess)._cpp_obj))
 */
    __pyx_t_2 = (__pyx_v_any_set != 0);
    if (unlikely(__pyx_t_2)) {

      /* "picard/types.pyx":1386
 *         if feedPartialSuccess is not None:
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")             # <<<<<<<<<<<<<<
 *             deref(c_inst).set_feedPartialSuccess(deref((<FeedPartialSuccess?> feedPartialSuccess)._cpp_obj))
 *             any_set = True
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1386, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 1386, __pyx_L1_error)

      /* "picard/types.pyx":1385
 *             any_set = True
 *         if feedPartialSuccess is not None:
 *             if any_set:             # <<<<<<<<<<<<<<
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedPartialSuccess(deref((<FeedPartialSuccess?> feedPartialSuccess)._cpp_obj))
 */
    }

    /* "picard/types.pyx":1387
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedPartialSuccess(deref((<FeedPartialSuccess?> feedPartialSuccess)._cpp_obj))             # <<<<<<<<<<<<<<
 *             any_set = True
 *         if feedCompleteSuccess is not None:
 */
    if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_feedPartialSuccess), __pyx_ptype_6picard_5types_FeedPartialSuccess)))) __PYX_ERR(0, 1387, __pyx_L1_error)
    (void)((*__pyx_v_c_inst).set_feedPartialSuccess((*__pyx_v_feedPartialSuccess->_cpp_obj)));

    /* "picard/types.pyx":1388
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedPartialSuccess(deref((<FeedPartialSuccess?> feedPartialSuccess)._cpp_obj))
 *             any_set = True             # <<<<<<<<<<<<<<
 *         if feedCompleteSuccess is not None:
 *             if any_set:
 */
    __pyx_v_any_set = 1;

    /* "picard/types.pyx":1384
 *             deref(c_inst).set_feedTimeoutFailure(deref((<FeedTimeoutFailure?> feedTimeoutFailure)._cpp_obj))
 *             any_set = True
 *         if feedPartialSuccess is not None:             # <<<<<<<<<<<<<<
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 */
  }

  /* "picard/types.pyx":1389
 *             deref(c_inst).set_feedPartialSuccess(deref((<FeedPartialSuccess?> feedPartialSuccess)._cpp_obj))
 *             any_set = True
 *         if feedCompleteSuccess is not None:             # <<<<<<<<<<<<<<
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_feedCompleteSuccess) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "picard/types.pyx":1390
 *             any_set = True
 *         if feedCompleteSuccess is not None:
 *             if any_set:             # <<<<<<<<<<<<<<
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedCompleteSuccess(deref((<FeedCompleteSuccess?> feedCompleteSuccess)._cpp_obj))
 */
    __pyx_t_1 = (__pyx_v_any_set != 0);
    if (unlikely(__pyx_t_1)) {

      /* "picard/types.pyx":1391
 *         if feedCompleteSuccess is not None:
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")             # <<<<<<<<<<<<<<
 *             deref(c_inst).set_feedCompleteSuccess(deref((<FeedCompleteSuccess?> feedCompleteSuccess)._cpp_obj))
 *             any_set = True
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1391, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 1391, __pyx_L1_error)

      /* "picard/types.pyx":1390
 *             any_set = True
 *         if feedCompleteSuccess is not None:
 *             if any_set:             # <<<<<<<<<<<<<<
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedCompleteSuccess(deref((<FeedCompleteSuccess?> feedCompleteSuccess)._cpp_obj))
 */
    }

    /* "picard/types.pyx":1392
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedCompleteSuccess(deref((<FeedCompleteSuccess?> feedCompleteSuccess)._cpp_obj))             # <<<<<<<<<<<<<<
 *             any_set = True
 *         # in C++ you don't have to call move(), but this doesn't translate
 */
    if (!(likely(__Pyx_TypeTest(((PyObject *)__pyx_v_feedCompleteSuccess), __pyx_ptype_6picard_5types_FeedCompleteSuccess)))) __PYX_ERR(0, 1392, __pyx_L1_error)
    (void)((*__pyx_v_c_inst).set_feedCompleteSuccess((*__pyx_v_feedCompleteSuccess->_cpp_obj)));

    /* "picard/types.pyx":1393
 *                 raise TypeError("At most one field may be set when initializing a union")
 *             deref(c_inst).set_feedCompleteSuccess(deref((<FeedCompleteSuccess?> feedCompleteSuccess)._cpp_obj))
 *             any_set = True             # <<<<<<<<<<<<<<
 *         # in C++ you don't have to call move(), but this doesn't translate
 *         # into a C++ return statement, so you do here
 */
    __pyx_v_any_set = 1;

    /* "picard/types.pyx":1389
 *             deref(c_inst).set_feedPartialSuccess(deref((<FeedPartialSuccess?> feedPartialSuccess)._cpp_obj))
 *             any_set = True
 *         if feedCompleteSuccess is not None:             # <<<<<<<<<<<<<<
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")
 */
  }

  /* "picard/types.pyx":1396
 *         # in C++ you don't have to call move(), but this doesn't translate
 *         # into a C++ return statement, so you do here
 *         return cmove(c_inst)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = cython_std::move<std::unique_ptr<::cpp2::FeedResult> >(__pyx_v_c_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1365
 * 
 *     @staticmethod
 *     cdef unique_ptr[cFeedResult] _make_instance(             # <<<<<<<<<<<<<<
 *         cFeedResult* base_instance,
 *         FeedParseFailure feedParseFailure,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedResult._make_instance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1399
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedResult] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedResult>FeedResult.__new__(FeedResult)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

static PyObject *__pyx_f_6picard_5types_10FeedResult_create(std::shared_ptr<::cpp2::FeedResult>  __pyx_v_cpp_obj) {
  struct __pyx_obj_6picard_5types_FeedResult *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":1400
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedResult] cpp_obj):
 *         __fbthrift_inst = <FeedResult>FeedResult.__new__(FeedResult)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         __fbthrift_inst._load_cache()
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_FeedResult(((PyTypeObject *)__pyx_ptype_6picard_5types_FeedResult), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1400, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_FeedResult *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1401
 *     cdef create(shared_ptr[cFeedResult] cpp_obj):
 *         __fbthrift_inst = <FeedResult>FeedResult.__new__(FeedResult)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._load_cache()
 *         return __fbthrift_inst
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<::cpp2::FeedResult> >(__pyx_v_cpp_obj);

  /* "picard/types.pyx":1402
 *         __fbthrift_inst = <FeedResult>FeedResult.__new__(FeedResult)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         __fbthrift_inst._load_cache()             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_6picard_5types_FeedResult *)__pyx_v___fbthrift_inst->__pyx_base.__pyx_base.__pyx_vtab)->_load_cache(__pyx_v___fbthrift_inst); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":1403
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         __fbthrift_inst._load_cache()
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1399
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cFeedResult] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <FeedResult>FeedResult.__new__(FeedResult)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedResult.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1406
 * 
 *     @property
 *     def feedParseFailure(self):             # <<<<<<<<<<<<<<
 *         if self.type.value != 1:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedParseFailure')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10FeedResult_16feedParseFailure_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_10FeedResult_16feedParseFailure_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult_16feedParseFailure___get__(((struct __pyx_obj_6picard_5types_FeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10FeedResult_16feedParseFailure___get__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":1407
 *     @property
 *     def feedParseFailure(self):
 *         if self.type.value != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedParseFailure')
 *         return self.value
 */
  __pyx_t_1 = ((__pyx_v_self->type->__pyx_base.value != 1) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "picard/types.pyx":1408
 *     def feedParseFailure(self):
 *         if self.type.value != 1:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedParseFailure')             # <<<<<<<<<<<<<<
 *         return self.value
 * 
 */
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Union_contains_a_value_of_type);
    __pyx_t_3 += 31;
    __Pyx_GIVEREF(__pyx_kp_u_Union_contains_a_value_of_type);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Union_contains_a_value_of_type);
    __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_self->type->__pyx_base.name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_4;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_not_feedParseFailure);
    __pyx_t_3 += 22;
    __Pyx_GIVEREF(__pyx_kp_u_not_feedParseFailure);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_not_feedParseFailure);
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1408, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1408, __pyx_L1_error)

    /* "picard/types.pyx":1407
 *     @property
 *     def feedParseFailure(self):
 *         if self.type.value != 1:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedParseFailure')
 *         return self.value
 */
  }

  /* "picard/types.pyx":1409
 *         if self.type.value != 1:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedParseFailure')
 *         return self.value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->value);
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* "picard/types.pyx":1406
 * 
 *     @property
 *     def feedParseFailure(self):             # <<<<<<<<<<<<<<
 *         if self.type.value != 1:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedParseFailure')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.FeedResult.feedParseFailure.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1412
 * 
 *     @property
 *     def feedTimeoutFailure(self):             # <<<<<<<<<<<<<<
 *         if self.type.value != 2:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedTimeoutFailure')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10FeedResult_18feedTimeoutFailure_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_10FeedResult_18feedTimeoutFailure_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult_18feedTimeoutFailure___get__(((struct __pyx_obj_6picard_5types_FeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10FeedResult_18feedTimeoutFailure___get__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":1413
 *     @property
 *     def feedTimeoutFailure(self):
 *         if self.type.value != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedTimeoutFailure')
 *         return self.value
 */
  __pyx_t_1 = ((__pyx_v_self->type->__pyx_base.value != 2) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "picard/types.pyx":1414
 *     def feedTimeoutFailure(self):
 *         if self.type.value != 2:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedTimeoutFailure')             # <<<<<<<<<<<<<<
 *         return self.value
 * 
 */
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Union_contains_a_value_of_type);
    __pyx_t_3 += 31;
    __Pyx_GIVEREF(__pyx_kp_u_Union_contains_a_value_of_type);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Union_contains_a_value_of_type);
    __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_self->type->__pyx_base.name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_4;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_not_feedTimeoutFailure);
    __pyx_t_3 += 24;
    __Pyx_GIVEREF(__pyx_kp_u_not_feedTimeoutFailure);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_not_feedTimeoutFailure);
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1414, __pyx_L1_error)

    /* "picard/types.pyx":1413
 *     @property
 *     def feedTimeoutFailure(self):
 *         if self.type.value != 2:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedTimeoutFailure')
 *         return self.value
 */
  }

  /* "picard/types.pyx":1415
 *         if self.type.value != 2:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedTimeoutFailure')
 *         return self.value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->value);
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* "picard/types.pyx":1412
 * 
 *     @property
 *     def feedTimeoutFailure(self):             # <<<<<<<<<<<<<<
 *         if self.type.value != 2:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedTimeoutFailure')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.FeedResult.feedTimeoutFailure.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1418
 * 
 *     @property
 *     def feedPartialSuccess(self):             # <<<<<<<<<<<<<<
 *         if self.type.value != 3:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedPartialSuccess')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10FeedResult_18feedPartialSuccess_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_10FeedResult_18feedPartialSuccess_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult_18feedPartialSuccess___get__(((struct __pyx_obj_6picard_5types_FeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10FeedResult_18feedPartialSuccess___get__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":1419
 *     @property
 *     def feedPartialSuccess(self):
 *         if self.type.value != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedPartialSuccess')
 *         return self.value
 */
  __pyx_t_1 = ((__pyx_v_self->type->__pyx_base.value != 3) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "picard/types.pyx":1420
 *     def feedPartialSuccess(self):
 *         if self.type.value != 3:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedPartialSuccess')             # <<<<<<<<<<<<<<
 *         return self.value
 * 
 */
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Union_contains_a_value_of_type);
    __pyx_t_3 += 31;
    __Pyx_GIVEREF(__pyx_kp_u_Union_contains_a_value_of_type);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Union_contains_a_value_of_type);
    __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_self->type->__pyx_base.name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_4;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_not_feedPartialSuccess);
    __pyx_t_3 += 24;
    __Pyx_GIVEREF(__pyx_kp_u_not_feedPartialSuccess);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_not_feedPartialSuccess);
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1420, __pyx_L1_error)

    /* "picard/types.pyx":1419
 *     @property
 *     def feedPartialSuccess(self):
 *         if self.type.value != 3:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedPartialSuccess')
 *         return self.value
 */
  }

  /* "picard/types.pyx":1421
 *         if self.type.value != 3:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedPartialSuccess')
 *         return self.value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->value);
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* "picard/types.pyx":1418
 * 
 *     @property
 *     def feedPartialSuccess(self):             # <<<<<<<<<<<<<<
 *         if self.type.value != 3:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedPartialSuccess')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.FeedResult.feedPartialSuccess.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1424
 * 
 *     @property
 *     def feedCompleteSuccess(self):             # <<<<<<<<<<<<<<
 *         if self.type.value != 4:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedCompleteSuccess')
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10FeedResult_19feedCompleteSuccess_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_10FeedResult_19feedCompleteSuccess_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult_19feedCompleteSuccess___get__(((struct __pyx_obj_6picard_5types_FeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10FeedResult_19feedCompleteSuccess___get__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":1425
 *     @property
 *     def feedCompleteSuccess(self):
 *         if self.type.value != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedCompleteSuccess')
 *         return self.value
 */
  __pyx_t_1 = ((__pyx_v_self->type->__pyx_base.value != 4) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "picard/types.pyx":1426
 *     def feedCompleteSuccess(self):
 *         if self.type.value != 4:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedCompleteSuccess')             # <<<<<<<<<<<<<<
 *         return self.value
 * 
 */
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Union_contains_a_value_of_type);
    __pyx_t_3 += 31;
    __Pyx_GIVEREF(__pyx_kp_u_Union_contains_a_value_of_type);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Union_contains_a_value_of_type);
    __pyx_t_5 = __Pyx_PyUnicode_Unicode(__pyx_v_self->type->__pyx_base.name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_4) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_4;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_not_feedCompleteSuccess);
    __pyx_t_3 += 25;
    __Pyx_GIVEREF(__pyx_kp_u_not_feedCompleteSuccess);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u_not_feedCompleteSuccess);
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 3, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 1426, __pyx_L1_error)

    /* "picard/types.pyx":1425
 *     @property
 *     def feedCompleteSuccess(self):
 *         if self.type.value != 4:             # <<<<<<<<<<<<<<
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedCompleteSuccess')
 *         return self.value
 */
  }

  /* "picard/types.pyx":1427
 *         if self.type.value != 4:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedCompleteSuccess')
 *         return self.value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->value);
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* "picard/types.pyx":1424
 * 
 *     @property
 *     def feedCompleteSuccess(self):             # <<<<<<<<<<<<<<
 *         if self.type.value != 4:
 *             raise TypeError(f'Union contains a value of type {self.type.name}, not feedCompleteSuccess')
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.FeedResult.feedCompleteSuccess.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1430
 * 
 * 
 *     def __hash__(FeedResult self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6picard_5types_10FeedResult_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6picard_5types_10FeedResult_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult_4__hash__(((struct __pyx_obj_6picard_5types_FeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6picard_5types_10FeedResult_4__hash__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "picard/types.pyx":1431
 * 
 *     def __hash__(FeedResult self):
 *         return  super().__hash__()             # <<<<<<<<<<<<<<
 * 
 *     cdef _load_cache(FeedResult self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_FeedResult));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_FeedResult));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_FeedResult));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "picard/types.pyx":1430
 * 
 * 
 *     def __hash__(FeedResult self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedResult.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1433
 *         return  super().__hash__()
 * 
 *     cdef _load_cache(FeedResult self):             # <<<<<<<<<<<<<<
 *         self.type = FeedResult.Type(<int>(deref(self._cpp_obj).getType()))
 *         cdef int type = self.type.value
 */

static PyObject *__pyx_f_6picard_5types_10FeedResult__load_cache(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self) {
  int __pyx_v_type;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  std::shared_ptr<::cpp2::FeedParseFailure>  __pyx_t_6;
  std::shared_ptr<::cpp2::FeedTimeoutFailure>  __pyx_t_7;
  std::shared_ptr<::cpp2::FeedPartialSuccess>  __pyx_t_8;
  std::shared_ptr<::cpp2::FeedCompleteSuccess>  __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_load_cache", 0);

  /* "picard/types.pyx":1434
 * 
 *     cdef _load_cache(FeedResult self):
 *         self.type = FeedResult.Type(<int>(deref(self._cpp_obj).getType()))             # <<<<<<<<<<<<<<
 *         cdef int type = self.type.value
 *         if type == 0:    # Empty
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6picard_5types_FeedResult), __pyx_n_s_Type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(((int)(*__pyx_v_self->_cpp_obj).getType())); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6picard_5types___FeedResultType))))) __PYX_ERR(0, 1434, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->type);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->type));
  __pyx_v_self->type = ((struct __pyx_obj_6picard_5types___FeedResultType *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1435
 *     cdef _load_cache(FeedResult self):
 *         self.type = FeedResult.Type(<int>(deref(self._cpp_obj).getType()))
 *         cdef int type = self.type.value             # <<<<<<<<<<<<<<
 *         if type == 0:    # Empty
 *             self.value = None
 */
  __pyx_t_5 = __pyx_v_self->type->__pyx_base.value;
  __pyx_v_type = __pyx_t_5;

  /* "picard/types.pyx":1436
 *         self.type = FeedResult.Type(<int>(deref(self._cpp_obj).getType()))
 *         cdef int type = self.type.value
 *         if type == 0:    # Empty             # <<<<<<<<<<<<<<
 *             self.value = None
 *         elif type == 1:
 */
  switch (__pyx_v_type) {
    case 0:

    /* "picard/types.pyx":1437
 *         cdef int type = self.type.value
 *         if type == 0:    # Empty
 *             self.value = None             # <<<<<<<<<<<<<<
 *         elif type == 1:
 *             self.value = FeedParseFailure.create(make_shared[cFeedParseFailure](deref(self._cpp_obj).get_feedParseFailure()))
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_self->value);
    __Pyx_DECREF(__pyx_v_self->value);
    __pyx_v_self->value = Py_None;

    /* "picard/types.pyx":1436
 *         self.type = FeedResult.Type(<int>(deref(self._cpp_obj).getType()))
 *         cdef int type = self.type.value
 *         if type == 0:    # Empty             # <<<<<<<<<<<<<<
 *             self.value = None
 *         elif type == 1:
 */
    break;
    case 1:

    /* "picard/types.pyx":1439
 *             self.value = None
 *         elif type == 1:
 *             self.value = FeedParseFailure.create(make_shared[cFeedParseFailure](deref(self._cpp_obj).get_feedParseFailure()))             # <<<<<<<<<<<<<<
 *         elif type == 2:
 *             self.value = FeedTimeoutFailure.create(make_shared[cFeedTimeoutFailure](deref(self._cpp_obj).get_feedTimeoutFailure()))
 */
    try {
      __pyx_t_6 = std::make_shared<::cpp2::FeedParseFailure>((*__pyx_v_self->_cpp_obj).get_feedParseFailure());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1439, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_f_6picard_5types_16FeedParseFailure_create(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->value);
    __Pyx_DECREF(__pyx_v_self->value);
    __pyx_v_self->value = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "picard/types.pyx":1438
 *         if type == 0:    # Empty
 *             self.value = None
 *         elif type == 1:             # <<<<<<<<<<<<<<
 *             self.value = FeedParseFailure.create(make_shared[cFeedParseFailure](deref(self._cpp_obj).get_feedParseFailure()))
 *         elif type == 2:
 */
    break;
    case 2:

    /* "picard/types.pyx":1441
 *             self.value = FeedParseFailure.create(make_shared[cFeedParseFailure](deref(self._cpp_obj).get_feedParseFailure()))
 *         elif type == 2:
 *             self.value = FeedTimeoutFailure.create(make_shared[cFeedTimeoutFailure](deref(self._cpp_obj).get_feedTimeoutFailure()))             # <<<<<<<<<<<<<<
 *         elif type == 3:
 *             self.value = FeedPartialSuccess.create(make_shared[cFeedPartialSuccess](deref(self._cpp_obj).get_feedPartialSuccess()))
 */
    try {
      __pyx_t_7 = std::make_shared<::cpp2::FeedTimeoutFailure>((*__pyx_v_self->_cpp_obj).get_feedTimeoutFailure());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1441, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_f_6picard_5types_18FeedTimeoutFailure_create(__pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->value);
    __Pyx_DECREF(__pyx_v_self->value);
    __pyx_v_self->value = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "picard/types.pyx":1440
 *         elif type == 1:
 *             self.value = FeedParseFailure.create(make_shared[cFeedParseFailure](deref(self._cpp_obj).get_feedParseFailure()))
 *         elif type == 2:             # <<<<<<<<<<<<<<
 *             self.value = FeedTimeoutFailure.create(make_shared[cFeedTimeoutFailure](deref(self._cpp_obj).get_feedTimeoutFailure()))
 *         elif type == 3:
 */
    break;
    case 3:

    /* "picard/types.pyx":1443
 *             self.value = FeedTimeoutFailure.create(make_shared[cFeedTimeoutFailure](deref(self._cpp_obj).get_feedTimeoutFailure()))
 *         elif type == 3:
 *             self.value = FeedPartialSuccess.create(make_shared[cFeedPartialSuccess](deref(self._cpp_obj).get_feedPartialSuccess()))             # <<<<<<<<<<<<<<
 *         elif type == 4:
 *             self.value = FeedCompleteSuccess.create(make_shared[cFeedCompleteSuccess](deref(self._cpp_obj).get_feedCompleteSuccess()))
 */
    try {
      __pyx_t_8 = std::make_shared<::cpp2::FeedPartialSuccess>((*__pyx_v_self->_cpp_obj).get_feedPartialSuccess());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1443, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_f_6picard_5types_18FeedPartialSuccess_create(__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->value);
    __Pyx_DECREF(__pyx_v_self->value);
    __pyx_v_self->value = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "picard/types.pyx":1442
 *         elif type == 2:
 *             self.value = FeedTimeoutFailure.create(make_shared[cFeedTimeoutFailure](deref(self._cpp_obj).get_feedTimeoutFailure()))
 *         elif type == 3:             # <<<<<<<<<<<<<<
 *             self.value = FeedPartialSuccess.create(make_shared[cFeedPartialSuccess](deref(self._cpp_obj).get_feedPartialSuccess()))
 *         elif type == 4:
 */
    break;
    case 4:

    /* "picard/types.pyx":1445
 *             self.value = FeedPartialSuccess.create(make_shared[cFeedPartialSuccess](deref(self._cpp_obj).get_feedPartialSuccess()))
 *         elif type == 4:
 *             self.value = FeedCompleteSuccess.create(make_shared[cFeedCompleteSuccess](deref(self._cpp_obj).get_feedCompleteSuccess()))             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(FeedResult self):
 */
    try {
      __pyx_t_9 = std::make_shared<::cpp2::FeedCompleteSuccess>((*__pyx_v_self->_cpp_obj).get_feedCompleteSuccess());
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1445, __pyx_L1_error)
    }
    __pyx_t_1 = __pyx_f_6picard_5types_19FeedCompleteSuccess_create(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_v_self->value);
    __Pyx_DECREF(__pyx_v_self->value);
    __pyx_v_self->value = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "picard/types.pyx":1444
 *         elif type == 3:
 *             self.value = FeedPartialSuccess.create(make_shared[cFeedPartialSuccess](deref(self._cpp_obj).get_feedPartialSuccess()))
 *         elif type == 4:             # <<<<<<<<<<<<<<
 *             self.value = FeedCompleteSuccess.create(make_shared[cFeedCompleteSuccess](deref(self._cpp_obj).get_feedCompleteSuccess()))
 * 
 */
    break;
    default: break;
  }

  /* "picard/types.pyx":1433
 *         return  super().__hash__()
 * 
 *     cdef _load_cache(FeedResult self):             # <<<<<<<<<<<<<<
 *         self.type = FeedResult.Type(<int>(deref(self._cpp_obj).getType()))
 *         cdef int type = self.type.value
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.FeedResult._load_cache", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1447
 *             self.value = FeedCompleteSuccess.create(make_shared[cFeedCompleteSuccess](deref(self._cpp_obj).get_feedCompleteSuccess()))
 * 
 *     def __copy__(FeedResult self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cFeedResult] cpp_obj = make_shared[cFeedResult](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10FeedResult_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_10FeedResult_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult_6__copy__(((struct __pyx_obj_6picard_5types_FeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10FeedResult_6__copy__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self) {
  std::shared_ptr<::cpp2::FeedResult>  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedResult>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":1448
 * 
 *     def __copy__(FeedResult self):
 *         cdef shared_ptr[cFeedResult] cpp_obj = make_shared[cFeedResult](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedResult>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1448, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1451
 *             deref(self._cpp_obj)
 *         )
 *         return FeedResult.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_10FeedResult_create(cython_std::move<std::shared_ptr<::cpp2::FeedResult> >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1447
 *             self.value = FeedCompleteSuccess.create(make_shared[cFeedCompleteSuccess](deref(self._cpp_obj).get_feedCompleteSuccess()))
 * 
 *     def __copy__(FeedResult self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cFeedResult] cpp_obj = make_shared[cFeedResult](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedResult.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1453
 *         return FeedResult.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedResult](
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10FeedResult_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6picard_5types_10FeedResult_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult_8__richcmp__(((struct __pyx_obj_6picard_5types_FeedResult *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10FeedResult_8__richcmp__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "picard/types.pyx":1454
 * 
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)             # <<<<<<<<<<<<<<
 *         return __richcmp[cFeedResult](
 *             self._cpp_obj,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_FeedResult *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base._fbthrift_cmp_sametype(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1455
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedResult](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<FeedResult>other)._cpp_obj,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":1459
 *             (<FeedResult>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = (__pyx_v_r == Py_None);
  if ((__pyx_t_2 != 0)) {

    /* "picard/types.pyx":1455
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedResult](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<FeedResult>other)._cpp_obj,
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(::thrift::py3::richcmp<::cpp2::FeedResult>(__pyx_v_self->_cpp_obj, ((struct __pyx_obj_6picard_5types_FeedResult *)__pyx_v_other)->_cpp_obj, __pyx_v_op)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "picard/types.pyx":1459
 *             (<FeedResult>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_1 = __pyx_v_r;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1453
 *         return FeedResult.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cFeedResult](
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedResult.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1462
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedResult()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10FeedResult_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_10FeedResult_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_10FeedResult_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_10FeedResult_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10FeedResult_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":1463
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__FeedResult()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__FeedResult()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1462
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedResult()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedResult.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1466
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedResult].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10FeedResult_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_10FeedResult_13__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_10FeedResult_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_10FeedResult_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult_12__get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10FeedResult_12__get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":1468
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedResult].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::StructMetadata<::cpp2::FeedResult> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":1469
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedResult].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1466
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedResult].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.FeedResult.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1472
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedResult"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10FeedResult_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_10FeedResult_15__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_10FeedResult_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_10FeedResult_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult_14__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10FeedResult_14__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":1473
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.FeedResult"             # <<<<<<<<<<<<<<
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_FeedResult);
  __pyx_r = __pyx_kp_u_picard_FeedResult;
  goto __pyx_L0;

  /* "picard/types.pyx":1472
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedResult"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1475
 *         return "picard.FeedResult"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cFeedResult](idx)
 * 
 */

static std::string_view __pyx_f_6picard_5types_10FeedResult__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self, size_t __pyx_v_idx) {
  std::string_view __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string_view __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_field_name_by_index", 0);

  /* "picard/types.pyx":1476
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 *         return __get_field_name_by_index[cFeedResult](idx)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  try {
    __pyx_t_1 = ::thrift::py3::get_field_name_by_index<::cpp2::FeedResult>(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1476, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "picard/types.pyx":1475
 *         return "picard.FeedResult"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cFeedResult](idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("picard.types.FeedResult._fbthrift_get_field_name_by_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1478
 *         return __get_field_name_by_index[cFeedResult](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 4
 * 
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_10FeedResult_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_10FeedResult_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult_16__cinit__(((struct __pyx_obj_6picard_5types_FeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_10FeedResult_16__cinit__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "picard/types.pyx":1479
 * 
 *     def __cinit__(self):
 *         self._fbthrift_struct_size = 4             # <<<<<<<<<<<<<<
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedResult self, __Protocol proto):
 */
  __pyx_v_self->__pyx_base.__pyx_base._fbthrift_struct_size = 4;

  /* "picard/types.pyx":1478
 *         return __get_field_name_by_index[cFeedResult](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 4
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1481
 *         self._fbthrift_struct_size = 4
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedResult self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_10FeedResult__serialize(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  std::unique_ptr<folly::IOBuf>  __pyx_v_data;
  struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::unique_ptr<folly::IOBuf>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_serialize", 0);

  /* "picard/types.pyx":1483
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedResult self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cFeedResult](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":1484
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 *             data = cmove(serializer.cserialize[cFeedResult](self._cpp_obj.get(), proto))             # <<<<<<<<<<<<<<
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 */
        try {
          __pyx_t_1 = ::thrift::py3::serialize<::cpp2::FeedResult>(__pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1484, __pyx_L4_error)
        }
        __pyx_v_data = cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_t_1);
      }

      /* "picard/types.pyx":1483
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedResult self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cFeedResult](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":1485
 *         with nogil:
 *             data = cmove(serializer.cserialize[cFeedResult](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))             # <<<<<<<<<<<<<<
 * 
 *     cdef cuint32_t _deserialize(FeedResult self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = ((PyObject *)__pyx_f_5folly_5iobuf_from_unique_ptr(cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_v_data))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_5folly_5iobuf_IOBuf *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1481
 *         self._fbthrift_struct_size = 4
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(FeedResult self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.FeedResult._serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1487
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(FeedResult self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedResult]()
 */

static uint32_t __pyx_f_6picard_5types_10FeedResult__deserialize(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  uint32_t __pyx_v_needed;
  uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::FeedResult>  __pyx_t_1;
  uint32_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_deserialize", 0);

  /* "picard/types.pyx":1489
 *     cdef cuint32_t _deserialize(FeedResult self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedResult]()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedResult](buf, self._cpp_obj.get(), proto)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::FeedResult>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1489, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1490
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedResult]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cFeedResult](buf, self._cpp_obj.get(), proto)
 *         # force a cache reload since the underlying data's changed
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":1491
 *         self._cpp_obj = make_shared[cFeedResult]()
 *         with nogil:
 *             needed = serializer.cdeserialize[cFeedResult](buf, self._cpp_obj.get(), proto)             # <<<<<<<<<<<<<<
 *         # force a cache reload since the underlying data's changed
 *         self._load_cache()
 */
        try {
          __pyx_t_2 = ::thrift::py3::deserialize<::cpp2::FeedResult>(__pyx_v_buf, __pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1491, __pyx_L4_error)
        }
        __pyx_v_needed = __pyx_t_2;
      }

      /* "picard/types.pyx":1490
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedResult]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cFeedResult](buf, self._cpp_obj.get(), proto)
 *         # force a cache reload since the underlying data's changed
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":1493
 *             needed = serializer.cdeserialize[cFeedResult](buf, self._cpp_obj.get(), proto)
 *         # force a cache reload since the underlying data's changed
 *         self._load_cache()             # <<<<<<<<<<<<<<
 *         return needed
 * 
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_6picard_5types_FeedResult *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->_load_cache(__pyx_v_self); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "picard/types.pyx":1494
 *         # force a cache reload since the underlying data's changed
 *         self._load_cache()
 *         return needed             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_needed;
  goto __pyx_L0;

  /* "picard/types.pyx":1487
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(FeedResult self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cFeedResult]()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.FeedResult._deserialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pxd":444
 * cdef class FeedResult(thrift.py3.types.Union):
 *     cdef shared_ptr[cFeedResult] _cpp_obj
 *     cdef readonly __FeedResultType type             # <<<<<<<<<<<<<<
 *     cdef readonly object value
 *     cdef _load_cache(FeedResult self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10FeedResult_4type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_10FeedResult_4type_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult_4type___get__(((struct __pyx_obj_6picard_5types_FeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10FeedResult_4type___get__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->type));
  __pyx_r = ((PyObject *)__pyx_v_self->type);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pxd":445
 *     cdef shared_ptr[cFeedResult] _cpp_obj
 *     cdef readonly __FeedResultType type
 *     cdef readonly object value             # <<<<<<<<<<<<<<
 *     cdef _load_cache(FeedResult self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_10FeedResult_5value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_10FeedResult_5value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_10FeedResult_5value___get__(((struct __pyx_obj_6picard_5types_FeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_10FeedResult_5value___get__(struct __pyx_obj_6picard_5types_FeedResult *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->value);
  __pyx_r = __pyx_v_self->value;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1499
 * @__cython.auto_pickle(False)
 * cdef class BatchFeedResult(thrift.py3.types.Struct):
 *     def __init__(BatchFeedResult self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cBatchFeedResult]()
 *         self._fields_setter = _fbthrift_types_fields.__BatchFeedResult_FieldsSetter.create(self._cpp_obj.get())
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_15BatchFeedResult_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_15BatchFeedResult_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 1))) return -1;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return -1;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_15BatchFeedResult___init__(((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_15BatchFeedResult___init__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::BatchFeedResult>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":1500
 * cdef class BatchFeedResult(thrift.py3.types.Struct):
 *     def __init__(BatchFeedResult self, **kwargs):
 *         self._cpp_obj = make_shared[cBatchFeedResult]()             # <<<<<<<<<<<<<<
 *         self._fields_setter = _fbthrift_types_fields.__BatchFeedResult_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::BatchFeedResult>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1500, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1501
 *     def __init__(BatchFeedResult self, **kwargs):
 *         self._cpp_obj = make_shared[cBatchFeedResult]()
 *         self._fields_setter = _fbthrift_types_fields.__BatchFeedResult_FieldsSetter.create(self._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         super().__init__(**kwargs)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___BatchFeedResult_FieldsSetter->create(__pyx_v_self->_cpp_obj.get())); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_fields_setter));
  __pyx_v_self->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___BatchFeedResult_FieldsSetter *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1502
 *         self._cpp_obj = make_shared[cBatchFeedResult]()
 *         self._fields_setter = _fbthrift_types_fields.__BatchFeedResult_FieldsSetter.create(self._cpp_obj.get())
 *         super().__init__(**kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def __call__(BatchFeedResult self, **kwargs):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":1499
 * @__cython.auto_pickle(False)
 * cdef class BatchFeedResult(thrift.py3.types.Struct):
 *     def __init__(BatchFeedResult self, **kwargs):             # <<<<<<<<<<<<<<
 *         self._cpp_obj = make_shared[cBatchFeedResult]()
 *         self._fields_setter = _fbthrift_types_fields.__BatchFeedResult_FieldsSetter.create(self._cpp_obj.get())
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("picard.types.BatchFeedResult.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1504
 *         super().__init__(**kwargs)
 * 
 *     def __call__(BatchFeedResult self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_3__call__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_kwargs = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__call__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__call__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (__pyx_kwds && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__call__", 1))) return NULL;
  __pyx_v_kwargs = (__pyx_kwds) ? PyDict_Copy(__pyx_kwds) : PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  __pyx_r = __pyx_pf_6picard_5types_15BatchFeedResult_2__call__(((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_v_self), __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_2__call__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_kwargs) {
  struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v___fbthrift_inst = 0;
  PyObject *__pyx_v___fbthrift_name = NULL;
  PyObject *__pyx_v__fbthrift_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  std::shared_ptr<::cpp2::BatchFeedResult>  __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__call__", 0);

  /* "picard/types.pyx":1505
 * 
 *     def __call__(BatchFeedResult self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef BatchFeedResult __fbthrift_inst = BatchFeedResult.__new__(BatchFeedResult)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_kwargs); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1505, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1506
 *     def __call__(BatchFeedResult self, **kwargs):
 *         if not kwargs:
 *             return self             # <<<<<<<<<<<<<<
 *         cdef BatchFeedResult __fbthrift_inst = BatchFeedResult.__new__(BatchFeedResult)
 *         __fbthrift_inst._cpp_obj = make_shared[cBatchFeedResult](deref(self._cpp_obj))
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "picard/types.pyx":1505
 * 
 *     def __call__(BatchFeedResult self, **kwargs):
 *         if not kwargs:             # <<<<<<<<<<<<<<
 *             return self
 *         cdef BatchFeedResult __fbthrift_inst = BatchFeedResult.__new__(BatchFeedResult)
 */
  }

  /* "picard/types.pyx":1507
 *         if not kwargs:
 *             return self
 *         cdef BatchFeedResult __fbthrift_inst = BatchFeedResult.__new__(BatchFeedResult)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = make_shared[cBatchFeedResult](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__BatchFeedResult_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 */
  __pyx_t_3 = ((PyObject *)__pyx_tp_new_6picard_5types_BatchFeedResult(((PyTypeObject *)__pyx_ptype_6picard_5types_BatchFeedResult), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1507, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":1508
 *             return self
 *         cdef BatchFeedResult __fbthrift_inst = BatchFeedResult.__new__(BatchFeedResult)
 *         __fbthrift_inst._cpp_obj = make_shared[cBatchFeedResult](deref(self._cpp_obj))             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__BatchFeedResult_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 */
  try {
    __pyx_t_4 = std::make_shared<::cpp2::BatchFeedResult>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1508, __pyx_L1_error)
  }
  __pyx_v___fbthrift_inst->_cpp_obj = __pyx_t_4;

  /* "picard/types.pyx":1509
 *         cdef BatchFeedResult __fbthrift_inst = BatchFeedResult.__new__(BatchFeedResult)
 *         __fbthrift_inst._cpp_obj = make_shared[cBatchFeedResult](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__BatchFeedResult_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())             # <<<<<<<<<<<<<<
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 */
  __pyx_t_3 = ((PyObject *)__pyx_vtabptr_6picard_12types_fields___BatchFeedResult_FieldsSetter->create(__pyx_v___fbthrift_inst->_cpp_obj.get())); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v___fbthrift_inst->_fields_setter);
  __Pyx_DECREF(((PyObject *)__pyx_v___fbthrift_inst->_fields_setter));
  __pyx_v___fbthrift_inst->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___BatchFeedResult_FieldsSetter *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "picard/types.pyx":1510
 *         __fbthrift_inst._cpp_obj = make_shared[cBatchFeedResult](deref(self._cpp_obj))
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__BatchFeedResult_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():             # <<<<<<<<<<<<<<
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst
 */
  __pyx_t_5 = 0;
  __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_kwargs, 1, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_8;
  __pyx_t_8 = 0;
  while (1) {
    __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_3, __pyx_t_6, &__pyx_t_5, &__pyx_t_8, &__pyx_t_9, NULL, __pyx_t_7);
    if (unlikely(__pyx_t_10 == 0)) break;
    if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 1510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_XDECREF_SET(__pyx_v___fbthrift_name, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v__fbthrift_value, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "picard/types.pyx":1511
 *         __fbthrift_inst._fields_setter = _fbthrift_types_fields.__BatchFeedResult_FieldsSetter.create(__fbthrift_inst._cpp_obj.get())
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
    if (!(likely(PyUnicode_CheckExact(__pyx_v___fbthrift_name))||((__pyx_v___fbthrift_name) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_v___fbthrift_name)->tp_name), 0))) __PYX_ERR(0, 1511, __pyx_L1_error)
    ((struct __pyx_vtabstruct_6picard_5types_BatchFeedResult *)__pyx_v___fbthrift_inst->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_set_field(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v___fbthrift_inst), ((PyObject*)__pyx_v___fbthrift_name), __pyx_v__fbthrift_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1511, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "picard/types.pyx":1512
 *         for __fbthrift_name, _fbthrift_value in kwargs.items():
 *             __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1504
 *         super().__init__(**kwargs)
 * 
 *     def __call__(BatchFeedResult self, **kwargs):             # <<<<<<<<<<<<<<
 *         if not kwargs:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("picard.types.BatchFeedResult.__call__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XDECREF(__pyx_v___fbthrift_name);
  __Pyx_XDECREF(__pyx_v__fbthrift_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1514
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

static void __pyx_f_6picard_5types_15BatchFeedResult__fbthrift_set_field(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_name, PyObject *__pyx_v_value) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_set_field", 0);

  /* "picard/types.pyx":1515
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:
 *         self._fields_setter.set_field(name.encode("utf-8"), value)             # <<<<<<<<<<<<<<
 * 
 *     cdef object _fbthrift_isset(self):
 */
  if (unlikely(__pyx_v_name == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 1515, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_t_1); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 1515, __pyx_L1_error)
  ((struct __pyx_vtabstruct_6picard_12types_fields___BatchFeedResult_FieldsSetter *)__pyx_v_self->_fields_setter->__pyx_base.__pyx_vtab)->__pyx_base.set_field(((struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter *)__pyx_v_self->_fields_setter), __pyx_t_2, __pyx_v_value); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":1514
 *         return __fbthrift_inst
 * 
 *     cdef void _fbthrift_set_field(self, str name, object value) except *:             # <<<<<<<<<<<<<<
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.BatchFeedResult._fbthrift_set_field", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "picard/types.pyx":1517
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("BatchFeedResult", {
 *           "batchId": deref(self._cpp_obj).batchId_ref().has_value(),
 */

static PyObject *__pyx_f_6picard_5types_15BatchFeedResult__fbthrift_isset(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_isset", 0);

  /* "picard/types.pyx":1518
 * 
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("BatchFeedResult", {             # <<<<<<<<<<<<<<
 *           "batchId": deref(self._cpp_obj).batchId_ref().has_value(),
 *           "topToken": deref(self._cpp_obj).topToken_ref().has_value(),
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_thrift); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_py3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_IsSet); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":1519
 *     cdef object _fbthrift_isset(self):
 *         return thrift.py3.types._IsSet("BatchFeedResult", {
 *           "batchId": deref(self._cpp_obj).batchId_ref().has_value(),             # <<<<<<<<<<<<<<
 *           "topToken": deref(self._cpp_obj).topToken_ref().has_value(),
 *           "feedResult": deref(self._cpp_obj).feedResult_ref().has_value(),
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).batchId_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_batchId, __pyx_t_4) < 0) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":1520
 *         return thrift.py3.types._IsSet("BatchFeedResult", {
 *           "batchId": deref(self._cpp_obj).batchId_ref().has_value(),
 *           "topToken": deref(self._cpp_obj).topToken_ref().has_value(),             # <<<<<<<<<<<<<<
 *           "feedResult": deref(self._cpp_obj).feedResult_ref().has_value(),
 *         })
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).topToken_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_topToken, __pyx_t_4) < 0) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "picard/types.pyx":1521
 *           "batchId": deref(self._cpp_obj).batchId_ref().has_value(),
 *           "topToken": deref(self._cpp_obj).topToken_ref().has_value(),
 *           "feedResult": deref(self._cpp_obj).feedResult_ref().has_value(),             # <<<<<<<<<<<<<<
 *         })
 * 
 */
  __pyx_t_4 = __Pyx_PyBool_FromLong((*__pyx_v_self->_cpp_obj).feedResult_ref().has_value()); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_feedResult, __pyx_t_4) < 0) __PYX_ERR(0, 1519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_BatchFeedResult, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_n_u_BatchFeedResult, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_5, 2+__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else
  #endif
  {
    __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_n_u_BatchFeedResult);
    __Pyx_GIVEREF(__pyx_n_u_BatchFeedResult);
    PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_n_u_BatchFeedResult);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1517
 *         self._fields_setter.set_field(name.encode("utf-8"), value)
 * 
 *     cdef object _fbthrift_isset(self):             # <<<<<<<<<<<<<<
 *         return thrift.py3.types._IsSet("BatchFeedResult", {
 *           "batchId": deref(self._cpp_obj).batchId_ref().has_value(),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.BatchFeedResult._fbthrift_isset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1525
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cBatchFeedResult] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <BatchFeedResult>BatchFeedResult.__new__(BatchFeedResult)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

static PyObject *__pyx_f_6picard_5types_15BatchFeedResult_create(std::shared_ptr<::cpp2::BatchFeedResult>  __pyx_v_cpp_obj) {
  struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":1526
 *     @staticmethod
 *     cdef create(shared_ptr[cBatchFeedResult] cpp_obj):
 *         __fbthrift_inst = <BatchFeedResult>BatchFeedResult.__new__(BatchFeedResult)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_BatchFeedResult(((PyTypeObject *)__pyx_ptype_6picard_5types_BatchFeedResult), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1526, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1527
 *     cdef create(shared_ptr[cBatchFeedResult] cpp_obj):
 *         __fbthrift_inst = <BatchFeedResult>BatchFeedResult.__new__(BatchFeedResult)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<::cpp2::BatchFeedResult> >(__pyx_v_cpp_obj);

  /* "picard/types.pyx":1528
 *         __fbthrift_inst = <BatchFeedResult>BatchFeedResult.__new__(BatchFeedResult)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1525
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cBatchFeedResult] cpp_obj):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <BatchFeedResult>BatchFeedResult.__new__(BatchFeedResult)
 *         __fbthrift_inst._cpp_obj = cmove(cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.BatchFeedResult.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1531
 * 
 *     @property
 *     def batchId(self):             # <<<<<<<<<<<<<<
 * 
 *         return deref(self._cpp_obj).batchId_ref().value()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_7batchId_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_7batchId_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_15BatchFeedResult_7batchId___get__(((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_7batchId___get__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":1533
 *     def batchId(self):
 * 
 *         return deref(self._cpp_obj).batchId_ref().value()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t((*__pyx_v_self->_cpp_obj).batchId_ref().value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1531
 * 
 *     @property
 *     def batchId(self):             # <<<<<<<<<<<<<<
 * 
 *         return deref(self._cpp_obj).batchId_ref().value()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.BatchFeedResult.batchId.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1536
 * 
 *     @property
 *     def topToken(self):             # <<<<<<<<<<<<<<
 * 
 *         return deref(self._cpp_obj).topToken_ref().value()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_8topToken_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_8topToken_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_15BatchFeedResult_8topToken___get__(((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_8topToken___get__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":1538
 *     def topToken(self):
 * 
 *         return deref(self._cpp_obj).topToken_ref().value()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t((*__pyx_v_self->_cpp_obj).topToken_ref().value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1536
 * 
 *     @property
 *     def topToken(self):             # <<<<<<<<<<<<<<
 * 
 *         return deref(self._cpp_obj).topToken_ref().value()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.BatchFeedResult.topToken.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1541
 * 
 *     @property
 *     def feedResult(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_feedResult is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_10feedResult_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_10feedResult_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_15BatchFeedResult_10feedResult___get__(((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_10feedResult___get__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "picard/types.pyx":1543
 *     def feedResult(self):
 * 
 *         if self.__fbthrift_cached_feedResult is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_feedResult = FeedResult.create(__reference_shared_ptr(deref(self._cpp_obj).feedResult_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_feedResult
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_feedResult) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1544
 * 
 *         if self.__fbthrift_cached_feedResult is None:
 *             self.__fbthrift_cached_feedResult = FeedResult.create(__reference_shared_ptr(deref(self._cpp_obj).feedResult_ref().ref(), self._cpp_obj))             # <<<<<<<<<<<<<<
 *         return self.__fbthrift_cached_feedResult
 * 
 */
    __pyx_t_3 = __pyx_f_6picard_5types_10FeedResult_create(::thrift::py3::reference_shared_ptr<::cpp2::FeedResult &>((*__pyx_v_self->_cpp_obj).feedResult_ref().value(), __pyx_v_self->_cpp_obj)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6picard_5types_FeedResult))))) __PYX_ERR(0, 1544, __pyx_L1_error)
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->__pyx___fbthrift_cached_feedResult);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_feedResult));
    __pyx_v_self->__pyx___fbthrift_cached_feedResult = ((struct __pyx_obj_6picard_5types_FeedResult *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "picard/types.pyx":1543
 *     def feedResult(self):
 * 
 *         if self.__fbthrift_cached_feedResult is None:             # <<<<<<<<<<<<<<
 *             self.__fbthrift_cached_feedResult = FeedResult.create(__reference_shared_ptr(deref(self._cpp_obj).feedResult_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_feedResult
 */
  }

  /* "picard/types.pyx":1545
 *         if self.__fbthrift_cached_feedResult is None:
 *             self.__fbthrift_cached_feedResult = FeedResult.create(__reference_shared_ptr(deref(self._cpp_obj).feedResult_ref().ref(), self._cpp_obj))
 *         return self.__fbthrift_cached_feedResult             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_feedResult));
  __pyx_r = ((PyObject *)__pyx_v_self->__pyx___fbthrift_cached_feedResult);
  goto __pyx_L0;

  /* "picard/types.pyx":1541
 * 
 *     @property
 *     def feedResult(self):             # <<<<<<<<<<<<<<
 * 
 *         if self.__fbthrift_cached_feedResult is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.BatchFeedResult.feedResult.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1548
 * 
 * 
 *     def __hash__(BatchFeedResult self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6picard_5types_15BatchFeedResult_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6picard_5types_15BatchFeedResult_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_15BatchFeedResult_4__hash__(((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6picard_5types_15BatchFeedResult_4__hash__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "picard/types.pyx":1549
 * 
 *     def __hash__(BatchFeedResult self):
 *         return  super().__hash__()             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(BatchFeedResult self):
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult));
  __Pyx_GIVEREF(((PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult));
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hash); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1549, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "picard/types.pyx":1548
 * 
 * 
 *     def __hash__(BatchFeedResult self):             # <<<<<<<<<<<<<<
 *         return  super().__hash__()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.BatchFeedResult.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1551
 *         return  super().__hash__()
 * 
 *     def __copy__(BatchFeedResult self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cBatchFeedResult] cpp_obj = make_shared[cBatchFeedResult](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_7__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_15BatchFeedResult_6__copy__(((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_6__copy__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self) {
  std::shared_ptr<::cpp2::BatchFeedResult>  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::BatchFeedResult>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":1552
 * 
 *     def __copy__(BatchFeedResult self):
 *         cdef shared_ptr[cBatchFeedResult] cpp_obj = make_shared[cBatchFeedResult](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::BatchFeedResult>((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1552, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1555
 *             deref(self._cpp_obj)
 *         )
 *         return BatchFeedResult.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(self, other, int op):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_15BatchFeedResult_create(cython_std::move<std::shared_ptr<::cpp2::BatchFeedResult> >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1551
 *         return  super().__hash__()
 * 
 *     def __copy__(BatchFeedResult self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cBatchFeedResult] cpp_obj = make_shared[cBatchFeedResult](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.BatchFeedResult.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1557
 *         return BatchFeedResult.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cBatchFeedResult](
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op); /*proto*/
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_9__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_15BatchFeedResult_8__richcmp__(((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((int)__pyx_v_op));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_8__richcmp__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_v_op) {
  PyObject *__pyx_v_r = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "picard/types.pyx":1558
 * 
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)             # <<<<<<<<<<<<<<
 *         return __richcmp[cBatchFeedResult](
 *             self._cpp_obj,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_BatchFeedResult *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._fbthrift_cmp_sametype(((struct __pyx_obj_6thrift_3py3_5types_Struct *)__pyx_v_self), __pyx_v_other, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1559
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cBatchFeedResult](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<BatchFeedResult>other)._cpp_obj,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":1563
 *             (<BatchFeedResult>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_t_2 = (__pyx_v_r == Py_None);
  if ((__pyx_t_2 != 0)) {

    /* "picard/types.pyx":1559
 *     def __richcmp__(self, other, int op):
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cBatchFeedResult](             # <<<<<<<<<<<<<<
 *             self._cpp_obj,
 *             (<BatchFeedResult>other)._cpp_obj,
 */
    __pyx_t_3 = __Pyx_PyBool_FromLong(::thrift::py3::richcmp<::cpp2::BatchFeedResult>(__pyx_v_self->_cpp_obj, ((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_v_other)->_cpp_obj, __pyx_v_op)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {

    /* "picard/types.pyx":1563
 *             (<BatchFeedResult>other)._cpp_obj,
 *             op,
 *         ) if r is None else r             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __Pyx_INCREF(__pyx_v_r);
    __pyx_t_1 = __pyx_v_r;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1557
 *         return BatchFeedResult.create(cmove(cpp_obj))
 * 
 *     def __richcmp__(self, other, int op):             # <<<<<<<<<<<<<<
 *         r = self._fbthrift_cmp_sametype(other, op)
 *         return __richcmp[cBatchFeedResult](
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("picard.types.BatchFeedResult.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1566
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__BatchFeedResult()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_15BatchFeedResult_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_15BatchFeedResult_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_15BatchFeedResult_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":1567
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__BatchFeedResult()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__BatchFeedResult()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1566
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__BatchFeedResult()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.BatchFeedResult.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1570
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cBatchFeedResult].gen(meta)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_15BatchFeedResult_13__get_metadata__ = {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_15BatchFeedResult_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_13__get_metadata__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_metadata__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_metadata__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_metadata__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_15BatchFeedResult_12__get_metadata__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_12__get_metadata__(void) {
  ::apache::thrift::metadata::ThriftMetadata __pyx_v_meta;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_metadata__", 0);

  /* "picard/types.pyx":1572
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cBatchFeedResult].gen(meta)             # <<<<<<<<<<<<<<
 *         return __MetadataBox.box(cmove(meta))
 * 
 */
  apache::thrift::detail::md::StructMetadata<::cpp2::BatchFeedResult> ::gen(__pyx_v_meta);

  /* "picard/types.pyx":1573
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cBatchFeedResult].gen(meta)
 *         return __MetadataBox.box(cmove(meta))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_vtabptr_6thrift_3py3_6common_MetadataBox->box(cython_std::move<::apache::thrift::metadata::ThriftMetadata>(__pyx_v_meta)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1570
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cBatchFeedResult].gen(meta)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.BatchFeedResult.__get_metadata__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1576
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.BatchFeedResult"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_15BatchFeedResult_15__get_thrift_name__ = {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_15BatchFeedResult_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_15BatchFeedResult_15__get_thrift_name__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_thrift_name__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_thrift_name__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_15BatchFeedResult_14__get_thrift_name__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_15BatchFeedResult_14__get_thrift_name__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_thrift_name__", 0);

  /* "picard/types.pyx":1577
 *     @staticmethod
 *     def __get_thrift_name__():
 *         return "picard.BatchFeedResult"             # <<<<<<<<<<<<<<
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_kp_u_picard_BatchFeedResult);
  __pyx_r = __pyx_kp_u_picard_BatchFeedResult;
  goto __pyx_L0;

  /* "picard/types.pyx":1576
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.BatchFeedResult"
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1579
 *         return "picard.BatchFeedResult"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cBatchFeedResult](idx)
 * 
 */

static std::string_view __pyx_f_6picard_5types_15BatchFeedResult__fbthrift_get_field_name_by_index(CYTHON_UNUSED struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self, size_t __pyx_v_idx) {
  std::string_view __pyx_r;
  __Pyx_RefNannyDeclarations
  std::string_view __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_fbthrift_get_field_name_by_index", 0);

  /* "picard/types.pyx":1580
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
 *         return __get_field_name_by_index[cBatchFeedResult](idx)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  try {
    __pyx_t_1 = ::thrift::py3::get_field_name_by_index<::cpp2::BatchFeedResult>(__pyx_v_idx);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1580, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "picard/types.pyx":1579
 *         return "picard.BatchFeedResult"
 * 
 *     cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):             # <<<<<<<<<<<<<<
 *         return __get_field_name_by_index[cBatchFeedResult](idx)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("picard.types.BatchFeedResult._fbthrift_get_field_name_by_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1582
 *         return __get_field_name_by_index[cBatchFeedResult](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 3
 * 
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_15BatchFeedResult_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_15BatchFeedResult_17__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6picard_5types_15BatchFeedResult_16__cinit__(((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_15BatchFeedResult_16__cinit__(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "picard/types.pyx":1583
 * 
 *     def __cinit__(self):
 *         self._fbthrift_struct_size = 3             # <<<<<<<<<<<<<<
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(BatchFeedResult self, __Protocol proto):
 */
  __pyx_v_self->__pyx_base._fbthrift_struct_size = 3;

  /* "picard/types.pyx":1582
 *         return __get_field_name_by_index[cBatchFeedResult](idx)
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._fbthrift_struct_size = 3
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1585
 *         self._fbthrift_struct_size = 3
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(BatchFeedResult self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

static struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_f_6picard_5types_15BatchFeedResult__serialize(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  std::unique_ptr<folly::IOBuf>  __pyx_v_data;
  struct __pyx_obj_5folly_5iobuf_IOBuf *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::unique_ptr<folly::IOBuf>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_serialize", 0);

  /* "picard/types.pyx":1587
 *     cdef _fbthrift_iobuf.IOBuf _serialize(BatchFeedResult self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cBatchFeedResult](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":1588
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 *             data = cmove(serializer.cserialize[cBatchFeedResult](self._cpp_obj.get(), proto))             # <<<<<<<<<<<<<<
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 */
        try {
          __pyx_t_1 = ::thrift::py3::serialize<::cpp2::BatchFeedResult>(__pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1588, __pyx_L4_error)
        }
        __pyx_v_data = cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_t_1);
      }

      /* "picard/types.pyx":1587
 *     cdef _fbthrift_iobuf.IOBuf _serialize(BatchFeedResult self, __Protocol proto):
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:             # <<<<<<<<<<<<<<
 *             data = cmove(serializer.cserialize[cBatchFeedResult](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":1589
 *         with nogil:
 *             data = cmove(serializer.cserialize[cBatchFeedResult](self._cpp_obj.get(), proto))
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))             # <<<<<<<<<<<<<<
 * 
 *     cdef cuint32_t _deserialize(BatchFeedResult self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_2 = ((PyObject *)__pyx_f_5folly_5iobuf_from_unique_ptr(cython_std::move<std::unique_ptr<folly::IOBuf> >(__pyx_v_data))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = ((struct __pyx_obj_5folly_5iobuf_IOBuf *)__pyx_t_2);
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1585
 *         self._fbthrift_struct_size = 3
 * 
 *     cdef _fbthrift_iobuf.IOBuf _serialize(BatchFeedResult self, __Protocol proto):             # <<<<<<<<<<<<<<
 *         cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
 *         with nogil:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.BatchFeedResult._serialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1591
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(BatchFeedResult self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cBatchFeedResult]()
 */

static uint32_t __pyx_f_6picard_5types_15BatchFeedResult__deserialize(struct __pyx_obj_6picard_5types_BatchFeedResult *__pyx_v_self, folly::IOBuf const *__pyx_v_buf, enum apache::thrift::protocol::PROTOCOL_TYPES __pyx_v_proto) {
  uint32_t __pyx_v_needed;
  uint32_t __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<::cpp2::BatchFeedResult>  __pyx_t_1;
  uint32_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_deserialize", 0);

  /* "picard/types.pyx":1593
 *     cdef cuint32_t _deserialize(BatchFeedResult self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cBatchFeedResult]()             # <<<<<<<<<<<<<<
 *         with nogil:
 *             needed = serializer.cdeserialize[cBatchFeedResult](buf, self._cpp_obj.get(), proto)
 */
  try {
    __pyx_t_1 = std::make_shared<::cpp2::BatchFeedResult>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1593, __pyx_L1_error)
  }
  __pyx_v_self->_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1594
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cBatchFeedResult]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cBatchFeedResult](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "picard/types.pyx":1595
 *         self._cpp_obj = make_shared[cBatchFeedResult]()
 *         with nogil:
 *             needed = serializer.cdeserialize[cBatchFeedResult](buf, self._cpp_obj.get(), proto)             # <<<<<<<<<<<<<<
 *         return needed
 * 
 */
        try {
          __pyx_t_2 = ::thrift::py3::deserialize<::cpp2::BatchFeedResult>(__pyx_v_buf, __pyx_v_self->_cpp_obj.get(), __pyx_v_proto);
        } catch(...) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
          #endif
          __Pyx_CppExn2PyErr();
          #ifdef WITH_THREAD
          __Pyx_PyGILState_Release(__pyx_gilstate_save);
          #endif
          __PYX_ERR(0, 1595, __pyx_L4_error)
        }
        __pyx_v_needed = __pyx_t_2;
      }

      /* "picard/types.pyx":1594
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cBatchFeedResult]()
 *         with nogil:             # <<<<<<<<<<<<<<
 *             needed = serializer.cdeserialize[cBatchFeedResult](buf, self._cpp_obj.get(), proto)
 *         return needed
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "picard/types.pyx":1596
 *         with nogil:
 *             needed = serializer.cdeserialize[cBatchFeedResult](buf, self._cpp_obj.get(), proto)
 *         return needed             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_needed;
  goto __pyx_L0;

  /* "picard/types.pyx":1591
 *         return _fbthrift_iobuf.from_unique_ptr(cmove(data))
 * 
 *     cdef cuint32_t _deserialize(BatchFeedResult self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:             # <<<<<<<<<<<<<<
 *         cdef cuint32_t needed
 *         self._cpp_obj = make_shared[cBatchFeedResult]()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.BatchFeedResult._deserialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1601
 * @__cython.auto_pickle(False)
 * cdef class List__i64(thrift.py3.types.List):
 *     def __init__(self, items=None):             # <<<<<<<<<<<<<<
 *         if isinstance(items, List__i64):
 *             self._cpp_obj = (<List__i64> items)._cpp_obj
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_9List__i64_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_9List__i64_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1601, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1601, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.List__i64.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_9List__i64___init__(((struct __pyx_obj_6picard_5types_List__i64 *)__pyx_v_self), __pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_9List__i64___init__(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self, PyObject *__pyx_v_items) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::shared_ptr<std::vector<int64_t> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":1602
 * cdef class List__i64(thrift.py3.types.List):
 *     def __init__(self, items=None):
 *         if isinstance(items, List__i64):             # <<<<<<<<<<<<<<
 *             self._cpp_obj = (<List__i64> items)._cpp_obj
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_items, __pyx_ptype_6picard_5types_List__i64); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1603
 *     def __init__(self, items=None):
 *         if isinstance(items, List__i64):
 *             self._cpp_obj = (<List__i64> items)._cpp_obj             # <<<<<<<<<<<<<<
 *         else:
 *             self._cpp_obj = List__i64._make_instance(items)
 */
    __pyx_t_3 = ((struct __pyx_obj_6picard_5types_List__i64 *)__pyx_v_items)->_cpp_obj;
    __pyx_v_self->_cpp_obj = __pyx_t_3;

    /* "picard/types.pyx":1602
 * cdef class List__i64(thrift.py3.types.List):
 *     def __init__(self, items=None):
 *         if isinstance(items, List__i64):             # <<<<<<<<<<<<<<
 *             self._cpp_obj = (<List__i64> items)._cpp_obj
 *         else:
 */
    goto __pyx_L3;
  }

  /* "picard/types.pyx":1605
 *             self._cpp_obj = (<List__i64> items)._cpp_obj
 *         else:
 *             self._cpp_obj = List__i64._make_instance(items)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_6picard_5types_9List__i64__make_instance(__pyx_v_items); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1605, __pyx_L1_error)
    __pyx_v_self->_cpp_obj = __pyx_t_3;
  }
  __pyx_L3:;

  /* "picard/types.pyx":1601
 * @__cython.auto_pickle(False)
 * cdef class List__i64(thrift.py3.types.List):
 *     def __init__(self, items=None):             # <<<<<<<<<<<<<<
 *         if isinstance(items, List__i64):
 *             self._cpp_obj = (<List__i64> items)._cpp_obj
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.List__i64.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1608
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[vector[cint64_t]] c_items):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <List__i64>List__i64.__new__(List__i64)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 */

static PyObject *__pyx_f_6picard_5types_9List__i64_create(std::shared_ptr<std::vector<int64_t> >  __pyx_v_c_items) {
  struct __pyx_obj_6picard_5types_List__i64 *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":1609
 *     @staticmethod
 *     cdef create(shared_ptr[vector[cint64_t]] c_items):
 *         __fbthrift_inst = <List__i64>List__i64.__new__(List__i64)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_List__i64(((PyTypeObject *)__pyx_ptype_6picard_5types_List__i64), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1609, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_List__i64 *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1610
 *     cdef create(shared_ptr[vector[cint64_t]] c_items):
 *         __fbthrift_inst = <List__i64>List__i64.__new__(List__i64)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<std::vector<int64_t> > >(__pyx_v_c_items);

  /* "picard/types.pyx":1611
 *         __fbthrift_inst = <List__i64>List__i64.__new__(List__i64)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(List__i64 self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1608
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[vector[cint64_t]] c_items):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <List__i64>List__i64.__new__(List__i64)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.List__i64.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1613
 *         return __fbthrift_inst
 * 
 *     def __copy__(List__i64 self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[cint64_t]] cpp_obj = make_shared[vector[cint64_t]](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9List__i64_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_9List__i64_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_9List__i64_2__copy__(((struct __pyx_obj_6picard_5types_List__i64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9List__i64_2__copy__(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self) {
  std::shared_ptr<std::vector<int64_t> >  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<std::vector<int64_t> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":1614
 * 
 *     def __copy__(List__i64 self):
 *         cdef shared_ptr[vector[cint64_t]] cpp_obj = make_shared[vector[cint64_t]](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<std::vector<int64_t> >((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1614, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1617
 *             deref(self._cpp_obj)
 *         )
 *         return List__i64.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_9List__i64_create(cython_std::move<std::shared_ptr<std::vector<int64_t> > >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1613
 *         return __fbthrift_inst
 * 
 *     def __copy__(List__i64 self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[cint64_t]] cpp_obj = make_shared[vector[cint64_t]](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.List__i64.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1619
 *         return List__i64.create(cmove(cpp_obj))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return deref(self._cpp_obj).size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6picard_5types_9List__i64_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6picard_5types_9List__i64_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_9List__i64_4__len__(((struct __pyx_obj_6picard_5types_List__i64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6picard_5types_9List__i64_4__len__(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "picard/types.pyx":1620
 * 
 *     def __len__(self):
 *         return deref(self._cpp_obj).size()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (*__pyx_v_self->_cpp_obj).size();
  goto __pyx_L0;

  /* "picard/types.pyx":1619
 *         return List__i64.create(cmove(cpp_obj))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return deref(self._cpp_obj).size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1623
 * 
 *     @staticmethod
 *     cdef shared_ptr[vector[cint64_t]] _make_instance(object items) except *:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[cint64_t]] c_inst = make_shared[vector[cint64_t]]()
 *         if items is not None:
 */

static std::shared_ptr<std::vector<int64_t> >  __pyx_f_6picard_5types_9List__i64__make_instance(PyObject *__pyx_v_items) {
  std::shared_ptr<std::vector<int64_t> >  __pyx_v_c_inst;
  PyObject *__pyx_v_item = NULL;
  std::shared_ptr<std::vector<int64_t> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<std::vector<int64_t> >  __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int64_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_instance", 0);

  /* "picard/types.pyx":1624
 *     @staticmethod
 *     cdef shared_ptr[vector[cint64_t]] _make_instance(object items) except *:
 *         cdef shared_ptr[vector[cint64_t]] c_inst = make_shared[vector[cint64_t]]()             # <<<<<<<<<<<<<<
 *         if items is not None:
 *             for item in items:
 */
  try {
    __pyx_t_1 = std::make_shared<std::vector<int64_t> >();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1624, __pyx_L1_error)
  }
  __pyx_v_c_inst = __pyx_t_1;

  /* "picard/types.pyx":1625
 *     cdef shared_ptr[vector[cint64_t]] _make_instance(object items) except *:
 *         cdef shared_ptr[vector[cint64_t]] c_inst = make_shared[vector[cint64_t]]()
 *         if items is not None:             # <<<<<<<<<<<<<<
 *             for item in items:
 *                 if not isinstance(item, int):
 */
  __pyx_t_2 = (__pyx_v_items != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "picard/types.pyx":1626
 *         cdef shared_ptr[vector[cint64_t]] c_inst = make_shared[vector[cint64_t]]()
 *         if items is not None:
 *             for item in items:             # <<<<<<<<<<<<<<
 *                 if not isinstance(item, int):
 *                     raise TypeError(f"{item!r} is not of type int")
 */
    if (likely(PyList_CheckExact(__pyx_v_items)) || PyTuple_CheckExact(__pyx_v_items)) {
      __pyx_t_4 = __pyx_v_items; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1626, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1626, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1626, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1626, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1626, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1626, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "picard/types.pyx":1627
 *         if items is not None:
 *             for item in items:
 *                 if not isinstance(item, int):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{item!r} is not of type int")
 *                 item = <cint64_t> item
 */
      __pyx_t_3 = PyInt_Check(__pyx_v_item); 
      __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
      if (unlikely(__pyx_t_2)) {

        /* "picard/types.pyx":1628
 *             for item in items:
 *                 if not isinstance(item, int):
 *                     raise TypeError(f"{item!r} is not of type int")             # <<<<<<<<<<<<<<
 *                 item = <cint64_t> item
 *                 deref(c_inst).push_back(item)
 */
        __pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_item), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1628, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_t_7, __pyx_kp_u_is_not_of_type_int); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1628, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1628, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(0, 1628, __pyx_L1_error)

        /* "picard/types.pyx":1627
 *         if items is not None:
 *             for item in items:
 *                 if not isinstance(item, int):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{item!r} is not of type int")
 *                 item = <cint64_t> item
 */
      }

      /* "picard/types.pyx":1629
 *                 if not isinstance(item, int):
 *                     raise TypeError(f"{item!r} is not of type int")
 *                 item = <cint64_t> item             # <<<<<<<<<<<<<<
 *                 deref(c_inst).push_back(item)
 *         return c_inst
 */
      __pyx_t_9 = __Pyx_PyInt_As_int64_t(__pyx_v_item); if (unlikely((__pyx_t_9 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1629, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyInt_From_int64_t(((int64_t)__pyx_t_9)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1629, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF_SET(__pyx_v_item, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "picard/types.pyx":1630
 *                     raise TypeError(f"{item!r} is not of type int")
 *                 item = <cint64_t> item
 *                 deref(c_inst).push_back(item)             # <<<<<<<<<<<<<<
 *         return c_inst
 * 
 */
      __pyx_t_9 = __Pyx_PyInt_As_int64_t(__pyx_v_item); if (unlikely((__pyx_t_9 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1630, __pyx_L1_error)
      try {
        (*__pyx_v_c_inst).push_back(__pyx_t_9);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1630, __pyx_L1_error)
      }

      /* "picard/types.pyx":1626
 *         cdef shared_ptr[vector[cint64_t]] c_inst = make_shared[vector[cint64_t]]()
 *         if items is not None:
 *             for item in items:             # <<<<<<<<<<<<<<
 *                 if not isinstance(item, int):
 *                     raise TypeError(f"{item!r} is not of type int")
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "picard/types.pyx":1625
 *     cdef shared_ptr[vector[cint64_t]] _make_instance(object items) except *:
 *         cdef shared_ptr[vector[cint64_t]] c_inst = make_shared[vector[cint64_t]]()
 *         if items is not None:             # <<<<<<<<<<<<<<
 *             for item in items:
 *                 if not isinstance(item, int):
 */
  }

  /* "picard/types.pyx":1631
 *                 item = <cint64_t> item
 *                 deref(c_inst).push_back(item)
 *         return c_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_slice(self, slice index_obj):
 */
  __pyx_r = __pyx_v_c_inst;
  goto __pyx_L0;

  /* "picard/types.pyx":1623
 * 
 *     @staticmethod
 *     cdef shared_ptr[vector[cint64_t]] _make_instance(object items) except *:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[cint64_t]] c_inst = make_shared[vector[cint64_t]]()
 *         if items is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("picard.types.List__i64._make_instance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1633
 *         return c_inst
 * 
 *     cdef _get_slice(self, slice index_obj):             # <<<<<<<<<<<<<<
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 */

static PyObject *__pyx_f_6picard_5types_9List__i64__get_slice(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self, PyObject *__pyx_v_index_obj) {
  int __pyx_v_start;
  int __pyx_v_stop;
  int __pyx_v_step;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_slice", 0);

  /* "picard/types.pyx":1635
 *     cdef _get_slice(self, slice index_obj):
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())             # <<<<<<<<<<<<<<
 *         return List__i64.create(
 *             __list_slice[vector[cint64_t]](self._cpp_obj, start, stop, step)
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((*__pyx_v_self->_cpp_obj).size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySlice_Type_indices, __pyx_v_index_obj, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1635, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(0, 1635, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1635, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1635, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1635, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1635, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_start = __pyx_t_7;
  __pyx_v_stop = __pyx_t_8;
  __pyx_v_step = __pyx_t_9;

  /* "picard/types.pyx":1636
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 *         return List__i64.create(             # <<<<<<<<<<<<<<
 *             __list_slice[vector[cint64_t]](self._cpp_obj, start, stop, step)
 *         )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":1637
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 *         return List__i64.create(
 *             __list_slice[vector[cint64_t]](self._cpp_obj, start, stop, step)             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_2 = __pyx_f_6picard_5types_9List__i64_create(::thrift::py3::list_slice<std::vector<int64_t> >(__pyx_v_self->_cpp_obj, __pyx_v_start, __pyx_v_stop, __pyx_v_step)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1633
 *         return c_inst
 * 
 *     cdef _get_slice(self, slice index_obj):             # <<<<<<<<<<<<<<
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.List__i64._get_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1640
 *         )
 * 
 *     cdef _get_single_item(self, size_t index):             # <<<<<<<<<<<<<<
 *         cdef cint64_t citem = 0
 *         __list_getitem(self._cpp_obj, index, citem)
 */

static PyObject *__pyx_f_6picard_5types_9List__i64__get_single_item(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self, size_t __pyx_v_index) {
  int64_t __pyx_v_citem;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_single_item", 0);

  /* "picard/types.pyx":1641
 * 
 *     cdef _get_single_item(self, size_t index):
 *         cdef cint64_t citem = 0             # <<<<<<<<<<<<<<
 *         __list_getitem(self._cpp_obj, index, citem)
 *         return citem
 */
  __pyx_v_citem = 0;

  /* "picard/types.pyx":1642
 *     cdef _get_single_item(self, size_t index):
 *         cdef cint64_t citem = 0
 *         __list_getitem(self._cpp_obj, index, citem)             # <<<<<<<<<<<<<<
 *         return citem
 * 
 */
  ::thrift::py3::list_getitem<std::vector<int64_t> >(__pyx_v_self->_cpp_obj, __pyx_v_index, __pyx_v_citem);

  /* "picard/types.pyx":1643
 *         cdef cint64_t citem = 0
 *         __list_getitem(self._cpp_obj, index, citem)
 *         return citem             # <<<<<<<<<<<<<<
 * 
 *     cdef _check_item_type(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_citem); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1640
 *         )
 * 
 *     cdef _get_single_item(self, size_t index):             # <<<<<<<<<<<<<<
 *         cdef cint64_t citem = 0
 *         __list_getitem(self._cpp_obj, index, citem)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.List__i64._get_single_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1645
 *         return citem
 * 
 *     cdef _check_item_type(self, item):             # <<<<<<<<<<<<<<
 *         if not self or item is None:
 *             return
 */

static PyObject *__pyx_f_6picard_5types_9List__i64__check_item_type(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_item_type", 0);

  /* "picard/types.pyx":1646
 * 
 *     cdef _check_item_type(self, item):
 *         if not self or item is None:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(item, int):
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1646, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_item == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "picard/types.pyx":1647
 *     cdef _check_item_type(self, item):
 *         if not self or item is None:
 *             return             # <<<<<<<<<<<<<<
 *         if isinstance(item, int):
 *             return item
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "picard/types.pyx":1646
 * 
 *     cdef _check_item_type(self, item):
 *         if not self or item is None:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(item, int):
 */
  }

  /* "picard/types.pyx":1648
 *         if not self or item is None:
 *             return
 *         if isinstance(item, int):             # <<<<<<<<<<<<<<
 *             return item
 * 
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_item); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1649
 *             return
 *         if isinstance(item, int):
 *             return item             # <<<<<<<<<<<<<<
 * 
 *     def index(self, item, start=0, stop=None):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_item);
    __pyx_r = __pyx_v_item;
    goto __pyx_L0;

    /* "picard/types.pyx":1648
 *         if not self or item is None:
 *             return
 *         if isinstance(item, int):             # <<<<<<<<<<<<<<
 *             return item
 * 
 */
  }

  /* "picard/types.pyx":1645
 *         return citem
 * 
 *     cdef _check_item_type(self, item):             # <<<<<<<<<<<<<<
 *         if not self or item is None:
 *             return
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.List__i64._check_item_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1651
 *             return item
 * 
 *     def index(self, item, start=0, stop=None):             # <<<<<<<<<<<<<<
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9List__i64_7index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6picard_5types_9List__i64_7index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("index (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_start,&__pyx_n_s_stop,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stop);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "index") < 0)) __PYX_ERR(0, 1651, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_start = values[1];
    __pyx_v_stop = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("index", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1651, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.List__i64.index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_9List__i64_6index(((struct __pyx_obj_6picard_5types_List__i64 *)__pyx_v_self), __pyx_v_item, __pyx_v_start, __pyx_v_stop);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9List__i64_6index(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_start, PyObject *__pyx_v_stop) {
  PyObject *__pyx_v_err = NULL;
  __pyx_ctuple_int__and_int__and_int __pyx_v_indices;
  int64_t __pyx_v_citem;
  std::optional<size_t>  __pyx_v_found;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __pyx_ctuple_int__and_int__and_int __pyx_t_7;
  int64_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("index", 0);
  __Pyx_INCREF(__pyx_v_item);

  /* "picard/types.pyx":1652
 * 
 *     def index(self, item, start=0, stop=None):
 *         err = ValueError(f'{item} is not in list')             # <<<<<<<<<<<<<<
 *         item = self._check_item_type(item)
 *         if item is None:
 */
  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_item, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u_is_not_in_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_err = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1653
 *     def index(self, item, start=0, stop=None):
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)             # <<<<<<<<<<<<<<
 *         if item is None:
 *             raise err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_List__i64 *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._check_item_type(((struct __pyx_obj_6thrift_3py3_5types_List *)__pyx_v_self), __pyx_v_item); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_item, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1654
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 */
  __pyx_t_3 = (__pyx_v_item == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (unlikely(__pyx_t_4)) {

    /* "picard/types.pyx":1655
 *         item = self._check_item_type(item)
 *         if item is None:
 *             raise err             # <<<<<<<<<<<<<<
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 *         cdef cint64_t citem = item
 */
    __Pyx_Raise(__pyx_v_err, 0, 0, 0);
    __PYX_ERR(0, 1655, __pyx_L1_error)

    /* "picard/types.pyx":1654
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 */
  }

  /* "picard/types.pyx":1656
 *         if item is None:
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())             # <<<<<<<<<<<<<<
 *         cdef cint64_t citem = item
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[cint64_t]](self._cpp_obj, indices[0], indices[1], citem)
 */
  __pyx_t_2 = PySlice_New(__pyx_v_start, __pyx_v_stop, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_indices); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((*__pyx_v_self->_cpp_obj).size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_convert__from_py___pyx_ctuple_int__and_int__and_int(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1656, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_indices = __pyx_t_7;

  /* "picard/types.pyx":1657
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 *         cdef cint64_t citem = item             # <<<<<<<<<<<<<<
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[cint64_t]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():
 */
  __pyx_t_8 = __Pyx_PyInt_As_int64_t(__pyx_v_item); if (unlikely((__pyx_t_8 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1657, __pyx_L1_error)
  __pyx_v_citem = __pyx_t_8;

  /* "picard/types.pyx":1658
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 *         cdef cint64_t citem = item
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[cint64_t]](self._cpp_obj, indices[0], indices[1], citem)             # <<<<<<<<<<<<<<
 *         if not found.has_value():
 *             raise err
 */
  __pyx_v_found = ::thrift::py3::list_index<std::vector<int64_t> >(__pyx_v_self->_cpp_obj, __pyx_v_indices.f0, __pyx_v_indices.f1, __pyx_v_citem);

  /* "picard/types.pyx":1659
 *         cdef cint64_t citem = item
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[cint64_t]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():             # <<<<<<<<<<<<<<
 *             raise err
 *         return found.value()
 */
  __pyx_t_4 = ((!(__pyx_v_found.has_value() != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "picard/types.pyx":1660
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[cint64_t]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():
 *             raise err             # <<<<<<<<<<<<<<
 *         return found.value()
 * 
 */
    __Pyx_Raise(__pyx_v_err, 0, 0, 0);
    __PYX_ERR(0, 1660, __pyx_L1_error)

    /* "picard/types.pyx":1659
 *         cdef cint64_t citem = item
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[cint64_t]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():             # <<<<<<<<<<<<<<
 *             raise err
 *         return found.value()
 */
  }

  /* "picard/types.pyx":1661
 *         if not found.has_value():
 *             raise err
 *         return found.value()             # <<<<<<<<<<<<<<
 * 
 *     def count(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_found.value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1651
 *             return item
 * 
 *     def index(self, item, start=0, stop=None):             # <<<<<<<<<<<<<<
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.List__i64.index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1663
 *         return found.value()
 * 
 *     def count(self, item):             # <<<<<<<<<<<<<<
 *         item = self._check_item_type(item)
 *         if item is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9List__i64_9count(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_pw_6picard_5types_9List__i64_9count(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_9List__i64_8count(((struct __pyx_obj_6picard_5types_List__i64 *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9List__i64_8count(struct __pyx_obj_6picard_5types_List__i64 *__pyx_v_self, PyObject *__pyx_v_item) {
  int64_t __pyx_v_citem;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int64_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);
  __Pyx_INCREF(__pyx_v_item);

  /* "picard/types.pyx":1664
 * 
 *     def count(self, item):
 *         item = self._check_item_type(item)             # <<<<<<<<<<<<<<
 *         if item is None:
 *             return 0
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_List__i64 *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._check_item_type(((struct __pyx_obj_6thrift_3py3_5types_List *)__pyx_v_self), __pyx_v_item); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_item, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1665
 *     def count(self, item):
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef cint64_t citem = item
 */
  __pyx_t_2 = (__pyx_v_item == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "picard/types.pyx":1666
 *         item = self._check_item_type(item)
 *         if item is None:
 *             return 0             # <<<<<<<<<<<<<<
 *         cdef cint64_t citem = item
 *         return __list_count[vector[cint64_t]](self._cpp_obj, citem)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "picard/types.pyx":1665
 *     def count(self, item):
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef cint64_t citem = item
 */
  }

  /* "picard/types.pyx":1667
 *         if item is None:
 *             return 0
 *         cdef cint64_t citem = item             # <<<<<<<<<<<<<<
 *         return __list_count[vector[cint64_t]](self._cpp_obj, citem)
 * 
 */
  __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_v_item); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1667, __pyx_L1_error)
  __pyx_v_citem = __pyx_t_4;

  /* "picard/types.pyx":1668
 *             return 0
 *         cdef cint64_t citem = item
 *         return __list_count[vector[cint64_t]](self._cpp_obj, citem)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(::thrift::py3::list_count<std::vector<int64_t> >(__pyx_v_self->_cpp_obj, __pyx_v_citem)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1663
 *         return found.value()
 * 
 *     def count(self, item):             # <<<<<<<<<<<<<<
 *         item = self._check_item_type(item)
 *         if item is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.List__i64.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1671
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__i64()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_9List__i64_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_9List__i64_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_9List__i64_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_9List__i64_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_9List__i64_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_9List__i64_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":1672
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__List__i64()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__List__i64()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1671
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__i64()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.List__i64.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1679
 * @__cython.auto_pickle(False)
 * cdef class List__List__i64(thrift.py3.types.List):
 *     def __init__(self, items=None):             # <<<<<<<<<<<<<<
 *         if isinstance(items, List__List__i64):
 *             self._cpp_obj = (<List__List__i64> items)._cpp_obj
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_15List__List__i64_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_15List__List__i64_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1679, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1679, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.List__List__i64.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_15List__List__i64___init__(((struct __pyx_obj_6picard_5types_List__List__i64 *)__pyx_v_self), __pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_15List__List__i64___init__(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self, PyObject *__pyx_v_items) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::shared_ptr<std::vector<std::vector<int64_t> > >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":1680
 * cdef class List__List__i64(thrift.py3.types.List):
 *     def __init__(self, items=None):
 *         if isinstance(items, List__List__i64):             # <<<<<<<<<<<<<<
 *             self._cpp_obj = (<List__List__i64> items)._cpp_obj
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_items, __pyx_ptype_6picard_5types_List__List__i64); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1681
 *     def __init__(self, items=None):
 *         if isinstance(items, List__List__i64):
 *             self._cpp_obj = (<List__List__i64> items)._cpp_obj             # <<<<<<<<<<<<<<
 *         else:
 *             self._cpp_obj = List__List__i64._make_instance(items)
 */
    __pyx_t_3 = ((struct __pyx_obj_6picard_5types_List__List__i64 *)__pyx_v_items)->_cpp_obj;
    __pyx_v_self->_cpp_obj = __pyx_t_3;

    /* "picard/types.pyx":1680
 * cdef class List__List__i64(thrift.py3.types.List):
 *     def __init__(self, items=None):
 *         if isinstance(items, List__List__i64):             # <<<<<<<<<<<<<<
 *             self._cpp_obj = (<List__List__i64> items)._cpp_obj
 *         else:
 */
    goto __pyx_L3;
  }

  /* "picard/types.pyx":1683
 *             self._cpp_obj = (<List__List__i64> items)._cpp_obj
 *         else:
 *             self._cpp_obj = List__List__i64._make_instance(items)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_6picard_5types_15List__List__i64__make_instance(__pyx_v_items); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1683, __pyx_L1_error)
    __pyx_v_self->_cpp_obj = __pyx_t_3;
  }
  __pyx_L3:;

  /* "picard/types.pyx":1679
 * @__cython.auto_pickle(False)
 * cdef class List__List__i64(thrift.py3.types.List):
 *     def __init__(self, items=None):             # <<<<<<<<<<<<<<
 *         if isinstance(items, List__List__i64):
 *             self._cpp_obj = (<List__List__i64> items)._cpp_obj
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.List__List__i64.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1686
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[vector[vector[cint64_t]]] c_items):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <List__List__i64>List__List__i64.__new__(List__List__i64)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 */

static PyObject *__pyx_f_6picard_5types_15List__List__i64_create(std::shared_ptr<std::vector<std::vector<int64_t> > >  __pyx_v_c_items) {
  struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":1687
 *     @staticmethod
 *     cdef create(shared_ptr[vector[vector[cint64_t]]] c_items):
 *         __fbthrift_inst = <List__List__i64>List__List__i64.__new__(List__List__i64)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_List__List__i64(((PyTypeObject *)__pyx_ptype_6picard_5types_List__List__i64), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1687, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_List__List__i64 *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1688
 *     cdef create(shared_ptr[vector[vector[cint64_t]]] c_items):
 *         __fbthrift_inst = <List__List__i64>List__List__i64.__new__(List__List__i64)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<std::vector<std::vector<int64_t> > > >(__pyx_v_c_items);

  /* "picard/types.pyx":1689
 *         __fbthrift_inst = <List__List__i64>List__List__i64.__new__(List__List__i64)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(List__List__i64 self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1686
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[vector[vector[cint64_t]]] c_items):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <List__List__i64>List__List__i64.__new__(List__List__i64)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.List__List__i64.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1691
 *         return __fbthrift_inst
 * 
 *     def __copy__(List__List__i64 self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[vector[cint64_t]]] cpp_obj = make_shared[vector[vector[cint64_t]]](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_15List__List__i64_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_15List__List__i64_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_15List__List__i64_2__copy__(((struct __pyx_obj_6picard_5types_List__List__i64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_15List__List__i64_2__copy__(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self) {
  std::shared_ptr<std::vector<std::vector<int64_t> > >  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<std::vector<std::vector<int64_t> > >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":1692
 * 
 *     def __copy__(List__List__i64 self):
 *         cdef shared_ptr[vector[vector[cint64_t]]] cpp_obj = make_shared[vector[vector[cint64_t]]](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<std::vector<std::vector<int64_t> > >((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1692, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1695
 *             deref(self._cpp_obj)
 *         )
 *         return List__List__i64.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_15List__List__i64_create(cython_std::move<std::shared_ptr<std::vector<std::vector<int64_t> > > >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1691
 *         return __fbthrift_inst
 * 
 *     def __copy__(List__List__i64 self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[vector[cint64_t]]] cpp_obj = make_shared[vector[vector[cint64_t]]](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.List__List__i64.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1697
 *         return List__List__i64.create(cmove(cpp_obj))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return deref(self._cpp_obj).size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6picard_5types_15List__List__i64_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6picard_5types_15List__List__i64_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_15List__List__i64_4__len__(((struct __pyx_obj_6picard_5types_List__List__i64 *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6picard_5types_15List__List__i64_4__len__(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "picard/types.pyx":1698
 * 
 *     def __len__(self):
 *         return deref(self._cpp_obj).size()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (*__pyx_v_self->_cpp_obj).size();
  goto __pyx_L0;

  /* "picard/types.pyx":1697
 *         return List__List__i64.create(cmove(cpp_obj))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return deref(self._cpp_obj).size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1701
 * 
 *     @staticmethod
 *     cdef shared_ptr[vector[vector[cint64_t]]] _make_instance(object items) except *:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[vector[cint64_t]]] c_inst = make_shared[vector[vector[cint64_t]]]()
 *         if items is not None:
 */

static std::shared_ptr<std::vector<std::vector<int64_t> > >  __pyx_f_6picard_5types_15List__List__i64__make_instance(PyObject *__pyx_v_items) {
  std::shared_ptr<std::vector<std::vector<int64_t> > >  __pyx_v_c_inst;
  PyObject *__pyx_v_item = NULL;
  std::shared_ptr<std::vector<std::vector<int64_t> > >  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<std::vector<std::vector<int64_t> > >  __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_instance", 0);

  /* "picard/types.pyx":1702
 *     @staticmethod
 *     cdef shared_ptr[vector[vector[cint64_t]]] _make_instance(object items) except *:
 *         cdef shared_ptr[vector[vector[cint64_t]]] c_inst = make_shared[vector[vector[cint64_t]]]()             # <<<<<<<<<<<<<<
 *         if items is not None:
 *             for item in items:
 */
  try {
    __pyx_t_1 = std::make_shared<std::vector<std::vector<int64_t> > >();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1702, __pyx_L1_error)
  }
  __pyx_v_c_inst = __pyx_t_1;

  /* "picard/types.pyx":1703
 *     cdef shared_ptr[vector[vector[cint64_t]]] _make_instance(object items) except *:
 *         cdef shared_ptr[vector[vector[cint64_t]]] c_inst = make_shared[vector[vector[cint64_t]]]()
 *         if items is not None:             # <<<<<<<<<<<<<<
 *             for item in items:
 *                 if item is None:
 */
  __pyx_t_2 = (__pyx_v_items != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "picard/types.pyx":1704
 *         cdef shared_ptr[vector[vector[cint64_t]]] c_inst = make_shared[vector[vector[cint64_t]]]()
 *         if items is not None:
 *             for item in items:             # <<<<<<<<<<<<<<
 *                 if item is None:
 *                     raise TypeError("None is not of the type _typing.Sequence[int]")
 */
    if (likely(PyList_CheckExact(__pyx_v_items)) || PyTuple_CheckExact(__pyx_v_items)) {
      __pyx_t_4 = __pyx_v_items; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1704, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1704, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1704, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1704, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1704, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1704, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "picard/types.pyx":1705
 *         if items is not None:
 *             for item in items:
 *                 if item is None:             # <<<<<<<<<<<<<<
 *                     raise TypeError("None is not of the type _typing.Sequence[int]")
 *                 if not isinstance(item, List__i64):
 */
      __pyx_t_3 = (__pyx_v_item == Py_None);
      __pyx_t_2 = (__pyx_t_3 != 0);
      if (unlikely(__pyx_t_2)) {

        /* "picard/types.pyx":1706
 *             for item in items:
 *                 if item is None:
 *                     raise TypeError("None is not of the type _typing.Sequence[int]")             # <<<<<<<<<<<<<<
 *                 if not isinstance(item, List__i64):
 *                     item = List__i64(item)
 */
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1706, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(0, 1706, __pyx_L1_error)

        /* "picard/types.pyx":1705
 *         if items is not None:
 *             for item in items:
 *                 if item is None:             # <<<<<<<<<<<<<<
 *                     raise TypeError("None is not of the type _typing.Sequence[int]")
 *                 if not isinstance(item, List__i64):
 */
      }

      /* "picard/types.pyx":1707
 *                 if item is None:
 *                     raise TypeError("None is not of the type _typing.Sequence[int]")
 *                 if not isinstance(item, List__i64):             # <<<<<<<<<<<<<<
 *                     item = List__i64(item)
 *                 deref(c_inst).push_back(deref((<List__i64>item)._cpp_obj))
 */
      __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_item, __pyx_ptype_6picard_5types_List__i64); 
      __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_3) {

        /* "picard/types.pyx":1708
 *                     raise TypeError("None is not of the type _typing.Sequence[int]")
 *                 if not isinstance(item, List__i64):
 *                     item = List__i64(item)             # <<<<<<<<<<<<<<
 *                 deref(c_inst).push_back(deref((<List__i64>item)._cpp_obj))
 *         return c_inst
 */
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6picard_5types_List__i64), __pyx_v_item); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1708, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF_SET(__pyx_v_item, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "picard/types.pyx":1707
 *                 if item is None:
 *                     raise TypeError("None is not of the type _typing.Sequence[int]")
 *                 if not isinstance(item, List__i64):             # <<<<<<<<<<<<<<
 *                     item = List__i64(item)
 *                 deref(c_inst).push_back(deref((<List__i64>item)._cpp_obj))
 */
      }

      /* "picard/types.pyx":1709
 *                 if not isinstance(item, List__i64):
 *                     item = List__i64(item)
 *                 deref(c_inst).push_back(deref((<List__i64>item)._cpp_obj))             # <<<<<<<<<<<<<<
 *         return c_inst
 * 
 */
      try {
        (*__pyx_v_c_inst).push_back((*((struct __pyx_obj_6picard_5types_List__i64 *)__pyx_v_item)->_cpp_obj));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1709, __pyx_L1_error)
      }

      /* "picard/types.pyx":1704
 *         cdef shared_ptr[vector[vector[cint64_t]]] c_inst = make_shared[vector[vector[cint64_t]]]()
 *         if items is not None:
 *             for item in items:             # <<<<<<<<<<<<<<
 *                 if item is None:
 *                     raise TypeError("None is not of the type _typing.Sequence[int]")
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "picard/types.pyx":1703
 *     cdef shared_ptr[vector[vector[cint64_t]]] _make_instance(object items) except *:
 *         cdef shared_ptr[vector[vector[cint64_t]]] c_inst = make_shared[vector[vector[cint64_t]]]()
 *         if items is not None:             # <<<<<<<<<<<<<<
 *             for item in items:
 *                 if item is None:
 */
  }

  /* "picard/types.pyx":1710
 *                     item = List__i64(item)
 *                 deref(c_inst).push_back(deref((<List__i64>item)._cpp_obj))
 *         return c_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_slice(self, slice index_obj):
 */
  __pyx_r = __pyx_v_c_inst;
  goto __pyx_L0;

  /* "picard/types.pyx":1701
 * 
 *     @staticmethod
 *     cdef shared_ptr[vector[vector[cint64_t]]] _make_instance(object items) except *:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[vector[cint64_t]]] c_inst = make_shared[vector[vector[cint64_t]]]()
 *         if items is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("picard.types.List__List__i64._make_instance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1712
 *         return c_inst
 * 
 *     cdef _get_slice(self, slice index_obj):             # <<<<<<<<<<<<<<
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 */

static PyObject *__pyx_f_6picard_5types_15List__List__i64__get_slice(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self, PyObject *__pyx_v_index_obj) {
  int __pyx_v_start;
  int __pyx_v_stop;
  int __pyx_v_step;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_slice", 0);

  /* "picard/types.pyx":1714
 *     cdef _get_slice(self, slice index_obj):
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())             # <<<<<<<<<<<<<<
 *         return List__List__i64.create(
 *             __list_slice[vector[vector[cint64_t]]](self._cpp_obj, start, stop, step)
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((*__pyx_v_self->_cpp_obj).size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySlice_Type_indices, __pyx_v_index_obj, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1714, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(0, 1714, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1714, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1714, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1714, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1714, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_start = __pyx_t_7;
  __pyx_v_stop = __pyx_t_8;
  __pyx_v_step = __pyx_t_9;

  /* "picard/types.pyx":1715
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 *         return List__List__i64.create(             # <<<<<<<<<<<<<<
 *             __list_slice[vector[vector[cint64_t]]](self._cpp_obj, start, stop, step)
 *         )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":1716
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 *         return List__List__i64.create(
 *             __list_slice[vector[vector[cint64_t]]](self._cpp_obj, start, stop, step)             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_2 = __pyx_f_6picard_5types_15List__List__i64_create(::thrift::py3::list_slice<std::vector<std::vector<int64_t> > >(__pyx_v_self->_cpp_obj, __pyx_v_start, __pyx_v_stop, __pyx_v_step)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1712
 *         return c_inst
 * 
 *     cdef _get_slice(self, slice index_obj):             # <<<<<<<<<<<<<<
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.List__List__i64._get_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1719
 *         )
 * 
 *     cdef _get_single_item(self, size_t index):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[cint64_t]] citem
 *         __list_getitem(self._cpp_obj, index, citem)
 */

static PyObject *__pyx_f_6picard_5types_15List__List__i64__get_single_item(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self, size_t __pyx_v_index) {
  std::shared_ptr<std::vector<int64_t> >  __pyx_v_citem;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_single_item", 0);

  /* "picard/types.pyx":1721
 *     cdef _get_single_item(self, size_t index):
 *         cdef shared_ptr[vector[cint64_t]] citem
 *         __list_getitem(self._cpp_obj, index, citem)             # <<<<<<<<<<<<<<
 *         return List__i64.create(citem)
 * 
 */
  ::thrift::py3::list_getitem<std::vector<std::vector<int64_t> > >(__pyx_v_self->_cpp_obj, __pyx_v_index, __pyx_v_citem);

  /* "picard/types.pyx":1722
 *         cdef shared_ptr[vector[cint64_t]] citem
 *         __list_getitem(self._cpp_obj, index, citem)
 *         return List__i64.create(citem)             # <<<<<<<<<<<<<<
 * 
 *     cdef _check_item_type(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6picard_5types_9List__i64_create(__pyx_v_citem); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1719
 *         )
 * 
 *     cdef _get_single_item(self, size_t index):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[cint64_t]] citem
 *         __list_getitem(self._cpp_obj, index, citem)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.List__List__i64._get_single_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1724
 *         return List__i64.create(citem)
 * 
 *     cdef _check_item_type(self, item):             # <<<<<<<<<<<<<<
 *         if not self or item is None:
 *             return
 */

static PyObject *__pyx_f_6picard_5types_15List__List__i64__check_item_type(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_item_type", 0);

  /* "picard/types.pyx":1725
 * 
 *     cdef _check_item_type(self, item):
 *         if not self or item is None:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(item, List__i64):
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1725, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_item == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "picard/types.pyx":1726
 *     cdef _check_item_type(self, item):
 *         if not self or item is None:
 *             return             # <<<<<<<<<<<<<<
 *         if isinstance(item, List__i64):
 *             return item
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "picard/types.pyx":1725
 * 
 *     cdef _check_item_type(self, item):
 *         if not self or item is None:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(item, List__i64):
 */
  }

  /* "picard/types.pyx":1727
 *         if not self or item is None:
 *             return
 *         if isinstance(item, List__i64):             # <<<<<<<<<<<<<<
 *             return item
 *         try:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_item, __pyx_ptype_6picard_5types_List__i64); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1728
 *             return
 *         if isinstance(item, List__i64):
 *             return item             # <<<<<<<<<<<<<<
 *         try:
 *             return List__i64(item)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_item);
    __pyx_r = __pyx_v_item;
    goto __pyx_L0;

    /* "picard/types.pyx":1727
 *         if not self or item is None:
 *             return
 *         if isinstance(item, List__i64):             # <<<<<<<<<<<<<<
 *             return item
 *         try:
 */
  }

  /* "picard/types.pyx":1729
 *         if isinstance(item, List__i64):
 *             return item
 *         try:             # <<<<<<<<<<<<<<
 *             return List__i64(item)
 *         except:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    /*try:*/ {

      /* "picard/types.pyx":1730
 *             return item
 *         try:
 *             return List__i64(item)             # <<<<<<<<<<<<<<
 *         except:
 *             pass
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6picard_5types_List__i64), __pyx_v_item); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1730, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_r = __pyx_t_7;
      __pyx_t_7 = 0;
      goto __pyx_L11_try_return;

      /* "picard/types.pyx":1729
 *         if isinstance(item, List__i64):
 *             return item
 *         try:             # <<<<<<<<<<<<<<
 *             return List__i64(item)
 *         except:
 */
    }
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "picard/types.pyx":1731
 *         try:
 *             return List__i64(item)
 *         except:             # <<<<<<<<<<<<<<
 *             pass
 * 
 */
    /*except:*/ {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L8_exception_handled;
    }
    __pyx_L11_try_return:;

    /* "picard/types.pyx":1729
 *         if isinstance(item, List__i64):
 *             return item
 *         try:             # <<<<<<<<<<<<<<
 *             return List__i64(item)
 *         except:
 */
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
    goto __pyx_L0;
    __pyx_L8_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_ExceptionReset(__pyx_t_4, __pyx_t_5, __pyx_t_6);
  }

  /* "picard/types.pyx":1724
 *         return List__i64.create(citem)
 * 
 *     cdef _check_item_type(self, item):             # <<<<<<<<<<<<<<
 *         if not self or item is None:
 *             return
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("picard.types.List__List__i64._check_item_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1734
 *             pass
 * 
 *     def index(self, item, start=0, stop=None):             # <<<<<<<<<<<<<<
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_15List__List__i64_7index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6picard_5types_15List__List__i64_7index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("index (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_start,&__pyx_n_s_stop,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stop);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "index") < 0)) __PYX_ERR(0, 1734, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_start = values[1];
    __pyx_v_stop = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("index", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1734, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.List__List__i64.index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_15List__List__i64_6index(((struct __pyx_obj_6picard_5types_List__List__i64 *)__pyx_v_self), __pyx_v_item, __pyx_v_start, __pyx_v_stop);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_15List__List__i64_6index(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_start, PyObject *__pyx_v_stop) {
  PyObject *__pyx_v_err = NULL;
  __pyx_ctuple_int__and_int__and_int __pyx_v_indices;
  std::vector<int64_t>  __pyx_v_citem;
  std::optional<size_t>  __pyx_v_found;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __pyx_ctuple_int__and_int__and_int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("index", 0);
  __Pyx_INCREF(__pyx_v_item);

  /* "picard/types.pyx":1735
 * 
 *     def index(self, item, start=0, stop=None):
 *         err = ValueError(f'{item} is not in list')             # <<<<<<<<<<<<<<
 *         item = self._check_item_type(item)
 *         if item is None:
 */
  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_item, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u_is_not_in_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_err = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1736
 *     def index(self, item, start=0, stop=None):
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)             # <<<<<<<<<<<<<<
 *         if item is None:
 *             raise err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_List__List__i64 *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._check_item_type(((struct __pyx_obj_6thrift_3py3_5types_List *)__pyx_v_self), __pyx_v_item); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_item, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1737
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 */
  __pyx_t_3 = (__pyx_v_item == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (unlikely(__pyx_t_4)) {

    /* "picard/types.pyx":1738
 *         item = self._check_item_type(item)
 *         if item is None:
 *             raise err             # <<<<<<<<<<<<<<
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 *         cdef vector[cint64_t] citem = deref((<List__i64>item)._cpp_obj)
 */
    __Pyx_Raise(__pyx_v_err, 0, 0, 0);
    __PYX_ERR(0, 1738, __pyx_L1_error)

    /* "picard/types.pyx":1737
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 */
  }

  /* "picard/types.pyx":1739
 *         if item is None:
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())             # <<<<<<<<<<<<<<
 *         cdef vector[cint64_t] citem = deref((<List__i64>item)._cpp_obj)
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[vector[cint64_t]]](self._cpp_obj, indices[0], indices[1], citem)
 */
  __pyx_t_2 = PySlice_New(__pyx_v_start, __pyx_v_stop, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_indices); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((*__pyx_v_self->_cpp_obj).size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_convert__from_py___pyx_ctuple_int__and_int__and_int(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1739, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_indices = __pyx_t_7;

  /* "picard/types.pyx":1740
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 *         cdef vector[cint64_t] citem = deref((<List__i64>item)._cpp_obj)             # <<<<<<<<<<<<<<
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[vector[cint64_t]]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():
 */
  __pyx_v_citem = (*((struct __pyx_obj_6picard_5types_List__i64 *)__pyx_v_item)->_cpp_obj);

  /* "picard/types.pyx":1741
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 *         cdef vector[cint64_t] citem = deref((<List__i64>item)._cpp_obj)
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[vector[cint64_t]]](self._cpp_obj, indices[0], indices[1], citem)             # <<<<<<<<<<<<<<
 *         if not found.has_value():
 *             raise err
 */
  __pyx_v_found = ::thrift::py3::list_index<std::vector<std::vector<int64_t> > >(__pyx_v_self->_cpp_obj, __pyx_v_indices.f0, __pyx_v_indices.f1, __pyx_v_citem);

  /* "picard/types.pyx":1742
 *         cdef vector[cint64_t] citem = deref((<List__i64>item)._cpp_obj)
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[vector[cint64_t]]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():             # <<<<<<<<<<<<<<
 *             raise err
 *         return found.value()
 */
  __pyx_t_4 = ((!(__pyx_v_found.has_value() != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "picard/types.pyx":1743
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[vector[cint64_t]]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():
 *             raise err             # <<<<<<<<<<<<<<
 *         return found.value()
 * 
 */
    __Pyx_Raise(__pyx_v_err, 0, 0, 0);
    __PYX_ERR(0, 1743, __pyx_L1_error)

    /* "picard/types.pyx":1742
 *         cdef vector[cint64_t] citem = deref((<List__i64>item)._cpp_obj)
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[vector[cint64_t]]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():             # <<<<<<<<<<<<<<
 *             raise err
 *         return found.value()
 */
  }

  /* "picard/types.pyx":1744
 *         if not found.has_value():
 *             raise err
 *         return found.value()             # <<<<<<<<<<<<<<
 * 
 *     def count(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_found.value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1734
 *             pass
 * 
 *     def index(self, item, start=0, stop=None):             # <<<<<<<<<<<<<<
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.List__List__i64.index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1746
 *         return found.value()
 * 
 *     def count(self, item):             # <<<<<<<<<<<<<<
 *         item = self._check_item_type(item)
 *         if item is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_15List__List__i64_9count(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_pw_6picard_5types_15List__List__i64_9count(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_15List__List__i64_8count(((struct __pyx_obj_6picard_5types_List__List__i64 *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_15List__List__i64_8count(struct __pyx_obj_6picard_5types_List__List__i64 *__pyx_v_self, PyObject *__pyx_v_item) {
  std::vector<int64_t>  __pyx_v_citem;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);
  __Pyx_INCREF(__pyx_v_item);

  /* "picard/types.pyx":1747
 * 
 *     def count(self, item):
 *         item = self._check_item_type(item)             # <<<<<<<<<<<<<<
 *         if item is None:
 *             return 0
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_List__List__i64 *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._check_item_type(((struct __pyx_obj_6thrift_3py3_5types_List *)__pyx_v_self), __pyx_v_item); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_item, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1748
 *     def count(self, item):
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef vector[cint64_t] citem = deref((<List__i64>item)._cpp_obj)
 */
  __pyx_t_2 = (__pyx_v_item == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "picard/types.pyx":1749
 *         item = self._check_item_type(item)
 *         if item is None:
 *             return 0             # <<<<<<<<<<<<<<
 *         cdef vector[cint64_t] citem = deref((<List__i64>item)._cpp_obj)
 *         return __list_count[vector[vector[cint64_t]]](self._cpp_obj, citem)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "picard/types.pyx":1748
 *     def count(self, item):
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef vector[cint64_t] citem = deref((<List__i64>item)._cpp_obj)
 */
  }

  /* "picard/types.pyx":1750
 *         if item is None:
 *             return 0
 *         cdef vector[cint64_t] citem = deref((<List__i64>item)._cpp_obj)             # <<<<<<<<<<<<<<
 *         return __list_count[vector[vector[cint64_t]]](self._cpp_obj, citem)
 * 
 */
  __pyx_v_citem = (*((struct __pyx_obj_6picard_5types_List__i64 *)__pyx_v_item)->_cpp_obj);

  /* "picard/types.pyx":1751
 *             return 0
 *         cdef vector[cint64_t] citem = deref((<List__i64>item)._cpp_obj)
 *         return __list_count[vector[vector[cint64_t]]](self._cpp_obj, citem)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(::thrift::py3::list_count<std::vector<std::vector<int64_t> > >(__pyx_v_self->_cpp_obj, __pyx_v_citem)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1746
 *         return found.value()
 * 
 *     def count(self, item):             # <<<<<<<<<<<<<<
 *         item = self._check_item_type(item)
 *         if item is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.List__List__i64.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1754
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__List__i64()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_15List__List__i64_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_15List__List__i64_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_15List__List__i64_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_15List__List__i64_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_15List__List__i64_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_15List__List__i64_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":1755
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__List__List__i64()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__List__List__i64()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1754
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__List__i64()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.List__List__i64.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1762
 * @__cython.auto_pickle(False)
 * cdef class List__BatchFeedResult(thrift.py3.types.List):
 *     def __init__(self, items=None):             # <<<<<<<<<<<<<<
 *         if isinstance(items, List__BatchFeedResult):
 *             self._cpp_obj = (<List__BatchFeedResult> items)._cpp_obj
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_21List__BatchFeedResult_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_21List__BatchFeedResult_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1762, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1762, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.List__BatchFeedResult.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_21List__BatchFeedResult___init__(((struct __pyx_obj_6picard_5types_List__BatchFeedResult *)__pyx_v_self), __pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_21List__BatchFeedResult___init__(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_items) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::shared_ptr<std::vector<::cpp2::BatchFeedResult> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":1763
 * cdef class List__BatchFeedResult(thrift.py3.types.List):
 *     def __init__(self, items=None):
 *         if isinstance(items, List__BatchFeedResult):             # <<<<<<<<<<<<<<
 *             self._cpp_obj = (<List__BatchFeedResult> items)._cpp_obj
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_items, __pyx_ptype_6picard_5types_List__BatchFeedResult); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1764
 *     def __init__(self, items=None):
 *         if isinstance(items, List__BatchFeedResult):
 *             self._cpp_obj = (<List__BatchFeedResult> items)._cpp_obj             # <<<<<<<<<<<<<<
 *         else:
 *             self._cpp_obj = List__BatchFeedResult._make_instance(items)
 */
    __pyx_t_3 = ((struct __pyx_obj_6picard_5types_List__BatchFeedResult *)__pyx_v_items)->_cpp_obj;
    __pyx_v_self->_cpp_obj = __pyx_t_3;

    /* "picard/types.pyx":1763
 * cdef class List__BatchFeedResult(thrift.py3.types.List):
 *     def __init__(self, items=None):
 *         if isinstance(items, List__BatchFeedResult):             # <<<<<<<<<<<<<<
 *             self._cpp_obj = (<List__BatchFeedResult> items)._cpp_obj
 *         else:
 */
    goto __pyx_L3;
  }

  /* "picard/types.pyx":1766
 *             self._cpp_obj = (<List__BatchFeedResult> items)._cpp_obj
 *         else:
 *             self._cpp_obj = List__BatchFeedResult._make_instance(items)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_6picard_5types_21List__BatchFeedResult__make_instance(__pyx_v_items); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1766, __pyx_L1_error)
    __pyx_v_self->_cpp_obj = __pyx_t_3;
  }
  __pyx_L3:;

  /* "picard/types.pyx":1762
 * @__cython.auto_pickle(False)
 * cdef class List__BatchFeedResult(thrift.py3.types.List):
 *     def __init__(self, items=None):             # <<<<<<<<<<<<<<
 *         if isinstance(items, List__BatchFeedResult):
 *             self._cpp_obj = (<List__BatchFeedResult> items)._cpp_obj
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.List__BatchFeedResult.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1769
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[vector[cBatchFeedResult]] c_items):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <List__BatchFeedResult>List__BatchFeedResult.__new__(List__BatchFeedResult)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 */

static PyObject *__pyx_f_6picard_5types_21List__BatchFeedResult_create(std::shared_ptr<std::vector<::cpp2::BatchFeedResult> >  __pyx_v_c_items) {
  struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":1770
 *     @staticmethod
 *     cdef create(shared_ptr[vector[cBatchFeedResult]] c_items):
 *         __fbthrift_inst = <List__BatchFeedResult>List__BatchFeedResult.__new__(List__BatchFeedResult)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_List__BatchFeedResult(((PyTypeObject *)__pyx_ptype_6picard_5types_List__BatchFeedResult), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1770, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_List__BatchFeedResult *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1771
 *     cdef create(shared_ptr[vector[cBatchFeedResult]] c_items):
 *         __fbthrift_inst = <List__BatchFeedResult>List__BatchFeedResult.__new__(List__BatchFeedResult)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<std::vector<::cpp2::BatchFeedResult> > >(__pyx_v_c_items);

  /* "picard/types.pyx":1772
 *         __fbthrift_inst = <List__BatchFeedResult>List__BatchFeedResult.__new__(List__BatchFeedResult)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(List__BatchFeedResult self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1769
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[vector[cBatchFeedResult]] c_items):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <List__BatchFeedResult>List__BatchFeedResult.__new__(List__BatchFeedResult)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.List__BatchFeedResult.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1774
 *         return __fbthrift_inst
 * 
 *     def __copy__(List__BatchFeedResult self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[cBatchFeedResult]] cpp_obj = make_shared[vector[cBatchFeedResult]](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_21List__BatchFeedResult_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_21List__BatchFeedResult_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_21List__BatchFeedResult_2__copy__(((struct __pyx_obj_6picard_5types_List__BatchFeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_21List__BatchFeedResult_2__copy__(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self) {
  std::shared_ptr<std::vector<::cpp2::BatchFeedResult> >  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<std::vector<::cpp2::BatchFeedResult> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":1775
 * 
 *     def __copy__(List__BatchFeedResult self):
 *         cdef shared_ptr[vector[cBatchFeedResult]] cpp_obj = make_shared[vector[cBatchFeedResult]](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<std::vector<::cpp2::BatchFeedResult> >((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1775, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1778
 *             deref(self._cpp_obj)
 *         )
 *         return List__BatchFeedResult.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_21List__BatchFeedResult_create(cython_std::move<std::shared_ptr<std::vector<::cpp2::BatchFeedResult> > >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1774
 *         return __fbthrift_inst
 * 
 *     def __copy__(List__BatchFeedResult self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[cBatchFeedResult]] cpp_obj = make_shared[vector[cBatchFeedResult]](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.List__BatchFeedResult.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1780
 *         return List__BatchFeedResult.create(cmove(cpp_obj))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return deref(self._cpp_obj).size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6picard_5types_21List__BatchFeedResult_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6picard_5types_21List__BatchFeedResult_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_21List__BatchFeedResult_4__len__(((struct __pyx_obj_6picard_5types_List__BatchFeedResult *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6picard_5types_21List__BatchFeedResult_4__len__(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "picard/types.pyx":1781
 * 
 *     def __len__(self):
 *         return deref(self._cpp_obj).size()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (*__pyx_v_self->_cpp_obj).size();
  goto __pyx_L0;

  /* "picard/types.pyx":1780
 *         return List__BatchFeedResult.create(cmove(cpp_obj))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return deref(self._cpp_obj).size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1784
 * 
 *     @staticmethod
 *     cdef shared_ptr[vector[cBatchFeedResult]] _make_instance(object items) except *:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[cBatchFeedResult]] c_inst = make_shared[vector[cBatchFeedResult]]()
 *         if items is not None:
 */

static std::shared_ptr<std::vector<::cpp2::BatchFeedResult> >  __pyx_f_6picard_5types_21List__BatchFeedResult__make_instance(PyObject *__pyx_v_items) {
  std::shared_ptr<std::vector<::cpp2::BatchFeedResult> >  __pyx_v_c_inst;
  PyObject *__pyx_v_item = NULL;
  std::shared_ptr<std::vector<::cpp2::BatchFeedResult> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<std::vector<::cpp2::BatchFeedResult> >  __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_instance", 0);

  /* "picard/types.pyx":1785
 *     @staticmethod
 *     cdef shared_ptr[vector[cBatchFeedResult]] _make_instance(object items) except *:
 *         cdef shared_ptr[vector[cBatchFeedResult]] c_inst = make_shared[vector[cBatchFeedResult]]()             # <<<<<<<<<<<<<<
 *         if items is not None:
 *             for item in items:
 */
  try {
    __pyx_t_1 = std::make_shared<std::vector<::cpp2::BatchFeedResult> >();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1785, __pyx_L1_error)
  }
  __pyx_v_c_inst = __pyx_t_1;

  /* "picard/types.pyx":1786
 *     cdef shared_ptr[vector[cBatchFeedResult]] _make_instance(object items) except *:
 *         cdef shared_ptr[vector[cBatchFeedResult]] c_inst = make_shared[vector[cBatchFeedResult]]()
 *         if items is not None:             # <<<<<<<<<<<<<<
 *             for item in items:
 *                 if not isinstance(item, BatchFeedResult):
 */
  __pyx_t_2 = (__pyx_v_items != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "picard/types.pyx":1787
 *         cdef shared_ptr[vector[cBatchFeedResult]] c_inst = make_shared[vector[cBatchFeedResult]]()
 *         if items is not None:
 *             for item in items:             # <<<<<<<<<<<<<<
 *                 if not isinstance(item, BatchFeedResult):
 *                     raise TypeError(f"{item!r} is not of type 'BatchFeedResult'")
 */
    if (likely(PyList_CheckExact(__pyx_v_items)) || PyTuple_CheckExact(__pyx_v_items)) {
      __pyx_t_4 = __pyx_v_items; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1787, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1787, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1787, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1787, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 1787, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1787, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1787, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "picard/types.pyx":1788
 *         if items is not None:
 *             for item in items:
 *                 if not isinstance(item, BatchFeedResult):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{item!r} is not of type 'BatchFeedResult'")
 *                 deref(c_inst).push_back(deref((<BatchFeedResult>item)._cpp_obj))
 */
      __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_item, __pyx_ptype_6picard_5types_BatchFeedResult); 
      __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
      if (unlikely(__pyx_t_2)) {

        /* "picard/types.pyx":1789
 *             for item in items:
 *                 if not isinstance(item, BatchFeedResult):
 *                     raise TypeError(f"{item!r} is not of type 'BatchFeedResult'")             # <<<<<<<<<<<<<<
 *                 deref(c_inst).push_back(deref((<BatchFeedResult>item)._cpp_obj))
 *         return c_inst
 */
        __pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_item), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1789, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_t_7, __pyx_kp_u_is_not_of_type_BatchFeedResult); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1789, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1789, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(0, 1789, __pyx_L1_error)

        /* "picard/types.pyx":1788
 *         if items is not None:
 *             for item in items:
 *                 if not isinstance(item, BatchFeedResult):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{item!r} is not of type 'BatchFeedResult'")
 *                 deref(c_inst).push_back(deref((<BatchFeedResult>item)._cpp_obj))
 */
      }

      /* "picard/types.pyx":1790
 *                 if not isinstance(item, BatchFeedResult):
 *                     raise TypeError(f"{item!r} is not of type 'BatchFeedResult'")
 *                 deref(c_inst).push_back(deref((<BatchFeedResult>item)._cpp_obj))             # <<<<<<<<<<<<<<
 *         return c_inst
 * 
 */
      try {
        (*__pyx_v_c_inst).push_back((*((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_v_item)->_cpp_obj));
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 1790, __pyx_L1_error)
      }

      /* "picard/types.pyx":1787
 *         cdef shared_ptr[vector[cBatchFeedResult]] c_inst = make_shared[vector[cBatchFeedResult]]()
 *         if items is not None:
 *             for item in items:             # <<<<<<<<<<<<<<
 *                 if not isinstance(item, BatchFeedResult):
 *                     raise TypeError(f"{item!r} is not of type 'BatchFeedResult'")
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "picard/types.pyx":1786
 *     cdef shared_ptr[vector[cBatchFeedResult]] _make_instance(object items) except *:
 *         cdef shared_ptr[vector[cBatchFeedResult]] c_inst = make_shared[vector[cBatchFeedResult]]()
 *         if items is not None:             # <<<<<<<<<<<<<<
 *             for item in items:
 *                 if not isinstance(item, BatchFeedResult):
 */
  }

  /* "picard/types.pyx":1791
 *                     raise TypeError(f"{item!r} is not of type 'BatchFeedResult'")
 *                 deref(c_inst).push_back(deref((<BatchFeedResult>item)._cpp_obj))
 *         return c_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_slice(self, slice index_obj):
 */
  __pyx_r = __pyx_v_c_inst;
  goto __pyx_L0;

  /* "picard/types.pyx":1784
 * 
 *     @staticmethod
 *     cdef shared_ptr[vector[cBatchFeedResult]] _make_instance(object items) except *:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[cBatchFeedResult]] c_inst = make_shared[vector[cBatchFeedResult]]()
 *         if items is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("picard.types.List__BatchFeedResult._make_instance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1793
 *         return c_inst
 * 
 *     cdef _get_slice(self, slice index_obj):             # <<<<<<<<<<<<<<
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 */

static PyObject *__pyx_f_6picard_5types_21List__BatchFeedResult__get_slice(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_index_obj) {
  int __pyx_v_start;
  int __pyx_v_stop;
  int __pyx_v_step;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_slice", 0);

  /* "picard/types.pyx":1795
 *     cdef _get_slice(self, slice index_obj):
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())             # <<<<<<<<<<<<<<
 *         return List__BatchFeedResult.create(
 *             __list_slice[vector[cBatchFeedResult]](self._cpp_obj, start, stop, step)
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((*__pyx_v_self->_cpp_obj).size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySlice_Type_indices, __pyx_v_index_obj, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 1795, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1795, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(0, 1795, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 1795, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1795, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_start = __pyx_t_7;
  __pyx_v_stop = __pyx_t_8;
  __pyx_v_step = __pyx_t_9;

  /* "picard/types.pyx":1796
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 *         return List__BatchFeedResult.create(             # <<<<<<<<<<<<<<
 *             __list_slice[vector[cBatchFeedResult]](self._cpp_obj, start, stop, step)
 *         )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":1797
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 *         return List__BatchFeedResult.create(
 *             __list_slice[vector[cBatchFeedResult]](self._cpp_obj, start, stop, step)             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_2 = __pyx_f_6picard_5types_21List__BatchFeedResult_create(::thrift::py3::list_slice<std::vector<::cpp2::BatchFeedResult> >(__pyx_v_self->_cpp_obj, __pyx_v_start, __pyx_v_stop, __pyx_v_step)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1793
 *         return c_inst
 * 
 *     cdef _get_slice(self, slice index_obj):             # <<<<<<<<<<<<<<
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.List__BatchFeedResult._get_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1800
 *         )
 * 
 *     cdef _get_single_item(self, size_t index):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cBatchFeedResult] citem
 *         __list_getitem(self._cpp_obj, index, citem)
 */

static PyObject *__pyx_f_6picard_5types_21List__BatchFeedResult__get_single_item(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self, size_t __pyx_v_index) {
  std::shared_ptr<::cpp2::BatchFeedResult>  __pyx_v_citem;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_single_item", 0);

  /* "picard/types.pyx":1802
 *     cdef _get_single_item(self, size_t index):
 *         cdef shared_ptr[cBatchFeedResult] citem
 *         __list_getitem(self._cpp_obj, index, citem)             # <<<<<<<<<<<<<<
 *         return BatchFeedResult.create(citem)
 * 
 */
  ::thrift::py3::list_getitem<std::vector<::cpp2::BatchFeedResult> >(__pyx_v_self->_cpp_obj, __pyx_v_index, __pyx_v_citem);

  /* "picard/types.pyx":1803
 *         cdef shared_ptr[cBatchFeedResult] citem
 *         __list_getitem(self._cpp_obj, index, citem)
 *         return BatchFeedResult.create(citem)             # <<<<<<<<<<<<<<
 * 
 *     cdef _check_item_type(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_6picard_5types_15BatchFeedResult_create(__pyx_v_citem); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1800
 *         )
 * 
 *     cdef _get_single_item(self, size_t index):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cBatchFeedResult] citem
 *         __list_getitem(self._cpp_obj, index, citem)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.List__BatchFeedResult._get_single_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1805
 *         return BatchFeedResult.create(citem)
 * 
 *     cdef _check_item_type(self, item):             # <<<<<<<<<<<<<<
 *         if not self or item is None:
 *             return
 */

static PyObject *__pyx_f_6picard_5types_21List__BatchFeedResult__check_item_type(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_item_type", 0);

  /* "picard/types.pyx":1806
 * 
 *     cdef _check_item_type(self, item):
 *         if not self or item is None:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(item, BatchFeedResult):
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1806, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_item == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "picard/types.pyx":1807
 *     cdef _check_item_type(self, item):
 *         if not self or item is None:
 *             return             # <<<<<<<<<<<<<<
 *         if isinstance(item, BatchFeedResult):
 *             return item
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "picard/types.pyx":1806
 * 
 *     cdef _check_item_type(self, item):
 *         if not self or item is None:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(item, BatchFeedResult):
 */
  }

  /* "picard/types.pyx":1808
 *         if not self or item is None:
 *             return
 *         if isinstance(item, BatchFeedResult):             # <<<<<<<<<<<<<<
 *             return item
 * 
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_item, __pyx_ptype_6picard_5types_BatchFeedResult); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1809
 *             return
 *         if isinstance(item, BatchFeedResult):
 *             return item             # <<<<<<<<<<<<<<
 * 
 *     def index(self, item, start=0, stop=None):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_item);
    __pyx_r = __pyx_v_item;
    goto __pyx_L0;

    /* "picard/types.pyx":1808
 *         if not self or item is None:
 *             return
 *         if isinstance(item, BatchFeedResult):             # <<<<<<<<<<<<<<
 *             return item
 * 
 */
  }

  /* "picard/types.pyx":1805
 *         return BatchFeedResult.create(citem)
 * 
 *     cdef _check_item_type(self, item):             # <<<<<<<<<<<<<<
 *         if not self or item is None:
 *             return
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.List__BatchFeedResult._check_item_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1811
 *             return item
 * 
 *     def index(self, item, start=0, stop=None):             # <<<<<<<<<<<<<<
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_21List__BatchFeedResult_7index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6picard_5types_21List__BatchFeedResult_7index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("index (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_start,&__pyx_n_s_stop,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stop);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "index") < 0)) __PYX_ERR(0, 1811, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_start = values[1];
    __pyx_v_stop = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("index", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1811, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.List__BatchFeedResult.index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_21List__BatchFeedResult_6index(((struct __pyx_obj_6picard_5types_List__BatchFeedResult *)__pyx_v_self), __pyx_v_item, __pyx_v_start, __pyx_v_stop);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_21List__BatchFeedResult_6index(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_start, PyObject *__pyx_v_stop) {
  PyObject *__pyx_v_err = NULL;
  __pyx_ctuple_int__and_int__and_int __pyx_v_indices;
  ::cpp2::BatchFeedResult __pyx_v_citem;
  std::optional<size_t>  __pyx_v_found;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __pyx_ctuple_int__and_int__and_int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("index", 0);
  __Pyx_INCREF(__pyx_v_item);

  /* "picard/types.pyx":1812
 * 
 *     def index(self, item, start=0, stop=None):
 *         err = ValueError(f'{item} is not in list')             # <<<<<<<<<<<<<<
 *         item = self._check_item_type(item)
 *         if item is None:
 */
  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_item, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u_is_not_in_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_err = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1813
 *     def index(self, item, start=0, stop=None):
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)             # <<<<<<<<<<<<<<
 *         if item is None:
 *             raise err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_List__BatchFeedResult *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._check_item_type(((struct __pyx_obj_6thrift_3py3_5types_List *)__pyx_v_self), __pyx_v_item); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_item, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1814
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 */
  __pyx_t_3 = (__pyx_v_item == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (unlikely(__pyx_t_4)) {

    /* "picard/types.pyx":1815
 *         item = self._check_item_type(item)
 *         if item is None:
 *             raise err             # <<<<<<<<<<<<<<
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 *         cdef cBatchFeedResult citem = deref((<BatchFeedResult>item)._cpp_obj)
 */
    __Pyx_Raise(__pyx_v_err, 0, 0, 0);
    __PYX_ERR(0, 1815, __pyx_L1_error)

    /* "picard/types.pyx":1814
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 */
  }

  /* "picard/types.pyx":1816
 *         if item is None:
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())             # <<<<<<<<<<<<<<
 *         cdef cBatchFeedResult citem = deref((<BatchFeedResult>item)._cpp_obj)
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[cBatchFeedResult]](self._cpp_obj, indices[0], indices[1], citem)
 */
  __pyx_t_2 = PySlice_New(__pyx_v_start, __pyx_v_stop, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_indices); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((*__pyx_v_self->_cpp_obj).size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_convert__from_py___pyx_ctuple_int__and_int__and_int(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1816, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_indices = __pyx_t_7;

  /* "picard/types.pyx":1817
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 *         cdef cBatchFeedResult citem = deref((<BatchFeedResult>item)._cpp_obj)             # <<<<<<<<<<<<<<
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[cBatchFeedResult]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():
 */
  __pyx_v_citem = (*((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_v_item)->_cpp_obj);

  /* "picard/types.pyx":1818
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 *         cdef cBatchFeedResult citem = deref((<BatchFeedResult>item)._cpp_obj)
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[cBatchFeedResult]](self._cpp_obj, indices[0], indices[1], citem)             # <<<<<<<<<<<<<<
 *         if not found.has_value():
 *             raise err
 */
  __pyx_v_found = ::thrift::py3::list_index<std::vector<::cpp2::BatchFeedResult> >(__pyx_v_self->_cpp_obj, __pyx_v_indices.f0, __pyx_v_indices.f1, __pyx_v_citem);

  /* "picard/types.pyx":1819
 *         cdef cBatchFeedResult citem = deref((<BatchFeedResult>item)._cpp_obj)
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[cBatchFeedResult]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():             # <<<<<<<<<<<<<<
 *             raise err
 *         return found.value()
 */
  __pyx_t_4 = ((!(__pyx_v_found.has_value() != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "picard/types.pyx":1820
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[cBatchFeedResult]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():
 *             raise err             # <<<<<<<<<<<<<<
 *         return found.value()
 * 
 */
    __Pyx_Raise(__pyx_v_err, 0, 0, 0);
    __PYX_ERR(0, 1820, __pyx_L1_error)

    /* "picard/types.pyx":1819
 *         cdef cBatchFeedResult citem = deref((<BatchFeedResult>item)._cpp_obj)
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[cBatchFeedResult]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():             # <<<<<<<<<<<<<<
 *             raise err
 *         return found.value()
 */
  }

  /* "picard/types.pyx":1821
 *         if not found.has_value():
 *             raise err
 *         return found.value()             # <<<<<<<<<<<<<<
 * 
 *     def count(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_found.value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1811
 *             return item
 * 
 *     def index(self, item, start=0, stop=None):             # <<<<<<<<<<<<<<
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.List__BatchFeedResult.index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1823
 *         return found.value()
 * 
 *     def count(self, item):             # <<<<<<<<<<<<<<
 *         item = self._check_item_type(item)
 *         if item is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_21List__BatchFeedResult_9count(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_pw_6picard_5types_21List__BatchFeedResult_9count(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_21List__BatchFeedResult_8count(((struct __pyx_obj_6picard_5types_List__BatchFeedResult *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_21List__BatchFeedResult_8count(struct __pyx_obj_6picard_5types_List__BatchFeedResult *__pyx_v_self, PyObject *__pyx_v_item) {
  ::cpp2::BatchFeedResult __pyx_v_citem;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);
  __Pyx_INCREF(__pyx_v_item);

  /* "picard/types.pyx":1824
 * 
 *     def count(self, item):
 *         item = self._check_item_type(item)             # <<<<<<<<<<<<<<
 *         if item is None:
 *             return 0
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_List__BatchFeedResult *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._check_item_type(((struct __pyx_obj_6thrift_3py3_5types_List *)__pyx_v_self), __pyx_v_item); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_item, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1825
 *     def count(self, item):
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef cBatchFeedResult citem = deref((<BatchFeedResult>item)._cpp_obj)
 */
  __pyx_t_2 = (__pyx_v_item == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "picard/types.pyx":1826
 *         item = self._check_item_type(item)
 *         if item is None:
 *             return 0             # <<<<<<<<<<<<<<
 *         cdef cBatchFeedResult citem = deref((<BatchFeedResult>item)._cpp_obj)
 *         return __list_count[vector[cBatchFeedResult]](self._cpp_obj, citem)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "picard/types.pyx":1825
 *     def count(self, item):
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef cBatchFeedResult citem = deref((<BatchFeedResult>item)._cpp_obj)
 */
  }

  /* "picard/types.pyx":1827
 *         if item is None:
 *             return 0
 *         cdef cBatchFeedResult citem = deref((<BatchFeedResult>item)._cpp_obj)             # <<<<<<<<<<<<<<
 *         return __list_count[vector[cBatchFeedResult]](self._cpp_obj, citem)
 * 
 */
  __pyx_v_citem = (*((struct __pyx_obj_6picard_5types_BatchFeedResult *)__pyx_v_item)->_cpp_obj);

  /* "picard/types.pyx":1828
 *             return 0
 *         cdef cBatchFeedResult citem = deref((<BatchFeedResult>item)._cpp_obj)
 *         return __list_count[vector[cBatchFeedResult]](self._cpp_obj, citem)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(::thrift::py3::list_count<std::vector<::cpp2::BatchFeedResult> >(__pyx_v_self->_cpp_obj, __pyx_v_citem)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1823
 *         return found.value()
 * 
 *     def count(self, item):             # <<<<<<<<<<<<<<
 *         item = self._check_item_type(item)
 *         if item is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.List__BatchFeedResult.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1831
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__BatchFeedResult()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_21List__BatchFeedResult_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_21List__BatchFeedResult_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_21List__BatchFeedResult_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_21List__BatchFeedResult_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_21List__BatchFeedResult_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_21List__BatchFeedResult_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":1832
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__List__BatchFeedResult()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__List__BatchFeedResult()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1831
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__BatchFeedResult()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.List__BatchFeedResult.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1839
 * @__cython.auto_pickle(False)
 * cdef class Map__string_string(thrift.py3.types.Map):
 *     def __init__(self, items=None):             # <<<<<<<<<<<<<<
 *         if isinstance(items, Map__string_string):
 *             self._cpp_obj = (<Map__string_string> items)._cpp_obj
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_18Map__string_string_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_18Map__string_string_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1839, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1839, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.Map__string_string.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_18Map__string_string___init__(((struct __pyx_obj_6picard_5types_Map__string_string *)__pyx_v_self), __pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_18Map__string_string___init__(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self, PyObject *__pyx_v_items) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::shared_ptr<std::map<std::string,std::string> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":1840
 * cdef class Map__string_string(thrift.py3.types.Map):
 *     def __init__(self, items=None):
 *         if isinstance(items, Map__string_string):             # <<<<<<<<<<<<<<
 *             self._cpp_obj = (<Map__string_string> items)._cpp_obj
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_items, __pyx_ptype_6picard_5types_Map__string_string); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1841
 *     def __init__(self, items=None):
 *         if isinstance(items, Map__string_string):
 *             self._cpp_obj = (<Map__string_string> items)._cpp_obj             # <<<<<<<<<<<<<<
 *         else:
 *             self._cpp_obj = Map__string_string._make_instance(items)
 */
    __pyx_t_3 = ((struct __pyx_obj_6picard_5types_Map__string_string *)__pyx_v_items)->_cpp_obj;
    __pyx_v_self->_cpp_obj = __pyx_t_3;

    /* "picard/types.pyx":1840
 * cdef class Map__string_string(thrift.py3.types.Map):
 *     def __init__(self, items=None):
 *         if isinstance(items, Map__string_string):             # <<<<<<<<<<<<<<
 *             self._cpp_obj = (<Map__string_string> items)._cpp_obj
 *         else:
 */
    goto __pyx_L3;
  }

  /* "picard/types.pyx":1843
 *             self._cpp_obj = (<Map__string_string> items)._cpp_obj
 *         else:
 *             self._cpp_obj = Map__string_string._make_instance(items)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_6picard_5types_18Map__string_string__make_instance(__pyx_v_items); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1843, __pyx_L1_error)
    __pyx_v_self->_cpp_obj = __pyx_t_3;
  }
  __pyx_L3:;

  /* "picard/types.pyx":1839
 * @__cython.auto_pickle(False)
 * cdef class Map__string_string(thrift.py3.types.Map):
 *     def __init__(self, items=None):             # <<<<<<<<<<<<<<
 *         if isinstance(items, Map__string_string):
 *             self._cpp_obj = (<Map__string_string> items)._cpp_obj
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_string.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1846
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cmap[string,string]] c_items):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <Map__string_string>Map__string_string.__new__(Map__string_string)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 */

static PyObject *__pyx_f_6picard_5types_18Map__string_string_create(std::shared_ptr<std::map<std::string,std::string> >  __pyx_v_c_items) {
  struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":1847
 *     @staticmethod
 *     cdef create(shared_ptr[cmap[string,string]] c_items):
 *         __fbthrift_inst = <Map__string_string>Map__string_string.__new__(Map__string_string)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_Map__string_string(((PyTypeObject *)__pyx_ptype_6picard_5types_Map__string_string), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1847, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_Map__string_string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1848
 *     cdef create(shared_ptr[cmap[string,string]] c_items):
 *         __fbthrift_inst = <Map__string_string>Map__string_string.__new__(Map__string_string)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<std::map<std::string,std::string> > >(__pyx_v_c_items);

  /* "picard/types.pyx":1849
 *         __fbthrift_inst = <Map__string_string>Map__string_string.__new__(Map__string_string)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(Map__string_string self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1846
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cmap[string,string]] c_items):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <Map__string_string>Map__string_string.__new__(Map__string_string)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.Map__string_string.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1851
 *         return __fbthrift_inst
 * 
 *     def __copy__(Map__string_string self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cmap[string,string]] cpp_obj = make_shared[cmap[string,string]](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18Map__string_string_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18Map__string_string_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18Map__string_string_2__copy__(((struct __pyx_obj_6picard_5types_Map__string_string *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18Map__string_string_2__copy__(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self) {
  std::shared_ptr<std::map<std::string,std::string> >  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<std::map<std::string,std::string> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":1852
 * 
 *     def __copy__(Map__string_string self):
 *         cdef shared_ptr[cmap[string,string]] cpp_obj = make_shared[cmap[string,string]](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<std::map<std::string,std::string> >((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1852, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1855
 *             deref(self._cpp_obj)
 *         )
 *         return Map__string_string.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_18Map__string_string_create(cython_std::move<std::shared_ptr<std::map<std::string,std::string> > >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1851
 *         return __fbthrift_inst
 * 
 *     def __copy__(Map__string_string self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cmap[string,string]] cpp_obj = make_shared[cmap[string,string]](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.Map__string_string.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1857
 *         return Map__string_string.create(cmove(cpp_obj))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return deref(self._cpp_obj).size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6picard_5types_18Map__string_string_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6picard_5types_18Map__string_string_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18Map__string_string_4__len__(((struct __pyx_obj_6picard_5types_Map__string_string *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6picard_5types_18Map__string_string_4__len__(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "picard/types.pyx":1858
 * 
 *     def __len__(self):
 *         return deref(self._cpp_obj).size()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (*__pyx_v_self->_cpp_obj).size();
  goto __pyx_L0;

  /* "picard/types.pyx":1857
 *         return Map__string_string.create(cmove(cpp_obj))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return deref(self._cpp_obj).size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1861
 * 
 *     @staticmethod
 *     cdef shared_ptr[cmap[string,string]] _make_instance(object items) except *:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cmap[string,string]] c_inst = make_shared[cmap[string,string]]()
 *         if items is not None:
 */

static std::shared_ptr<std::map<std::string,std::string> >  __pyx_f_6picard_5types_18Map__string_string__make_instance(PyObject *__pyx_v_items) {
  std::shared_ptr<std::map<std::string,std::string> >  __pyx_v_c_inst;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_item = NULL;
  std::shared_ptr<std::map<std::string,std::string> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<std::map<std::string,std::string> >  __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  std::string __pyx_t_12;
  std::string __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_instance", 0);

  /* "picard/types.pyx":1862
 *     @staticmethod
 *     cdef shared_ptr[cmap[string,string]] _make_instance(object items) except *:
 *         cdef shared_ptr[cmap[string,string]] c_inst = make_shared[cmap[string,string]]()             # <<<<<<<<<<<<<<
 *         if items is not None:
 *             for key, item in items.items():
 */
  try {
    __pyx_t_1 = std::make_shared<std::map<std::string,std::string> >();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1862, __pyx_L1_error)
  }
  __pyx_v_c_inst = __pyx_t_1;

  /* "picard/types.pyx":1863
 *     cdef shared_ptr[cmap[string,string]] _make_instance(object items) except *:
 *         cdef shared_ptr[cmap[string,string]] c_inst = make_shared[cmap[string,string]]()
 *         if items is not None:             # <<<<<<<<<<<<<<
 *             for key, item in items.items():
 *                 if not isinstance(key, str):
 */
  __pyx_t_2 = (__pyx_v_items != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "picard/types.pyx":1864
 *         cdef shared_ptr[cmap[string,string]] c_inst = make_shared[cmap[string,string]]()
 *         if items is not None:
 *             for key, item in items.items():             # <<<<<<<<<<<<<<
 *                 if not isinstance(key, str):
 *                     raise TypeError(f"{key!r} is not of type str")
 */
    __pyx_t_5 = 0;
    if (unlikely(__pyx_v_items == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 1864, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_items, 0, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1864, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4);
    __pyx_t_4 = __pyx_t_8;
    __pyx_t_8 = 0;
    while (1) {
      __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_6, &__pyx_t_5, &__pyx_t_8, &__pyx_t_9, NULL, __pyx_t_7);
      if (unlikely(__pyx_t_10 == 0)) break;
      if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 1864, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "picard/types.pyx":1865
 *         if items is not None:
 *             for key, item in items.items():
 *                 if not isinstance(key, str):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if not isinstance(item, str):
 */
      __pyx_t_3 = PyUnicode_Check(__pyx_v_key); 
      __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
      if (unlikely(__pyx_t_2)) {

        /* "picard/types.pyx":1866
 *             for key, item in items.items():
 *                 if not isinstance(key, str):
 *                     raise TypeError(f"{key!r} is not of type str")             # <<<<<<<<<<<<<<
 *                 if not isinstance(item, str):
 *                     raise TypeError(f"{item!r} is not of type str")
 */
        __pyx_t_9 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_key), __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1866, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_t_9, __pyx_kp_u_is_not_of_type_str); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1866, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1866, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __PYX_ERR(0, 1866, __pyx_L1_error)

        /* "picard/types.pyx":1865
 *         if items is not None:
 *             for key, item in items.items():
 *                 if not isinstance(key, str):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if not isinstance(item, str):
 */
      }

      /* "picard/types.pyx":1867
 *                 if not isinstance(key, str):
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if not isinstance(item, str):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{item!r} is not of type str")
 * 
 */
      __pyx_t_2 = PyUnicode_Check(__pyx_v_item); 
      __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
      if (unlikely(__pyx_t_3)) {

        /* "picard/types.pyx":1868
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if not isinstance(item, str):
 *                     raise TypeError(f"{item!r} is not of type str")             # <<<<<<<<<<<<<<
 * 
 *                 deref(c_inst)[key.encode('UTF-8')] = item.encode('UTF-8')
 */
        __pyx_t_9 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_item), __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_t_9, __pyx_kp_u_is_not_of_type_str); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1868, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __PYX_ERR(0, 1868, __pyx_L1_error)

        /* "picard/types.pyx":1867
 *                 if not isinstance(key, str):
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if not isinstance(item, str):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{item!r} is not of type str")
 * 
 */
      }

      /* "picard/types.pyx":1870
 *                     raise TypeError(f"{item!r} is not of type str")
 * 
 *                 deref(c_inst)[key.encode('UTF-8')] = item.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         return c_inst
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_item, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_11, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_u_UTF_8);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_t_9); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_11, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_u_UTF_8);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_13 = __pyx_convert_string_from_py_std__in_string(__pyx_t_9); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      ((*__pyx_v_c_inst)[__pyx_t_13]) = __pyx_t_12;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "picard/types.pyx":1863
 *     cdef shared_ptr[cmap[string,string]] _make_instance(object items) except *:
 *         cdef shared_ptr[cmap[string,string]] c_inst = make_shared[cmap[string,string]]()
 *         if items is not None:             # <<<<<<<<<<<<<<
 *             for key, item in items.items():
 *                 if not isinstance(key, str):
 */
  }

  /* "picard/types.pyx":1871
 * 
 *                 deref(c_inst)[key.encode('UTF-8')] = item.encode('UTF-8')
 *         return c_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef _check_key_type(self, key):
 */
  __pyx_r = __pyx_v_c_inst;
  goto __pyx_L0;

  /* "picard/types.pyx":1861
 * 
 *     @staticmethod
 *     cdef shared_ptr[cmap[string,string]] _make_instance(object items) except *:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cmap[string,string]] c_inst = make_shared[cmap[string,string]]()
 *         if items is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("picard.types.Map__string_string._make_instance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1873
 *         return c_inst
 * 
 *     cdef _check_key_type(self, key):             # <<<<<<<<<<<<<<
 *         if not self or key is None:
 *             return
 */

static PyObject *__pyx_f_6picard_5types_18Map__string_string__check_key_type(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_key_type", 0);

  /* "picard/types.pyx":1874
 * 
 *     cdef _check_key_type(self, key):
 *         if not self or key is None:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(key, str):
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1874, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_key == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "picard/types.pyx":1875
 *     cdef _check_key_type(self, key):
 *         if not self or key is None:
 *             return             # <<<<<<<<<<<<<<
 *         if isinstance(key, str):
 *             return key
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "picard/types.pyx":1874
 * 
 *     cdef _check_key_type(self, key):
 *         if not self or key is None:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(key, str):
 */
  }

  /* "picard/types.pyx":1876
 *         if not self or key is None:
 *             return
 *         if isinstance(key, str):             # <<<<<<<<<<<<<<
 *             return key
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_key); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1877
 *             return
 *         if isinstance(key, str):
 *             return key             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_key);
    __pyx_r = __pyx_v_key;
    goto __pyx_L0;

    /* "picard/types.pyx":1876
 *         if not self or key is None:
 *             return
 *         if isinstance(key, str):             # <<<<<<<<<<<<<<
 *             return key
 * 
 */
  }

  /* "picard/types.pyx":1873
 *         return c_inst
 * 
 *     cdef _check_key_type(self, key):             # <<<<<<<<<<<<<<
 *         if not self or key is None:
 *             return
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_string._check_key_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1879
 *             return key
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18Map__string_string_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18Map__string_string_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18Map__string_string_6__getitem__(((struct __pyx_obj_6picard_5types_Map__string_string *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18Map__string_string_6__getitem__(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_v_err = NULL;
  std::string __pyx_v_ckey;
  std::string __pyx_v_citem;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "picard/types.pyx":1880
 * 
 *     def __getitem__(self, key):
 *         err = KeyError(f'{key}')             # <<<<<<<<<<<<<<
 *         key = self._check_key_type(key)
 *         if key is None:
 */
  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_key, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_err = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1881
 *     def __getitem__(self, key):
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)             # <<<<<<<<<<<<<<
 *         if key is None:
 *             raise err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_6picard_5types_Map__string_string *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._check_key_type(((struct __pyx_obj_6thrift_3py3_5types_Map *)__pyx_v_self), __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1882
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)
 *         if key is None:             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')
 */
  __pyx_t_3 = (__pyx_v_key == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (unlikely(__pyx_t_4)) {

    /* "picard/types.pyx":1883
 *         key = self._check_key_type(key)
 *         if key is None:
 *             raise err             # <<<<<<<<<<<<<<
 *         cdef string ckey = key.encode('UTF-8')
 *         if not __map_contains(self._cpp_obj, ckey):
 */
    __Pyx_Raise(__pyx_v_err, 0, 0, 0);
    __PYX_ERR(0, 1883, __pyx_L1_error)

    /* "picard/types.pyx":1882
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)
 *         if key is None:             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')
 */
  }

  /* "picard/types.pyx":1884
 *         if key is None:
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         if not __map_contains(self._cpp_obj, ckey):
 *             raise err
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u_UTF_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1884, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ckey = __pyx_t_6;

  /* "picard/types.pyx":1885
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')
 *         if not __map_contains(self._cpp_obj, ckey):             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef string citem
 */
  __pyx_t_4 = ((!(::thrift::py3::map_contains<std::map<std::string,std::string> >(__pyx_v_self->_cpp_obj, __pyx_v_ckey) != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "picard/types.pyx":1886
 *         cdef string ckey = key.encode('UTF-8')
 *         if not __map_contains(self._cpp_obj, ckey):
 *             raise err             # <<<<<<<<<<<<<<
 *         cdef string citem
 *         __map_getitem(self._cpp_obj, ckey, citem)
 */
    __Pyx_Raise(__pyx_v_err, 0, 0, 0);
    __PYX_ERR(0, 1886, __pyx_L1_error)

    /* "picard/types.pyx":1885
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')
 *         if not __map_contains(self._cpp_obj, ckey):             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef string citem
 */
  }

  /* "picard/types.pyx":1888
 *             raise err
 *         cdef string citem
 *         __map_getitem(self._cpp_obj, ckey, citem)             # <<<<<<<<<<<<<<
 *         return bytes(citem).decode('UTF-8')
 * 
 */
  ::thrift::py3::map_getitem<std::map<std::string,std::string> >(__pyx_v_self->_cpp_obj, __pyx_v_ckey, __pyx_v_citem);

  /* "picard/types.pyx":1889
 *         cdef string citem
 *         __map_getitem(self._cpp_obj, ckey, citem)
 *         return bytes(citem).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_citem); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_decode_bytes(__pyx_t_1, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1879
 *             return key
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.Map__string_string.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6picard_5types_18Map__string_string_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "picard/types.pyx":1891
 *         return bytes(citem).decode('UTF-8')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18Map__string_string_9__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18Map__string_string_9__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18Map__string_string_8__iter__(((struct __pyx_obj_6picard_5types_Map__string_string *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18Map__string_string_8__iter__(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__ *)__pyx_tp_new_6picard_5types___pyx_scope_struct_6___iter__(__pyx_ptype_6picard_5types___pyx_scope_struct_6___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1891, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6picard_5types_18Map__string_string_10generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_Map__string_string___iter, __pyx_n_s_picard_types); if (unlikely(!gen)) __PYX_ERR(0, 1891, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_string.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6picard_5types_18Map__string_string_10generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__ *__pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1891, __pyx_L1_error)

  /* "picard/types.pyx":1892
 * 
 *     def __iter__(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_self)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1892, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1893
 *     def __iter__(self):
 *         if not self:
 *             return             # <<<<<<<<<<<<<<
 *         cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)
 *         cdef string citem
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "picard/types.pyx":1892
 * 
 *     def __iter__(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)
 */
  }

  /* "picard/types.pyx":1894
 *         if not self:
 *             return
 *         cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)             # <<<<<<<<<<<<<<
 *         cdef string citem
 *         for i in range(deref(self._cpp_obj).size()):
 */
  __pyx_cur_scope->__pyx_v_itr = ::thrift::py3::map_iter<std::map<std::string,std::string> > (__pyx_cur_scope->__pyx_v_self->_cpp_obj);

  /* "picard/types.pyx":1896
 *         cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)
 *         cdef string citem
 *         for i in range(deref(self._cpp_obj).size()):             # <<<<<<<<<<<<<<
 *             itr.genNextKey(self._cpp_obj, citem)
 *             yield bytes(citem).decode('UTF-8')
 */
  __pyx_t_3 = (*__pyx_cur_scope->__pyx_v_self->_cpp_obj).size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_5;

    /* "picard/types.pyx":1897
 *         cdef string citem
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextKey(self._cpp_obj, citem)             # <<<<<<<<<<<<<<
 *             yield bytes(citem).decode('UTF-8')
 * 
 */
    __pyx_cur_scope->__pyx_v_itr.genNextKey(__pyx_cur_scope->__pyx_v_self->_cpp_obj, __pyx_cur_scope->__pyx_v_citem);

    /* "picard/types.pyx":1898
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextKey(self._cpp_obj, citem)
 *             yield bytes(citem).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, key):
 */
    __pyx_t_6 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_cur_scope->__pyx_v_citem); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_decode_bytes(__pyx_t_7, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1898, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1898, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "picard/types.pyx":1891
 *         return bytes(citem).decode('UTF-8')
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1900
 *             yield bytes(citem).decode('UTF-8')
 * 
 *     def __contains__(self, key):             # <<<<<<<<<<<<<<
 *         key = self._check_key_type(key)
 *         if key is None:
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_18Map__string_string_12__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static int __pyx_pw_6picard_5types_18Map__string_string_12__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18Map__string_string_11__contains__(((struct __pyx_obj_6picard_5types_Map__string_string *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_18Map__string_string_11__contains__(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self, PyObject *__pyx_v_key) {
  std::string __pyx_v_ckey;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__contains__", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "picard/types.pyx":1901
 * 
 *     def __contains__(self, key):
 *         key = self._check_key_type(key)             # <<<<<<<<<<<<<<
 *         if key is None:
 *             return False
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_Map__string_string *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._check_key_type(((struct __pyx_obj_6thrift_3py3_5types_Map *)__pyx_v_self), __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1902
 *     def __contains__(self, key):
 *         key = self._check_key_type(key)
 *         if key is None:             # <<<<<<<<<<<<<<
 *             return False
 *         cdef string ckey = key.encode('UTF-8')
 */
  __pyx_t_2 = (__pyx_v_key == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "picard/types.pyx":1903
 *         key = self._check_key_type(key)
 *         if key is None:
 *             return False             # <<<<<<<<<<<<<<
 *         cdef string ckey = key.encode('UTF-8')
 *         return __map_contains(self._cpp_obj, ckey)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":1902
 *     def __contains__(self, key):
 *         key = self._check_key_type(key)
 *         if key is None:             # <<<<<<<<<<<<<<
 *             return False
 *         cdef string ckey = key.encode('UTF-8')
 */
  }

  /* "picard/types.pyx":1904
 *         if key is None:
 *             return False
 *         cdef string ckey = key.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         return __map_contains(self._cpp_obj, ckey)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_UTF_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1904, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ckey = __pyx_t_6;

  /* "picard/types.pyx":1905
 *             return False
 *         cdef string ckey = key.encode('UTF-8')
 *         return __map_contains(self._cpp_obj, ckey)             # <<<<<<<<<<<<<<
 * 
 *     def values(self):
 */
  __pyx_r = ::thrift::py3::map_contains<std::map<std::string,std::string> >(__pyx_v_self->_cpp_obj, __pyx_v_ckey);
  goto __pyx_L0;

  /* "picard/types.pyx":1900
 *             yield bytes(citem).decode('UTF-8')
 * 
 *     def __contains__(self, key):             # <<<<<<<<<<<<<<
 *         key = self._check_key_type(key)
 *         if key is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.Map__string_string.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6picard_5types_18Map__string_string_15generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "picard/types.pyx":1907
 *         return __map_contains(self._cpp_obj, ckey)
 * 
 *     def values(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18Map__string_string_14values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18Map__string_string_14values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("values (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18Map__string_string_13values(((struct __pyx_obj_6picard_5types_Map__string_string *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18Map__string_string_13values(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("values", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values *)__pyx_tp_new_6picard_5types___pyx_scope_struct_7_values(__pyx_ptype_6picard_5types___pyx_scope_struct_7_values, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1907, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6picard_5types_18Map__string_string_15generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_values, __pyx_n_s_Map__string_string_values, __pyx_n_s_picard_types); if (unlikely(!gen)) __PYX_ERR(0, 1907, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_string.values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6picard_5types_18Map__string_string_15generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values *__pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("values", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1907, __pyx_L1_error)

  /* "picard/types.pyx":1908
 * 
 *     def values(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_self)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1908, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1909
 *     def values(self):
 *         if not self:
 *             return             # <<<<<<<<<<<<<<
 *         cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)
 *         cdef string citem
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "picard/types.pyx":1908
 * 
 *     def values(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)
 */
  }

  /* "picard/types.pyx":1910
 *         if not self:
 *             return
 *         cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)             # <<<<<<<<<<<<<<
 *         cdef string citem
 *         for i in range(deref(self._cpp_obj).size()):
 */
  __pyx_cur_scope->__pyx_v_itr = ::thrift::py3::map_iter<std::map<std::string,std::string> > (__pyx_cur_scope->__pyx_v_self->_cpp_obj);

  /* "picard/types.pyx":1912
 *         cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)
 *         cdef string citem
 *         for i in range(deref(self._cpp_obj).size()):             # <<<<<<<<<<<<<<
 *             itr.genNextValue(self._cpp_obj, citem)
 *             yield bytes(citem).decode('UTF-8')
 */
  __pyx_t_3 = (*__pyx_cur_scope->__pyx_v_self->_cpp_obj).size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_5;

    /* "picard/types.pyx":1913
 *         cdef string citem
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextValue(self._cpp_obj, citem)             # <<<<<<<<<<<<<<
 *             yield bytes(citem).decode('UTF-8')
 * 
 */
    __pyx_cur_scope->__pyx_v_itr.genNextValue(__pyx_cur_scope->__pyx_v_self->_cpp_obj, __pyx_cur_scope->__pyx_v_citem);

    /* "picard/types.pyx":1914
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextValue(self._cpp_obj, citem)
 *             yield bytes(citem).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     def items(self):
 */
    __pyx_t_6 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_cur_scope->__pyx_v_citem); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_decode_bytes(__pyx_t_7, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1914, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "picard/types.pyx":1907
 *         return __map_contains(self._cpp_obj, ckey)
 * 
 *     def values(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6picard_5types_18Map__string_string_18generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "picard/types.pyx":1916
 *             yield bytes(citem).decode('UTF-8')
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18Map__string_string_17items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_18Map__string_string_17items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_18Map__string_string_16items(((struct __pyx_obj_6picard_5types_Map__string_string *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18Map__string_string_16items(struct __pyx_obj_6picard_5types_Map__string_string *__pyx_v_self) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("items", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items *)__pyx_tp_new_6picard_5types___pyx_scope_struct_8_items(__pyx_ptype_6picard_5types___pyx_scope_struct_8_items, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1916, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6picard_5types_18Map__string_string_18generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_items, __pyx_n_s_Map__string_string_items, __pyx_n_s_picard_types); if (unlikely(!gen)) __PYX_ERR(0, 1916, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_string.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6picard_5types_18Map__string_string_18generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items *__pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1916, __pyx_L1_error)

  /* "picard/types.pyx":1917
 * 
 *     def items(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_self)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1917, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1918
 *     def items(self):
 *         if not self:
 *             return             # <<<<<<<<<<<<<<
 *         cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)
 *         cdef string ckey
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "picard/types.pyx":1917
 * 
 *     def items(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)
 */
  }

  /* "picard/types.pyx":1919
 *         if not self:
 *             return
 *         cdef __map_iter[cmap[string,string]] itr = __map_iter[cmap[string,string]](self._cpp_obj)             # <<<<<<<<<<<<<<
 *         cdef string ckey
 *         cdef string citem
 */
  __pyx_cur_scope->__pyx_v_itr = ::thrift::py3::map_iter<std::map<std::string,std::string> > (__pyx_cur_scope->__pyx_v_self->_cpp_obj);

  /* "picard/types.pyx":1922
 *         cdef string ckey
 *         cdef string citem
 *         for i in range(deref(self._cpp_obj).size()):             # <<<<<<<<<<<<<<
 *             itr.genNextItem(self._cpp_obj, ckey, citem)
 *             yield (ckey.data().decode('UTF-8'), bytes(citem).decode('UTF-8'))
 */
  __pyx_t_3 = (*__pyx_cur_scope->__pyx_v_self->_cpp_obj).size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_5;

    /* "picard/types.pyx":1923
 *         cdef string citem
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextItem(self._cpp_obj, ckey, citem)             # <<<<<<<<<<<<<<
 *             yield (ckey.data().decode('UTF-8'), bytes(citem).decode('UTF-8'))
 * 
 */
    __pyx_cur_scope->__pyx_v_itr.genNextItem(__pyx_cur_scope->__pyx_v_self->_cpp_obj, __pyx_cur_scope->__pyx_v_ckey, __pyx_cur_scope->__pyx_v_citem);

    /* "picard/types.pyx":1924
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextItem(self._cpp_obj, ckey, citem)
 *             yield (ckey.data().decode('UTF-8'), bytes(citem).decode('UTF-8'))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_6 = __pyx_cur_scope->__pyx_v_ckey.data();
    __pyx_t_7 = __Pyx_decode_c_string(__pyx_t_6, 0, strlen(__pyx_t_6), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1924, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_cur_scope->__pyx_v_citem); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1924, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1924, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_decode_bytes(__pyx_t_9, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1924, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1924, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1924, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "picard/types.pyx":1916
 *             yield bytes(citem).decode('UTF-8')
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1927
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__Map__string_string()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_18Map__string_string_20__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_18Map__string_string_20__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18Map__string_string_20__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_18Map__string_string_20__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_18Map__string_string_19__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_18Map__string_string_19__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":1928
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__Map__string_string()             # <<<<<<<<<<<<<<
 * 
 * Mapping.register(Map__string_string)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__Map__string_string()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1927
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__Map__string_string()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.Map__string_string.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1934
 * @__cython.auto_pickle(False)
 * cdef class Map__string_ColumnType(thrift.py3.types.Map):
 *     def __init__(self, items=None):             # <<<<<<<<<<<<<<
 *         if isinstance(items, Map__string_ColumnType):
 *             self._cpp_obj = (<Map__string_ColumnType> items)._cpp_obj
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_22Map__string_ColumnType_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_22Map__string_ColumnType_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 1934, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1934, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.Map__string_ColumnType.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_22Map__string_ColumnType___init__(((struct __pyx_obj_6picard_5types_Map__string_ColumnType *)__pyx_v_self), __pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_22Map__string_ColumnType___init__(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self, PyObject *__pyx_v_items) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::shared_ptr<std::map<std::string,::cpp2::ColumnType> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":1935
 * cdef class Map__string_ColumnType(thrift.py3.types.Map):
 *     def __init__(self, items=None):
 *         if isinstance(items, Map__string_ColumnType):             # <<<<<<<<<<<<<<
 *             self._cpp_obj = (<Map__string_ColumnType> items)._cpp_obj
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_items, __pyx_ptype_6picard_5types_Map__string_ColumnType); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1936
 *     def __init__(self, items=None):
 *         if isinstance(items, Map__string_ColumnType):
 *             self._cpp_obj = (<Map__string_ColumnType> items)._cpp_obj             # <<<<<<<<<<<<<<
 *         else:
 *             self._cpp_obj = Map__string_ColumnType._make_instance(items)
 */
    __pyx_t_3 = ((struct __pyx_obj_6picard_5types_Map__string_ColumnType *)__pyx_v_items)->_cpp_obj;
    __pyx_v_self->_cpp_obj = __pyx_t_3;

    /* "picard/types.pyx":1935
 * cdef class Map__string_ColumnType(thrift.py3.types.Map):
 *     def __init__(self, items=None):
 *         if isinstance(items, Map__string_ColumnType):             # <<<<<<<<<<<<<<
 *             self._cpp_obj = (<Map__string_ColumnType> items)._cpp_obj
 *         else:
 */
    goto __pyx_L3;
  }

  /* "picard/types.pyx":1938
 *             self._cpp_obj = (<Map__string_ColumnType> items)._cpp_obj
 *         else:
 *             self._cpp_obj = Map__string_ColumnType._make_instance(items)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_6picard_5types_22Map__string_ColumnType__make_instance(__pyx_v_items); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1938, __pyx_L1_error)
    __pyx_v_self->_cpp_obj = __pyx_t_3;
  }
  __pyx_L3:;

  /* "picard/types.pyx":1934
 * @__cython.auto_pickle(False)
 * cdef class Map__string_ColumnType(thrift.py3.types.Map):
 *     def __init__(self, items=None):             # <<<<<<<<<<<<<<
 *         if isinstance(items, Map__string_ColumnType):
 *             self._cpp_obj = (<Map__string_ColumnType> items)._cpp_obj
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_ColumnType.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1941
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cmap[string,cColumnType]] c_items):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <Map__string_ColumnType>Map__string_ColumnType.__new__(Map__string_ColumnType)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 */

static PyObject *__pyx_f_6picard_5types_22Map__string_ColumnType_create(std::shared_ptr<std::map<std::string,::cpp2::ColumnType> >  __pyx_v_c_items) {
  struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":1942
 *     @staticmethod
 *     cdef create(shared_ptr[cmap[string,cColumnType]] c_items):
 *         __fbthrift_inst = <Map__string_ColumnType>Map__string_ColumnType.__new__(Map__string_ColumnType)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_Map__string_ColumnType(((PyTypeObject *)__pyx_ptype_6picard_5types_Map__string_ColumnType), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1942, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_Map__string_ColumnType *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1943
 *     cdef create(shared_ptr[cmap[string,cColumnType]] c_items):
 *         __fbthrift_inst = <Map__string_ColumnType>Map__string_ColumnType.__new__(Map__string_ColumnType)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<std::map<std::string,::cpp2::ColumnType> > >(__pyx_v_c_items);

  /* "picard/types.pyx":1944
 *         __fbthrift_inst = <Map__string_ColumnType>Map__string_ColumnType.__new__(Map__string_ColumnType)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(Map__string_ColumnType self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":1941
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cmap[string,cColumnType]] c_items):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <Map__string_ColumnType>Map__string_ColumnType.__new__(Map__string_ColumnType)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.Map__string_ColumnType.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1946
 *         return __fbthrift_inst
 * 
 *     def __copy__(Map__string_ColumnType self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cmap[string,cColumnType]] cpp_obj = make_shared[cmap[string,cColumnType]](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_22Map__string_ColumnType_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_22Map__string_ColumnType_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_22Map__string_ColumnType_2__copy__(((struct __pyx_obj_6picard_5types_Map__string_ColumnType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_22Map__string_ColumnType_2__copy__(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self) {
  std::shared_ptr<std::map<std::string,::cpp2::ColumnType> >  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<std::map<std::string,::cpp2::ColumnType> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":1947
 * 
 *     def __copy__(Map__string_ColumnType self):
 *         cdef shared_ptr[cmap[string,cColumnType]] cpp_obj = make_shared[cmap[string,cColumnType]](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<std::map<std::string,::cpp2::ColumnType> >((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1947, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":1950
 *             deref(self._cpp_obj)
 *         )
 *         return Map__string_ColumnType.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_22Map__string_ColumnType_create(cython_std::move<std::shared_ptr<std::map<std::string,::cpp2::ColumnType> > >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1946
 *         return __fbthrift_inst
 * 
 *     def __copy__(Map__string_ColumnType self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cmap[string,cColumnType]] cpp_obj = make_shared[cmap[string,cColumnType]](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.Map__string_ColumnType.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1952
 *         return Map__string_ColumnType.create(cmove(cpp_obj))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return deref(self._cpp_obj).size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6picard_5types_22Map__string_ColumnType_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6picard_5types_22Map__string_ColumnType_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_22Map__string_ColumnType_4__len__(((struct __pyx_obj_6picard_5types_Map__string_ColumnType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6picard_5types_22Map__string_ColumnType_4__len__(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "picard/types.pyx":1953
 * 
 *     def __len__(self):
 *         return deref(self._cpp_obj).size()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (*__pyx_v_self->_cpp_obj).size();
  goto __pyx_L0;

  /* "picard/types.pyx":1952
 *         return Map__string_ColumnType.create(cmove(cpp_obj))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return deref(self._cpp_obj).size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1956
 * 
 *     @staticmethod
 *     cdef shared_ptr[cmap[string,cColumnType]] _make_instance(object items) except *:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cmap[string,cColumnType]] c_inst = make_shared[cmap[string,cColumnType]]()
 *         if items is not None:
 */

static std::shared_ptr<std::map<std::string,::cpp2::ColumnType> >  __pyx_f_6picard_5types_22Map__string_ColumnType__make_instance(PyObject *__pyx_v_items) {
  std::shared_ptr<std::map<std::string,::cpp2::ColumnType> >  __pyx_v_c_inst;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_item = NULL;
  std::shared_ptr<std::map<std::string,::cpp2::ColumnType> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<std::map<std::string,::cpp2::ColumnType> >  __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  std::string __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_instance", 0);

  /* "picard/types.pyx":1957
 *     @staticmethod
 *     cdef shared_ptr[cmap[string,cColumnType]] _make_instance(object items) except *:
 *         cdef shared_ptr[cmap[string,cColumnType]] c_inst = make_shared[cmap[string,cColumnType]]()             # <<<<<<<<<<<<<<
 *         if items is not None:
 *             for key, item in items.items():
 */
  try {
    __pyx_t_1 = std::make_shared<std::map<std::string,::cpp2::ColumnType> >();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1957, __pyx_L1_error)
  }
  __pyx_v_c_inst = __pyx_t_1;

  /* "picard/types.pyx":1958
 *     cdef shared_ptr[cmap[string,cColumnType]] _make_instance(object items) except *:
 *         cdef shared_ptr[cmap[string,cColumnType]] c_inst = make_shared[cmap[string,cColumnType]]()
 *         if items is not None:             # <<<<<<<<<<<<<<
 *             for key, item in items.items():
 *                 if not isinstance(key, str):
 */
  __pyx_t_2 = (__pyx_v_items != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "picard/types.pyx":1959
 *         cdef shared_ptr[cmap[string,cColumnType]] c_inst = make_shared[cmap[string,cColumnType]]()
 *         if items is not None:
 *             for key, item in items.items():             # <<<<<<<<<<<<<<
 *                 if not isinstance(key, str):
 *                     raise TypeError(f"{key!r} is not of type str")
 */
    __pyx_t_5 = 0;
    if (unlikely(__pyx_v_items == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 1959, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_items, 0, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1959, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4);
    __pyx_t_4 = __pyx_t_8;
    __pyx_t_8 = 0;
    while (1) {
      __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_6, &__pyx_t_5, &__pyx_t_8, &__pyx_t_9, NULL, __pyx_t_7);
      if (unlikely(__pyx_t_10 == 0)) break;
      if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 1959, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "picard/types.pyx":1960
 *         if items is not None:
 *             for key, item in items.items():
 *                 if not isinstance(key, str):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if not isinstance(item, ColumnType):
 */
      __pyx_t_3 = PyUnicode_Check(__pyx_v_key); 
      __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
      if (unlikely(__pyx_t_2)) {

        /* "picard/types.pyx":1961
 *             for key, item in items.items():
 *                 if not isinstance(key, str):
 *                     raise TypeError(f"{key!r} is not of type str")             # <<<<<<<<<<<<<<
 *                 if not isinstance(item, ColumnType):
 *                     raise TypeError(f"{item!r} is not of type ColumnType")
 */
        __pyx_t_9 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_key), __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1961, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_t_9, __pyx_kp_u_is_not_of_type_str); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1961, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1961, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __PYX_ERR(0, 1961, __pyx_L1_error)

        /* "picard/types.pyx":1960
 *         if items is not None:
 *             for key, item in items.items():
 *                 if not isinstance(key, str):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if not isinstance(item, ColumnType):
 */
      }

      /* "picard/types.pyx":1962
 *                 if not isinstance(key, str):
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if not isinstance(item, ColumnType):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{item!r} is not of type ColumnType")
 * 
 */
      __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_item, __pyx_ptype_6picard_5types_ColumnType); 
      __pyx_t_3 = ((!(__pyx_t_2 != 0)) != 0);
      if (unlikely(__pyx_t_3)) {

        /* "picard/types.pyx":1963
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if not isinstance(item, ColumnType):
 *                     raise TypeError(f"{item!r} is not of type ColumnType")             # <<<<<<<<<<<<<<
 * 
 *                 deref(c_inst)[key.encode('UTF-8')] = <cColumnType><int>item
 */
        __pyx_t_9 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_item), __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_t_9, __pyx_kp_u_is_not_of_type_ColumnType); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1963, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __PYX_ERR(0, 1963, __pyx_L1_error)

        /* "picard/types.pyx":1962
 *                 if not isinstance(key, str):
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if not isinstance(item, ColumnType):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{item!r} is not of type ColumnType")
 * 
 */
      }

      /* "picard/types.pyx":1965
 *                     raise TypeError(f"{item!r} is not of type ColumnType")
 * 
 *                 deref(c_inst)[key.encode('UTF-8')] = <cColumnType><int>item             # <<<<<<<<<<<<<<
 *         return c_inst
 * 
 */
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1965, __pyx_L1_error)
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_11, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_u_UTF_8);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1965, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_t_9); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1965, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      ((*__pyx_v_c_inst)[__pyx_t_12]) = ((::cpp2::ColumnType)((int)__pyx_t_10));
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "picard/types.pyx":1958
 *     cdef shared_ptr[cmap[string,cColumnType]] _make_instance(object items) except *:
 *         cdef shared_ptr[cmap[string,cColumnType]] c_inst = make_shared[cmap[string,cColumnType]]()
 *         if items is not None:             # <<<<<<<<<<<<<<
 *             for key, item in items.items():
 *                 if not isinstance(key, str):
 */
  }

  /* "picard/types.pyx":1966
 * 
 *                 deref(c_inst)[key.encode('UTF-8')] = <cColumnType><int>item
 *         return c_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef _check_key_type(self, key):
 */
  __pyx_r = __pyx_v_c_inst;
  goto __pyx_L0;

  /* "picard/types.pyx":1956
 * 
 *     @staticmethod
 *     cdef shared_ptr[cmap[string,cColumnType]] _make_instance(object items) except *:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cmap[string,cColumnType]] c_inst = make_shared[cmap[string,cColumnType]]()
 *         if items is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("picard.types.Map__string_ColumnType._make_instance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1968
 *         return c_inst
 * 
 *     cdef _check_key_type(self, key):             # <<<<<<<<<<<<<<
 *         if not self or key is None:
 *             return
 */

static PyObject *__pyx_f_6picard_5types_22Map__string_ColumnType__check_key_type(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_key_type", 0);

  /* "picard/types.pyx":1969
 * 
 *     cdef _check_key_type(self, key):
 *         if not self or key is None:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(key, str):
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 1969, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_key == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "picard/types.pyx":1970
 *     cdef _check_key_type(self, key):
 *         if not self or key is None:
 *             return             # <<<<<<<<<<<<<<
 *         if isinstance(key, str):
 *             return key
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "picard/types.pyx":1969
 * 
 *     cdef _check_key_type(self, key):
 *         if not self or key is None:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(key, str):
 */
  }

  /* "picard/types.pyx":1971
 *         if not self or key is None:
 *             return
 *         if isinstance(key, str):             # <<<<<<<<<<<<<<
 *             return key
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_key); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1972
 *             return
 *         if isinstance(key, str):
 *             return key             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_key);
    __pyx_r = __pyx_v_key;
    goto __pyx_L0;

    /* "picard/types.pyx":1971
 *         if not self or key is None:
 *             return
 *         if isinstance(key, str):             # <<<<<<<<<<<<<<
 *             return key
 * 
 */
  }

  /* "picard/types.pyx":1968
 *         return c_inst
 * 
 *     cdef _check_key_type(self, key):             # <<<<<<<<<<<<<<
 *         if not self or key is None:
 *             return
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_ColumnType._check_key_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1974
 *             return key
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_22Map__string_ColumnType_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_6picard_5types_22Map__string_ColumnType_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_22Map__string_ColumnType_6__getitem__(((struct __pyx_obj_6picard_5types_Map__string_ColumnType *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_22Map__string_ColumnType_6__getitem__(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_v_err = NULL;
  std::string __pyx_v_ckey;
  ::cpp2::ColumnType __pyx_v_citem;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "picard/types.pyx":1975
 * 
 *     def __getitem__(self, key):
 *         err = KeyError(f'{key}')             # <<<<<<<<<<<<<<
 *         key = self._check_key_type(key)
 *         if key is None:
 */
  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_key, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_err = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1976
 *     def __getitem__(self, key):
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)             # <<<<<<<<<<<<<<
 *         if key is None:
 *             raise err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_6picard_5types_Map__string_ColumnType *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._check_key_type(((struct __pyx_obj_6thrift_3py3_5types_Map *)__pyx_v_self), __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":1977
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)
 *         if key is None:             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')
 */
  __pyx_t_3 = (__pyx_v_key == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (unlikely(__pyx_t_4)) {

    /* "picard/types.pyx":1978
 *         key = self._check_key_type(key)
 *         if key is None:
 *             raise err             # <<<<<<<<<<<<<<
 *         cdef string ckey = key.encode('UTF-8')
 *         if not __map_contains(self._cpp_obj, ckey):
 */
    __Pyx_Raise(__pyx_v_err, 0, 0, 0);
    __PYX_ERR(0, 1978, __pyx_L1_error)

    /* "picard/types.pyx":1977
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)
 *         if key is None:             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')
 */
  }

  /* "picard/types.pyx":1979
 *         if key is None:
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         if not __map_contains(self._cpp_obj, ckey):
 *             raise err
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u_UTF_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1979, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ckey = __pyx_t_6;

  /* "picard/types.pyx":1980
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')
 *         if not __map_contains(self._cpp_obj, ckey):             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef cColumnType citem
 */
  __pyx_t_4 = ((!(::thrift::py3::map_contains<std::map<std::string,::cpp2::ColumnType> >(__pyx_v_self->_cpp_obj, __pyx_v_ckey) != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "picard/types.pyx":1981
 *         cdef string ckey = key.encode('UTF-8')
 *         if not __map_contains(self._cpp_obj, ckey):
 *             raise err             # <<<<<<<<<<<<<<
 *         cdef cColumnType citem
 *         __map_getitem(self._cpp_obj, ckey, citem)
 */
    __Pyx_Raise(__pyx_v_err, 0, 0, 0);
    __PYX_ERR(0, 1981, __pyx_L1_error)

    /* "picard/types.pyx":1980
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')
 *         if not __map_contains(self._cpp_obj, ckey):             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef cColumnType citem
 */
  }

  /* "picard/types.pyx":1983
 *             raise err
 *         cdef cColumnType citem
 *         __map_getitem(self._cpp_obj, ckey, citem)             # <<<<<<<<<<<<<<
 *         return translate_cpp_enum_to_python(ColumnType, <int> citem)
 * 
 */
  ::thrift::py3::map_getitem<std::map<std::string,::cpp2::ColumnType> >(__pyx_v_self->_cpp_obj, __pyx_v_ckey, __pyx_v_citem);

  /* "picard/types.pyx":1984
 *         cdef cColumnType citem
 *         __map_getitem(self._cpp_obj, ckey, citem)
 *         return translate_cpp_enum_to_python(ColumnType, <int> citem)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6thrift_3py3_5types_translate_cpp_enum_to_python(((PyObject *)__pyx_ptype_6picard_5types_ColumnType), ((int)__pyx_v_citem)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":1974
 *             return key
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.Map__string_ColumnType.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6picard_5types_22Map__string_ColumnType_10generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "picard/types.pyx":1986
 *         return translate_cpp_enum_to_python(ColumnType, <int> citem)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_22Map__string_ColumnType_9__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_22Map__string_ColumnType_9__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_22Map__string_ColumnType_8__iter__(((struct __pyx_obj_6picard_5types_Map__string_ColumnType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_22Map__string_ColumnType_8__iter__(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__ *)__pyx_tp_new_6picard_5types___pyx_scope_struct_9___iter__(__pyx_ptype_6picard_5types___pyx_scope_struct_9___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1986, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6picard_5types_22Map__string_ColumnType_10generator3, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_Map__string_ColumnType___iter, __pyx_n_s_picard_types); if (unlikely(!gen)) __PYX_ERR(0, 1986, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_ColumnType.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6picard_5types_22Map__string_ColumnType_10generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__ *__pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1986, __pyx_L1_error)

  /* "picard/types.pyx":1987
 * 
 *     def __iter__(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,cColumnType]] itr = __map_iter[cmap[string,cColumnType]](self._cpp_obj)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_self)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 1987, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":1988
 *     def __iter__(self):
 *         if not self:
 *             return             # <<<<<<<<<<<<<<
 *         cdef __map_iter[cmap[string,cColumnType]] itr = __map_iter[cmap[string,cColumnType]](self._cpp_obj)
 *         cdef string citem
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "picard/types.pyx":1987
 * 
 *     def __iter__(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,cColumnType]] itr = __map_iter[cmap[string,cColumnType]](self._cpp_obj)
 */
  }

  /* "picard/types.pyx":1989
 *         if not self:
 *             return
 *         cdef __map_iter[cmap[string,cColumnType]] itr = __map_iter[cmap[string,cColumnType]](self._cpp_obj)             # <<<<<<<<<<<<<<
 *         cdef string citem
 *         for i in range(deref(self._cpp_obj).size()):
 */
  __pyx_cur_scope->__pyx_v_itr = ::thrift::py3::map_iter<std::map<std::string,::cpp2::ColumnType> > (__pyx_cur_scope->__pyx_v_self->_cpp_obj);

  /* "picard/types.pyx":1991
 *         cdef __map_iter[cmap[string,cColumnType]] itr = __map_iter[cmap[string,cColumnType]](self._cpp_obj)
 *         cdef string citem
 *         for i in range(deref(self._cpp_obj).size()):             # <<<<<<<<<<<<<<
 *             itr.genNextKey(self._cpp_obj, citem)
 *             yield bytes(citem).decode('UTF-8')
 */
  __pyx_t_3 = (*__pyx_cur_scope->__pyx_v_self->_cpp_obj).size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_5;

    /* "picard/types.pyx":1992
 *         cdef string citem
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextKey(self._cpp_obj, citem)             # <<<<<<<<<<<<<<
 *             yield bytes(citem).decode('UTF-8')
 * 
 */
    __pyx_cur_scope->__pyx_v_itr.genNextKey(__pyx_cur_scope->__pyx_v_self->_cpp_obj, __pyx_cur_scope->__pyx_v_citem);

    /* "picard/types.pyx":1993
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextKey(self._cpp_obj, citem)
 *             yield bytes(citem).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, key):
 */
    __pyx_t_6 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_cur_scope->__pyx_v_citem); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_decode_bytes(__pyx_t_7, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1993, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1993, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "picard/types.pyx":1986
 *         return translate_cpp_enum_to_python(ColumnType, <int> citem)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":1995
 *             yield bytes(citem).decode('UTF-8')
 * 
 *     def __contains__(self, key):             # <<<<<<<<<<<<<<
 *         key = self._check_key_type(key)
 *         if key is None:
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_22Map__string_ColumnType_12__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static int __pyx_pw_6picard_5types_22Map__string_ColumnType_12__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_22Map__string_ColumnType_11__contains__(((struct __pyx_obj_6picard_5types_Map__string_ColumnType *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_22Map__string_ColumnType_11__contains__(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self, PyObject *__pyx_v_key) {
  std::string __pyx_v_ckey;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__contains__", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "picard/types.pyx":1996
 * 
 *     def __contains__(self, key):
 *         key = self._check_key_type(key)             # <<<<<<<<<<<<<<
 *         if key is None:
 *             return False
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_Map__string_ColumnType *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._check_key_type(((struct __pyx_obj_6thrift_3py3_5types_Map *)__pyx_v_self), __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":1997
 *     def __contains__(self, key):
 *         key = self._check_key_type(key)
 *         if key is None:             # <<<<<<<<<<<<<<
 *             return False
 *         cdef string ckey = key.encode('UTF-8')
 */
  __pyx_t_2 = (__pyx_v_key == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "picard/types.pyx":1998
 *         key = self._check_key_type(key)
 *         if key is None:
 *             return False             # <<<<<<<<<<<<<<
 *         cdef string ckey = key.encode('UTF-8')
 *         return __map_contains(self._cpp_obj, ckey)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":1997
 *     def __contains__(self, key):
 *         key = self._check_key_type(key)
 *         if key is None:             # <<<<<<<<<<<<<<
 *             return False
 *         cdef string ckey = key.encode('UTF-8')
 */
  }

  /* "picard/types.pyx":1999
 *         if key is None:
 *             return False
 *         cdef string ckey = key.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         return __map_contains(self._cpp_obj, ckey)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_UTF_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1999, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ckey = __pyx_t_6;

  /* "picard/types.pyx":2000
 *             return False
 *         cdef string ckey = key.encode('UTF-8')
 *         return __map_contains(self._cpp_obj, ckey)             # <<<<<<<<<<<<<<
 * 
 *     def values(self):
 */
  __pyx_r = ::thrift::py3::map_contains<std::map<std::string,::cpp2::ColumnType> >(__pyx_v_self->_cpp_obj, __pyx_v_ckey);
  goto __pyx_L0;

  /* "picard/types.pyx":1995
 *             yield bytes(citem).decode('UTF-8')
 * 
 *     def __contains__(self, key):             # <<<<<<<<<<<<<<
 *         key = self._check_key_type(key)
 *         if key is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.Map__string_ColumnType.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6picard_5types_22Map__string_ColumnType_15generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "picard/types.pyx":2002
 *         return __map_contains(self._cpp_obj, ckey)
 * 
 *     def values(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_22Map__string_ColumnType_14values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_22Map__string_ColumnType_14values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("values (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_22Map__string_ColumnType_13values(((struct __pyx_obj_6picard_5types_Map__string_ColumnType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_22Map__string_ColumnType_13values(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("values", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values *)__pyx_tp_new_6picard_5types___pyx_scope_struct_10_values(__pyx_ptype_6picard_5types___pyx_scope_struct_10_values, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2002, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6picard_5types_22Map__string_ColumnType_15generator4, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_values, __pyx_n_s_Map__string_ColumnType_values, __pyx_n_s_picard_types); if (unlikely(!gen)) __PYX_ERR(0, 2002, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_ColumnType.values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6picard_5types_22Map__string_ColumnType_15generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values *__pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("values", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2002, __pyx_L1_error)

  /* "picard/types.pyx":2003
 * 
 *     def values(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,cColumnType]] itr = __map_iter[cmap[string,cColumnType]](self._cpp_obj)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_self)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2003, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":2004
 *     def values(self):
 *         if not self:
 *             return             # <<<<<<<<<<<<<<
 *         cdef __map_iter[cmap[string,cColumnType]] itr = __map_iter[cmap[string,cColumnType]](self._cpp_obj)
 *         cdef cColumnType citem
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "picard/types.pyx":2003
 * 
 *     def values(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,cColumnType]] itr = __map_iter[cmap[string,cColumnType]](self._cpp_obj)
 */
  }

  /* "picard/types.pyx":2005
 *         if not self:
 *             return
 *         cdef __map_iter[cmap[string,cColumnType]] itr = __map_iter[cmap[string,cColumnType]](self._cpp_obj)             # <<<<<<<<<<<<<<
 *         cdef cColumnType citem
 *         for i in range(deref(self._cpp_obj).size()):
 */
  __pyx_cur_scope->__pyx_v_itr = ::thrift::py3::map_iter<std::map<std::string,::cpp2::ColumnType> > (__pyx_cur_scope->__pyx_v_self->_cpp_obj);

  /* "picard/types.pyx":2007
 *         cdef __map_iter[cmap[string,cColumnType]] itr = __map_iter[cmap[string,cColumnType]](self._cpp_obj)
 *         cdef cColumnType citem
 *         for i in range(deref(self._cpp_obj).size()):             # <<<<<<<<<<<<<<
 *             itr.genNextValue(self._cpp_obj, citem)
 *             yield translate_cpp_enum_to_python(ColumnType, <int> citem)
 */
  __pyx_t_3 = (*__pyx_cur_scope->__pyx_v_self->_cpp_obj).size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_5;

    /* "picard/types.pyx":2008
 *         cdef cColumnType citem
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextValue(self._cpp_obj, citem)             # <<<<<<<<<<<<<<
 *             yield translate_cpp_enum_to_python(ColumnType, <int> citem)
 * 
 */
    __pyx_cur_scope->__pyx_v_itr.genNextValue(__pyx_cur_scope->__pyx_v_self->_cpp_obj, __pyx_cur_scope->__pyx_v_citem);

    /* "picard/types.pyx":2009
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextValue(self._cpp_obj, citem)
 *             yield translate_cpp_enum_to_python(ColumnType, <int> citem)             # <<<<<<<<<<<<<<
 * 
 *     def items(self):
 */
    __pyx_t_6 = __pyx_f_6thrift_3py3_5types_translate_cpp_enum_to_python(((PyObject *)__pyx_ptype_6picard_5types_ColumnType), ((int)__pyx_cur_scope->__pyx_v_citem)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2009, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2009, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "picard/types.pyx":2002
 *         return __map_contains(self._cpp_obj, ckey)
 * 
 *     def values(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6picard_5types_22Map__string_ColumnType_18generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "picard/types.pyx":2011
 *             yield translate_cpp_enum_to_python(ColumnType, <int> citem)
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_22Map__string_ColumnType_17items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_22Map__string_ColumnType_17items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_22Map__string_ColumnType_16items(((struct __pyx_obj_6picard_5types_Map__string_ColumnType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_22Map__string_ColumnType_16items(struct __pyx_obj_6picard_5types_Map__string_ColumnType *__pyx_v_self) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("items", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items *)__pyx_tp_new_6picard_5types___pyx_scope_struct_11_items(__pyx_ptype_6picard_5types___pyx_scope_struct_11_items, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2011, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6picard_5types_22Map__string_ColumnType_18generator5, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_items, __pyx_n_s_Map__string_ColumnType_items, __pyx_n_s_picard_types); if (unlikely(!gen)) __PYX_ERR(0, 2011, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_ColumnType.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6picard_5types_22Map__string_ColumnType_18generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items *__pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2011, __pyx_L1_error)

  /* "picard/types.pyx":2012
 * 
 *     def items(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,cColumnType]] itr = __map_iter[cmap[string,cColumnType]](self._cpp_obj)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_self)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2012, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":2013
 *     def items(self):
 *         if not self:
 *             return             # <<<<<<<<<<<<<<
 *         cdef __map_iter[cmap[string,cColumnType]] itr = __map_iter[cmap[string,cColumnType]](self._cpp_obj)
 *         cdef string ckey
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "picard/types.pyx":2012
 * 
 *     def items(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,cColumnType]] itr = __map_iter[cmap[string,cColumnType]](self._cpp_obj)
 */
  }

  /* "picard/types.pyx":2014
 *         if not self:
 *             return
 *         cdef __map_iter[cmap[string,cColumnType]] itr = __map_iter[cmap[string,cColumnType]](self._cpp_obj)             # <<<<<<<<<<<<<<
 *         cdef string ckey
 *         cdef cColumnType citem
 */
  __pyx_cur_scope->__pyx_v_itr = ::thrift::py3::map_iter<std::map<std::string,::cpp2::ColumnType> > (__pyx_cur_scope->__pyx_v_self->_cpp_obj);

  /* "picard/types.pyx":2017
 *         cdef string ckey
 *         cdef cColumnType citem
 *         for i in range(deref(self._cpp_obj).size()):             # <<<<<<<<<<<<<<
 *             itr.genNextItem(self._cpp_obj, ckey, citem)
 *             yield (ckey.data().decode('UTF-8'), translate_cpp_enum_to_python(ColumnType, <int> citem))
 */
  __pyx_t_3 = (*__pyx_cur_scope->__pyx_v_self->_cpp_obj).size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_5;

    /* "picard/types.pyx":2018
 *         cdef cColumnType citem
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextItem(self._cpp_obj, ckey, citem)             # <<<<<<<<<<<<<<
 *             yield (ckey.data().decode('UTF-8'), translate_cpp_enum_to_python(ColumnType, <int> citem))
 * 
 */
    __pyx_cur_scope->__pyx_v_itr.genNextItem(__pyx_cur_scope->__pyx_v_self->_cpp_obj, __pyx_cur_scope->__pyx_v_ckey, __pyx_cur_scope->__pyx_v_citem);

    /* "picard/types.pyx":2019
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextItem(self._cpp_obj, ckey, citem)
 *             yield (ckey.data().decode('UTF-8'), translate_cpp_enum_to_python(ColumnType, <int> citem))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_6 = __pyx_cur_scope->__pyx_v_ckey.data();
    __pyx_t_7 = __Pyx_decode_c_string(__pyx_t_6, 0, strlen(__pyx_t_6), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2019, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __pyx_f_6thrift_3py3_5types_translate_cpp_enum_to_python(((PyObject *)__pyx_ptype_6picard_5types_ColumnType), ((int)__pyx_cur_scope->__pyx_v_citem)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2019, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2019, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2019, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "picard/types.pyx":2011
 *             yield translate_cpp_enum_to_python(ColumnType, <int> citem)
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2022
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__Map__string_ColumnType()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_22Map__string_ColumnType_20__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_22Map__string_ColumnType_20__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_22Map__string_ColumnType_20__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_22Map__string_ColumnType_20__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_22Map__string_ColumnType_19__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_22Map__string_ColumnType_19__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":2023
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__Map__string_ColumnType()             # <<<<<<<<<<<<<<
 * 
 * Mapping.register(Map__string_ColumnType)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__Map__string_ColumnType()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":2022
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__Map__string_ColumnType()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.Map__string_ColumnType.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2029
 * @__cython.auto_pickle(False)
 * cdef class List__string(thrift.py3.types.List):
 *     def __init__(self, items=None):             # <<<<<<<<<<<<<<
 *         if isinstance(items, List__string):
 *             self._cpp_obj = (<List__string> items)._cpp_obj
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_12List__string_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_12List__string_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2029, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2029, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.List__string.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_12List__string___init__(((struct __pyx_obj_6picard_5types_List__string *)__pyx_v_self), __pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_12List__string___init__(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self, PyObject *__pyx_v_items) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::shared_ptr<std::vector<std::string> >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":2030
 * cdef class List__string(thrift.py3.types.List):
 *     def __init__(self, items=None):
 *         if isinstance(items, List__string):             # <<<<<<<<<<<<<<
 *             self._cpp_obj = (<List__string> items)._cpp_obj
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_items, __pyx_ptype_6picard_5types_List__string); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":2031
 *     def __init__(self, items=None):
 *         if isinstance(items, List__string):
 *             self._cpp_obj = (<List__string> items)._cpp_obj             # <<<<<<<<<<<<<<
 *         else:
 *             self._cpp_obj = List__string._make_instance(items)
 */
    __pyx_t_3 = ((struct __pyx_obj_6picard_5types_List__string *)__pyx_v_items)->_cpp_obj;
    __pyx_v_self->_cpp_obj = __pyx_t_3;

    /* "picard/types.pyx":2030
 * cdef class List__string(thrift.py3.types.List):
 *     def __init__(self, items=None):
 *         if isinstance(items, List__string):             # <<<<<<<<<<<<<<
 *             self._cpp_obj = (<List__string> items)._cpp_obj
 *         else:
 */
    goto __pyx_L3;
  }

  /* "picard/types.pyx":2033
 *             self._cpp_obj = (<List__string> items)._cpp_obj
 *         else:
 *             self._cpp_obj = List__string._make_instance(items)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_6picard_5types_12List__string__make_instance(__pyx_v_items); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2033, __pyx_L1_error)
    __pyx_v_self->_cpp_obj = __pyx_t_3;
  }
  __pyx_L3:;

  /* "picard/types.pyx":2029
 * @__cython.auto_pickle(False)
 * cdef class List__string(thrift.py3.types.List):
 *     def __init__(self, items=None):             # <<<<<<<<<<<<<<
 *         if isinstance(items, List__string):
 *             self._cpp_obj = (<List__string> items)._cpp_obj
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.List__string.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2036
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[vector[string]] c_items):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <List__string>List__string.__new__(List__string)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 */

static PyObject *__pyx_f_6picard_5types_12List__string_create(std::shared_ptr<std::vector<std::string> >  __pyx_v_c_items) {
  struct __pyx_obj_6picard_5types_List__string *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":2037
 *     @staticmethod
 *     cdef create(shared_ptr[vector[string]] c_items):
 *         __fbthrift_inst = <List__string>List__string.__new__(List__string)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_List__string(((PyTypeObject *)__pyx_ptype_6picard_5types_List__string), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2037, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_List__string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":2038
 *     cdef create(shared_ptr[vector[string]] c_items):
 *         __fbthrift_inst = <List__string>List__string.__new__(List__string)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<std::vector<std::string> > >(__pyx_v_c_items);

  /* "picard/types.pyx":2039
 *         __fbthrift_inst = <List__string>List__string.__new__(List__string)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(List__string self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":2036
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[vector[string]] c_items):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <List__string>List__string.__new__(List__string)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.List__string.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2041
 *         return __fbthrift_inst
 * 
 *     def __copy__(List__string self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[string]] cpp_obj = make_shared[vector[string]](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_12List__string_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_12List__string_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_12List__string_2__copy__(((struct __pyx_obj_6picard_5types_List__string *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_12List__string_2__copy__(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self) {
  std::shared_ptr<std::vector<std::string> >  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<std::vector<std::string> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":2042
 * 
 *     def __copy__(List__string self):
 *         cdef shared_ptr[vector[string]] cpp_obj = make_shared[vector[string]](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<std::vector<std::string> >((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2042, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":2045
 *             deref(self._cpp_obj)
 *         )
 *         return List__string.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_12List__string_create(cython_std::move<std::shared_ptr<std::vector<std::string> > >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":2041
 *         return __fbthrift_inst
 * 
 *     def __copy__(List__string self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[string]] cpp_obj = make_shared[vector[string]](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.List__string.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2047
 *         return List__string.create(cmove(cpp_obj))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return deref(self._cpp_obj).size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6picard_5types_12List__string_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6picard_5types_12List__string_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_12List__string_4__len__(((struct __pyx_obj_6picard_5types_List__string *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6picard_5types_12List__string_4__len__(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "picard/types.pyx":2048
 * 
 *     def __len__(self):
 *         return deref(self._cpp_obj).size()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (*__pyx_v_self->_cpp_obj).size();
  goto __pyx_L0;

  /* "picard/types.pyx":2047
 *         return List__string.create(cmove(cpp_obj))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return deref(self._cpp_obj).size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2051
 * 
 *     @staticmethod
 *     cdef shared_ptr[vector[string]] _make_instance(object items) except *:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[string]] c_inst = make_shared[vector[string]]()
 *         if items is not None:
 */

static std::shared_ptr<std::vector<std::string> >  __pyx_f_6picard_5types_12List__string__make_instance(PyObject *__pyx_v_items) {
  std::shared_ptr<std::vector<std::string> >  __pyx_v_c_inst;
  PyObject *__pyx_v_item = NULL;
  std::shared_ptr<std::vector<std::string> >  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<std::vector<std::string> >  __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  std::string __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_instance", 0);

  /* "picard/types.pyx":2052
 *     @staticmethod
 *     cdef shared_ptr[vector[string]] _make_instance(object items) except *:
 *         cdef shared_ptr[vector[string]] c_inst = make_shared[vector[string]]()             # <<<<<<<<<<<<<<
 *         if items is not None:
 *             for item in items:
 */
  try {
    __pyx_t_1 = std::make_shared<std::vector<std::string> >();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2052, __pyx_L1_error)
  }
  __pyx_v_c_inst = __pyx_t_1;

  /* "picard/types.pyx":2053
 *     cdef shared_ptr[vector[string]] _make_instance(object items) except *:
 *         cdef shared_ptr[vector[string]] c_inst = make_shared[vector[string]]()
 *         if items is not None:             # <<<<<<<<<<<<<<
 *             for item in items:
 *                 if not isinstance(item, str):
 */
  __pyx_t_2 = (__pyx_v_items != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "picard/types.pyx":2054
 *         cdef shared_ptr[vector[string]] c_inst = make_shared[vector[string]]()
 *         if items is not None:
 *             for item in items:             # <<<<<<<<<<<<<<
 *                 if not isinstance(item, str):
 *                     raise TypeError(f"{item!r} is not of type str")
 */
    if (likely(PyList_CheckExact(__pyx_v_items)) || PyTuple_CheckExact(__pyx_v_items)) {
      __pyx_t_4 = __pyx_v_items; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_items); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2054, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2054, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2054, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2054, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 2054, __pyx_L1_error)
          #else
          __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2054, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_7);
          #endif
        }
      } else {
        __pyx_t_7 = __pyx_t_6(__pyx_t_4);
        if (unlikely(!__pyx_t_7)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 2054, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_7);
      }
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "picard/types.pyx":2055
 *         if items is not None:
 *             for item in items:
 *                 if not isinstance(item, str):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{item!r} is not of type str")
 *                 deref(c_inst).push_back(item.encode('UTF-8'))
 */
      __pyx_t_3 = PyUnicode_Check(__pyx_v_item); 
      __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
      if (unlikely(__pyx_t_2)) {

        /* "picard/types.pyx":2056
 *             for item in items:
 *                 if not isinstance(item, str):
 *                     raise TypeError(f"{item!r} is not of type str")             # <<<<<<<<<<<<<<
 *                 deref(c_inst).push_back(item.encode('UTF-8'))
 *         return c_inst
 */
        __pyx_t_7 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_item), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2056, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_t_7, __pyx_kp_u_is_not_of_type_str); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2056, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2056, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(0, 2056, __pyx_L1_error)

        /* "picard/types.pyx":2055
 *         if items is not None:
 *             for item in items:
 *                 if not isinstance(item, str):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{item!r} is not of type str")
 *                 deref(c_inst).push_back(item.encode('UTF-8'))
 */
      }

      /* "picard/types.pyx":2057
 *                 if not isinstance(item, str):
 *                     raise TypeError(f"{item!r} is not of type str")
 *                 deref(c_inst).push_back(item.encode('UTF-8'))             # <<<<<<<<<<<<<<
 *         return c_inst
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_item, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2057, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_7 = (__pyx_t_9) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_9, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_u_UTF_8);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2057, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_10 = __pyx_convert_string_from_py_std__in_string(__pyx_t_7); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2057, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      try {
        (*__pyx_v_c_inst).push_back(__pyx_t_10);
      } catch(...) {
        __Pyx_CppExn2PyErr();
        __PYX_ERR(0, 2057, __pyx_L1_error)
      }

      /* "picard/types.pyx":2054
 *         cdef shared_ptr[vector[string]] c_inst = make_shared[vector[string]]()
 *         if items is not None:
 *             for item in items:             # <<<<<<<<<<<<<<
 *                 if not isinstance(item, str):
 *                     raise TypeError(f"{item!r} is not of type str")
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "picard/types.pyx":2053
 *     cdef shared_ptr[vector[string]] _make_instance(object items) except *:
 *         cdef shared_ptr[vector[string]] c_inst = make_shared[vector[string]]()
 *         if items is not None:             # <<<<<<<<<<<<<<
 *             for item in items:
 *                 if not isinstance(item, str):
 */
  }

  /* "picard/types.pyx":2058
 *                     raise TypeError(f"{item!r} is not of type str")
 *                 deref(c_inst).push_back(item.encode('UTF-8'))
 *         return c_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_slice(self, slice index_obj):
 */
  __pyx_r = __pyx_v_c_inst;
  goto __pyx_L0;

  /* "picard/types.pyx":2051
 * 
 *     @staticmethod
 *     cdef shared_ptr[vector[string]] _make_instance(object items) except *:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[string]] c_inst = make_shared[vector[string]]()
 *         if items is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("picard.types.List__string._make_instance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2060
 *         return c_inst
 * 
 *     cdef _get_slice(self, slice index_obj):             # <<<<<<<<<<<<<<
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 */

static PyObject *__pyx_f_6picard_5types_12List__string__get_slice(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self, PyObject *__pyx_v_index_obj) {
  int __pyx_v_start;
  int __pyx_v_stop;
  int __pyx_v_step;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_slice", 0);

  /* "picard/types.pyx":2062
 *     cdef _get_slice(self, slice index_obj):
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())             # <<<<<<<<<<<<<<
 *         return List__string.create(
 *             __list_slice[vector[string]](self._cpp_obj, start, stop, step)
 */
  __pyx_t_1 = __Pyx_PyInt_FromSize_t((*__pyx_v_self->_cpp_obj).size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySlice_Type_indices, __pyx_v_index_obj, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 2062, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2062, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext;
    index = 0; __pyx_t_1 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_1)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_1);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    index = 2; __pyx_t_4 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_4)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 3) < 0) __PYX_ERR(0, 2062, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 2062, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2062, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_start = __pyx_t_7;
  __pyx_v_stop = __pyx_t_8;
  __pyx_v_step = __pyx_t_9;

  /* "picard/types.pyx":2063
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 *         return List__string.create(             # <<<<<<<<<<<<<<
 *             __list_slice[vector[string]](self._cpp_obj, start, stop, step)
 *         )
 */
  __Pyx_XDECREF(__pyx_r);

  /* "picard/types.pyx":2064
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 *         return List__string.create(
 *             __list_slice[vector[string]](self._cpp_obj, start, stop, step)             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_2 = __pyx_f_6picard_5types_12List__string_create(::thrift::py3::list_slice<std::vector<std::string> >(__pyx_v_self->_cpp_obj, __pyx_v_start, __pyx_v_stop, __pyx_v_step)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":2060
 *         return c_inst
 * 
 *     cdef _get_slice(self, slice index_obj):             # <<<<<<<<<<<<<<
 *         cdef int start, stop, step
 *         start, stop, step = index_obj.indices(deref(self._cpp_obj).size())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.List__string._get_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2067
 *         )
 * 
 *     cdef _get_single_item(self, size_t index):             # <<<<<<<<<<<<<<
 *         cdef string citem
 *         __list_getitem(self._cpp_obj, index, citem)
 */

static PyObject *__pyx_f_6picard_5types_12List__string__get_single_item(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self, size_t __pyx_v_index) {
  std::string __pyx_v_citem;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_single_item", 0);

  /* "picard/types.pyx":2069
 *     cdef _get_single_item(self, size_t index):
 *         cdef string citem
 *         __list_getitem(self._cpp_obj, index, citem)             # <<<<<<<<<<<<<<
 *         return bytes(citem).decode('UTF-8')
 * 
 */
  ::thrift::py3::list_getitem<std::vector<std::string> >(__pyx_v_self->_cpp_obj, __pyx_v_index, __pyx_v_citem);

  /* "picard/types.pyx":2070
 *         cdef string citem
 *         __list_getitem(self._cpp_obj, index, citem)
 *         return bytes(citem).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     cdef _check_item_type(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_citem); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_decode_bytes(__pyx_t_2, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":2067
 *         )
 * 
 *     cdef _get_single_item(self, size_t index):             # <<<<<<<<<<<<<<
 *         cdef string citem
 *         __list_getitem(self._cpp_obj, index, citem)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.List__string._get_single_item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2072
 *         return bytes(citem).decode('UTF-8')
 * 
 *     cdef _check_item_type(self, item):             # <<<<<<<<<<<<<<
 *         if not self or item is None:
 *             return
 */

static PyObject *__pyx_f_6picard_5types_12List__string__check_item_type(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_item_type", 0);

  /* "picard/types.pyx":2073
 * 
 *     cdef _check_item_type(self, item):
 *         if not self or item is None:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(item, str):
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2073, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_item == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "picard/types.pyx":2074
 *     cdef _check_item_type(self, item):
 *         if not self or item is None:
 *             return             # <<<<<<<<<<<<<<
 *         if isinstance(item, str):
 *             return item
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "picard/types.pyx":2073
 * 
 *     cdef _check_item_type(self, item):
 *         if not self or item is None:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(item, str):
 */
  }

  /* "picard/types.pyx":2075
 *         if not self or item is None:
 *             return
 *         if isinstance(item, str):             # <<<<<<<<<<<<<<
 *             return item
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_item); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":2076
 *             return
 *         if isinstance(item, str):
 *             return item             # <<<<<<<<<<<<<<
 * 
 *     def index(self, item, start=0, stop=None):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_item);
    __pyx_r = __pyx_v_item;
    goto __pyx_L0;

    /* "picard/types.pyx":2075
 *         if not self or item is None:
 *             return
 *         if isinstance(item, str):             # <<<<<<<<<<<<<<
 *             return item
 * 
 */
  }

  /* "picard/types.pyx":2072
 *         return bytes(citem).decode('UTF-8')
 * 
 *     cdef _check_item_type(self, item):             # <<<<<<<<<<<<<<
 *         if not self or item is None:
 *             return
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.List__string._check_item_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2078
 *             return item
 * 
 *     def index(self, item, start=0, stop=None):             # <<<<<<<<<<<<<<
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_12List__string_7index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6picard_5types_12List__string_7index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_v_start = 0;
  PyObject *__pyx_v_stop = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("index (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_item,&__pyx_n_s_start,&__pyx_n_s_stop,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_int_0);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_item)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_start);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_stop);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "index") < 0)) __PYX_ERR(0, 2078, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_item = values[0];
    __pyx_v_start = values[1];
    __pyx_v_stop = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("index", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2078, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.List__string.index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_12List__string_6index(((struct __pyx_obj_6picard_5types_List__string *)__pyx_v_self), __pyx_v_item, __pyx_v_start, __pyx_v_stop);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_12List__string_6index(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_start, PyObject *__pyx_v_stop) {
  PyObject *__pyx_v_err = NULL;
  __pyx_ctuple_int__and_int__and_int __pyx_v_indices;
  std::string __pyx_v_citem;
  std::optional<size_t>  __pyx_v_found;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __pyx_ctuple_int__and_int__and_int __pyx_t_7;
  std::string __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("index", 0);
  __Pyx_INCREF(__pyx_v_item);

  /* "picard/types.pyx":2079
 * 
 *     def index(self, item, start=0, stop=None):
 *         err = ValueError(f'{item} is not in list')             # <<<<<<<<<<<<<<
 *         item = self._check_item_type(item)
 *         if item is None:
 */
  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_item, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_t_1, __pyx_kp_u_is_not_in_list); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_err = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "picard/types.pyx":2080
 *     def index(self, item, start=0, stop=None):
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)             # <<<<<<<<<<<<<<
 *         if item is None:
 *             raise err
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_List__string *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._check_item_type(((struct __pyx_obj_6thrift_3py3_5types_List *)__pyx_v_self), __pyx_v_item); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_item, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":2081
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 */
  __pyx_t_3 = (__pyx_v_item == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (unlikely(__pyx_t_4)) {

    /* "picard/types.pyx":2082
 *         item = self._check_item_type(item)
 *         if item is None:
 *             raise err             # <<<<<<<<<<<<<<
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 *         cdef string citem = item.encode('UTF-8')
 */
    __Pyx_Raise(__pyx_v_err, 0, 0, 0);
    __PYX_ERR(0, 2082, __pyx_L1_error)

    /* "picard/types.pyx":2081
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 */
  }

  /* "picard/types.pyx":2083
 *         if item is None:
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())             # <<<<<<<<<<<<<<
 *         cdef string citem = item.encode('UTF-8')
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[string]](self._cpp_obj, indices[0], indices[1], citem)
 */
  __pyx_t_2 = PySlice_New(__pyx_v_start, __pyx_v_stop, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_indices); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_FromSize_t((*__pyx_v_self->_cpp_obj).size()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = __pyx_convert__from_py___pyx_ctuple_int__and_int__and_int(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2083, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_indices = __pyx_t_7;

  /* "picard/types.pyx":2084
 *             raise err
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 *         cdef string citem = item.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[string]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_item, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_2, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_kp_u_UTF_8);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_8 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2084, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_citem = __pyx_t_8;

  /* "picard/types.pyx":2085
 *         cdef (int, int, int) indices = slice(start, stop).indices(deref(self._cpp_obj).size())
 *         cdef string citem = item.encode('UTF-8')
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[string]](self._cpp_obj, indices[0], indices[1], citem)             # <<<<<<<<<<<<<<
 *         if not found.has_value():
 *             raise err
 */
  __pyx_v_found = ::thrift::py3::list_index<std::vector<std::string> >(__pyx_v_self->_cpp_obj, __pyx_v_indices.f0, __pyx_v_indices.f1, __pyx_v_citem);

  /* "picard/types.pyx":2086
 *         cdef string citem = item.encode('UTF-8')
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[string]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():             # <<<<<<<<<<<<<<
 *             raise err
 *         return found.value()
 */
  __pyx_t_4 = ((!(__pyx_v_found.has_value() != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "picard/types.pyx":2087
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[string]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():
 *             raise err             # <<<<<<<<<<<<<<
 *         return found.value()
 * 
 */
    __Pyx_Raise(__pyx_v_err, 0, 0, 0);
    __PYX_ERR(0, 2087, __pyx_L1_error)

    /* "picard/types.pyx":2086
 *         cdef string citem = item.encode('UTF-8')
 *         cdef std_libcpp.optional[size_t] found = __list_index[vector[string]](self._cpp_obj, indices[0], indices[1], citem)
 *         if not found.has_value():             # <<<<<<<<<<<<<<
 *             raise err
 *         return found.value()
 */
  }

  /* "picard/types.pyx":2088
 *         if not found.has_value():
 *             raise err
 *         return found.value()             # <<<<<<<<<<<<<<
 * 
 *     def count(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(__pyx_v_found.value()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":2078
 *             return item
 * 
 *     def index(self, item, start=0, stop=None):             # <<<<<<<<<<<<<<
 *         err = ValueError(f'{item} is not in list')
 *         item = self._check_item_type(item)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("picard.types.List__string.index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2090
 *         return found.value()
 * 
 *     def count(self, item):             # <<<<<<<<<<<<<<
 *         item = self._check_item_type(item)
 *         if item is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_12List__string_9count(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_pw_6picard_5types_12List__string_9count(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("count (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_12List__string_8count(((struct __pyx_obj_6picard_5types_List__string *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_12List__string_8count(struct __pyx_obj_6picard_5types_List__string *__pyx_v_self, PyObject *__pyx_v_item) {
  std::string __pyx_v_citem;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("count", 0);
  __Pyx_INCREF(__pyx_v_item);

  /* "picard/types.pyx":2091
 * 
 *     def count(self, item):
 *         item = self._check_item_type(item)             # <<<<<<<<<<<<<<
 *         if item is None:
 *             return 0
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_List__string *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._check_item_type(((struct __pyx_obj_6thrift_3py3_5types_List *)__pyx_v_self), __pyx_v_item); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_item, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":2092
 *     def count(self, item):
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef string citem = item.encode('UTF-8')
 */
  __pyx_t_2 = (__pyx_v_item == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "picard/types.pyx":2093
 *         item = self._check_item_type(item)
 *         if item is None:
 *             return 0             # <<<<<<<<<<<<<<
 *         cdef string citem = item.encode('UTF-8')
 *         return __list_count[vector[string]](self._cpp_obj, citem)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_int_0);
    __pyx_r = __pyx_int_0;
    goto __pyx_L0;

    /* "picard/types.pyx":2092
 *     def count(self, item):
 *         item = self._check_item_type(item)
 *         if item is None:             # <<<<<<<<<<<<<<
 *             return 0
 *         cdef string citem = item.encode('UTF-8')
 */
  }

  /* "picard/types.pyx":2094
 *         if item is None:
 *             return 0
 *         cdef string citem = item.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         return __list_count[vector[string]](self._cpp_obj, citem)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_item, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_UTF_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2094, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_citem = __pyx_t_6;

  /* "picard/types.pyx":2095
 *             return 0
 *         cdef string citem = item.encode('UTF-8')
 *         return __list_count[vector[string]](self._cpp_obj, citem)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_FromSize_t(::thrift::py3::list_count<std::vector<std::string> >(__pyx_v_self->_cpp_obj, __pyx_v_citem)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":2090
 *         return found.value()
 * 
 *     def count(self, item):             # <<<<<<<<<<<<<<
 *         item = self._check_item_type(item)
 *         if item is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.List__string.count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2098
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__string()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_12List__string_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_12List__string_11__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_12List__string_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_12List__string_11__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_12List__string_10__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_12List__string_10__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":2099
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__List__string()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__List__string()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":2098
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__string()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.List__string.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2106
 * @__cython.auto_pickle(False)
 * cdef class Map__string_List__string(thrift.py3.types.Map):
 *     def __init__(self, items=None):             # <<<<<<<<<<<<<<
 *         if isinstance(items, Map__string_List__string):
 *             self._cpp_obj = (<Map__string_List__string> items)._cpp_obj
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_24Map__string_List__string_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6picard_5types_24Map__string_List__string_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_items = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_items,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_items);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 2106, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_items = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2106, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("picard.types.Map__string_List__string.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6picard_5types_24Map__string_List__string___init__(((struct __pyx_obj_6picard_5types_Map__string_List__string *)__pyx_v_self), __pyx_v_items);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_24Map__string_List__string___init__(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self, PyObject *__pyx_v_items) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  std::shared_ptr<std::map<std::string,std::vector<std::string> > >  __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "picard/types.pyx":2107
 * cdef class Map__string_List__string(thrift.py3.types.Map):
 *     def __init__(self, items=None):
 *         if isinstance(items, Map__string_List__string):             # <<<<<<<<<<<<<<
 *             self._cpp_obj = (<Map__string_List__string> items)._cpp_obj
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_items, __pyx_ptype_6picard_5types_Map__string_List__string); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":2108
 *     def __init__(self, items=None):
 *         if isinstance(items, Map__string_List__string):
 *             self._cpp_obj = (<Map__string_List__string> items)._cpp_obj             # <<<<<<<<<<<<<<
 *         else:
 *             self._cpp_obj = Map__string_List__string._make_instance(items)
 */
    __pyx_t_3 = ((struct __pyx_obj_6picard_5types_Map__string_List__string *)__pyx_v_items)->_cpp_obj;
    __pyx_v_self->_cpp_obj = __pyx_t_3;

    /* "picard/types.pyx":2107
 * cdef class Map__string_List__string(thrift.py3.types.Map):
 *     def __init__(self, items=None):
 *         if isinstance(items, Map__string_List__string):             # <<<<<<<<<<<<<<
 *             self._cpp_obj = (<Map__string_List__string> items)._cpp_obj
 *         else:
 */
    goto __pyx_L3;
  }

  /* "picard/types.pyx":2110
 *             self._cpp_obj = (<Map__string_List__string> items)._cpp_obj
 *         else:
 *             self._cpp_obj = Map__string_List__string._make_instance(items)             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  /*else*/ {
    __pyx_t_3 = __pyx_f_6picard_5types_24Map__string_List__string__make_instance(__pyx_v_items); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2110, __pyx_L1_error)
    __pyx_v_self->_cpp_obj = __pyx_t_3;
  }
  __pyx_L3:;

  /* "picard/types.pyx":2106
 * @__cython.auto_pickle(False)
 * cdef class Map__string_List__string(thrift.py3.types.Map):
 *     def __init__(self, items=None):             # <<<<<<<<<<<<<<
 *         if isinstance(items, Map__string_List__string):
 *             self._cpp_obj = (<Map__string_List__string> items)._cpp_obj
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_List__string.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2113
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cmap[string,vector[string]]] c_items):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <Map__string_List__string>Map__string_List__string.__new__(Map__string_List__string)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 */

static PyObject *__pyx_f_6picard_5types_24Map__string_List__string_create(std::shared_ptr<std::map<std::string,std::vector<std::string> > >  __pyx_v_c_items) {
  struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v___fbthrift_inst = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create", 0);

  /* "picard/types.pyx":2114
 *     @staticmethod
 *     cdef create(shared_ptr[cmap[string,vector[string]]] c_items):
 *         __fbthrift_inst = <Map__string_List__string>Map__string_List__string.__new__(Map__string_List__string)             # <<<<<<<<<<<<<<
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 *         return __fbthrift_inst
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_6picard_5types_Map__string_List__string(((PyTypeObject *)__pyx_ptype_6picard_5types_Map__string_List__string), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2114, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = ((PyObject *)__pyx_t_1);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_Map__string_List__string *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":2115
 *     cdef create(shared_ptr[cmap[string,vector[string]]] c_items):
 *         __fbthrift_inst = <Map__string_List__string>Map__string_List__string.__new__(Map__string_List__string)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)             # <<<<<<<<<<<<<<
 *         return __fbthrift_inst
 * 
 */
  __pyx_v___fbthrift_inst->_cpp_obj = cython_std::move<std::shared_ptr<std::map<std::string,std::vector<std::string> > > >(__pyx_v_c_items);

  /* "picard/types.pyx":2116
 *         __fbthrift_inst = <Map__string_List__string>Map__string_List__string.__new__(Map__string_List__string)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 *         return __fbthrift_inst             # <<<<<<<<<<<<<<
 * 
 *     def __copy__(Map__string_List__string self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v___fbthrift_inst));
  __pyx_r = ((PyObject *)__pyx_v___fbthrift_inst);
  goto __pyx_L0;

  /* "picard/types.pyx":2113
 * 
 *     @staticmethod
 *     cdef create(shared_ptr[cmap[string,vector[string]]] c_items):             # <<<<<<<<<<<<<<
 *         __fbthrift_inst = <Map__string_List__string>Map__string_List__string.__new__(Map__string_List__string)
 *         __fbthrift_inst._cpp_obj = cmove(c_items)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.Map__string_List__string.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v___fbthrift_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2118
 *         return __fbthrift_inst
 * 
 *     def __copy__(Map__string_List__string self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cmap[string,vector[string]]] cpp_obj = make_shared[cmap[string,vector[string]]](
 *             deref(self._cpp_obj)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_24Map__string_List__string_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_24Map__string_List__string_3__copy__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__copy__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_24Map__string_List__string_2__copy__(((struct __pyx_obj_6picard_5types_Map__string_List__string *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_24Map__string_List__string_2__copy__(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self) {
  std::shared_ptr<std::map<std::string,std::vector<std::string> > >  __pyx_v_cpp_obj;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<std::map<std::string,std::vector<std::string> > >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__copy__", 0);

  /* "picard/types.pyx":2119
 * 
 *     def __copy__(Map__string_List__string self):
 *         cdef shared_ptr[cmap[string,vector[string]]] cpp_obj = make_shared[cmap[string,vector[string]]](             # <<<<<<<<<<<<<<
 *             deref(self._cpp_obj)
 *         )
 */
  try {
    __pyx_t_1 = std::make_shared<std::map<std::string,std::vector<std::string> > >((*__pyx_v_self->_cpp_obj));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2119, __pyx_L1_error)
  }
  __pyx_v_cpp_obj = __pyx_t_1;

  /* "picard/types.pyx":2122
 *             deref(self._cpp_obj)
 *         )
 *         return Map__string_List__string.create(cmove(cpp_obj))             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_24Map__string_List__string_create(cython_std::move<std::shared_ptr<std::map<std::string,std::vector<std::string> > > >(__pyx_v_cpp_obj)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":2118
 *         return __fbthrift_inst
 * 
 *     def __copy__(Map__string_List__string self):             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cmap[string,vector[string]]] cpp_obj = make_shared[cmap[string,vector[string]]](
 *             deref(self._cpp_obj)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("picard.types.Map__string_List__string.__copy__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2124
 *         return Map__string_List__string.create(cmove(cpp_obj))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return deref(self._cpp_obj).size()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6picard_5types_24Map__string_List__string_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6picard_5types_24Map__string_List__string_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_24Map__string_List__string_4__len__(((struct __pyx_obj_6picard_5types_Map__string_List__string *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6picard_5types_24Map__string_List__string_4__len__(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "picard/types.pyx":2125
 * 
 *     def __len__(self):
 *         return deref(self._cpp_obj).size()             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_r = (*__pyx_v_self->_cpp_obj).size();
  goto __pyx_L0;

  /* "picard/types.pyx":2124
 *         return Map__string_List__string.create(cmove(cpp_obj))
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return deref(self._cpp_obj).size()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2128
 * 
 *     @staticmethod
 *     cdef shared_ptr[cmap[string,vector[string]]] _make_instance(object items) except *:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cmap[string,vector[string]]] c_inst = make_shared[cmap[string,vector[string]]]()
 *         if items is not None:
 */

static std::shared_ptr<std::map<std::string,std::vector<std::string> > >  __pyx_f_6picard_5types_24Map__string_List__string__make_instance(PyObject *__pyx_v_items) {
  std::shared_ptr<std::map<std::string,std::vector<std::string> > >  __pyx_v_c_inst;
  PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_item = NULL;
  std::shared_ptr<std::map<std::string,std::vector<std::string> > >  __pyx_r;
  __Pyx_RefNannyDeclarations
  std::shared_ptr<std::map<std::string,std::vector<std::string> > >  __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  std::string __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_make_instance", 0);

  /* "picard/types.pyx":2129
 *     @staticmethod
 *     cdef shared_ptr[cmap[string,vector[string]]] _make_instance(object items) except *:
 *         cdef shared_ptr[cmap[string,vector[string]]] c_inst = make_shared[cmap[string,vector[string]]]()             # <<<<<<<<<<<<<<
 *         if items is not None:
 *             for key, item in items.items():
 */
  try {
    __pyx_t_1 = std::make_shared<std::map<std::string,std::vector<std::string> > >();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 2129, __pyx_L1_error)
  }
  __pyx_v_c_inst = __pyx_t_1;

  /* "picard/types.pyx":2130
 *     cdef shared_ptr[cmap[string,vector[string]]] _make_instance(object items) except *:
 *         cdef shared_ptr[cmap[string,vector[string]]] c_inst = make_shared[cmap[string,vector[string]]]()
 *         if items is not None:             # <<<<<<<<<<<<<<
 *             for key, item in items.items():
 *                 if not isinstance(key, str):
 */
  __pyx_t_2 = (__pyx_v_items != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "picard/types.pyx":2131
 *         cdef shared_ptr[cmap[string,vector[string]]] c_inst = make_shared[cmap[string,vector[string]]]()
 *         if items is not None:
 *             for key, item in items.items():             # <<<<<<<<<<<<<<
 *                 if not isinstance(key, str):
 *                     raise TypeError(f"{key!r} is not of type str")
 */
    __pyx_t_5 = 0;
    if (unlikely(__pyx_v_items == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 2131, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_items, 0, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4);
    __pyx_t_4 = __pyx_t_8;
    __pyx_t_8 = 0;
    while (1) {
      __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_6, &__pyx_t_5, &__pyx_t_8, &__pyx_t_9, NULL, __pyx_t_7);
      if (unlikely(__pyx_t_10 == 0)) break;
      if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 2131, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "picard/types.pyx":2132
 *         if items is not None:
 *             for key, item in items.items():
 *                 if not isinstance(key, str):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if item is None:
 */
      __pyx_t_3 = PyUnicode_Check(__pyx_v_key); 
      __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
      if (unlikely(__pyx_t_2)) {

        /* "picard/types.pyx":2133
 *             for key, item in items.items():
 *                 if not isinstance(key, str):
 *                     raise TypeError(f"{key!r} is not of type str")             # <<<<<<<<<<<<<<
 *                 if item is None:
 *                     raise TypeError("None is not of type _typing.Sequence[str]")
 */
        __pyx_t_9 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Repr(__pyx_v_key), __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_t_9, __pyx_kp_u_is_not_of_type_str); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __PYX_ERR(0, 2133, __pyx_L1_error)

        /* "picard/types.pyx":2132
 *         if items is not None:
 *             for key, item in items.items():
 *                 if not isinstance(key, str):             # <<<<<<<<<<<<<<
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if item is None:
 */
      }

      /* "picard/types.pyx":2134
 *                 if not isinstance(key, str):
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if item is None:             # <<<<<<<<<<<<<<
 *                     raise TypeError("None is not of type _typing.Sequence[str]")
 *                 if not isinstance(item, List__string):
 */
      __pyx_t_2 = (__pyx_v_item == Py_None);
      __pyx_t_3 = (__pyx_t_2 != 0);
      if (unlikely(__pyx_t_3)) {

        /* "picard/types.pyx":2135
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if item is None:
 *                     raise TypeError("None is not of type _typing.Sequence[str]")             # <<<<<<<<<<<<<<
 *                 if not isinstance(item, List__string):
 *                     item = List__string(item)
 */
        __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_Raise(__pyx_t_9, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __PYX_ERR(0, 2135, __pyx_L1_error)

        /* "picard/types.pyx":2134
 *                 if not isinstance(key, str):
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if item is None:             # <<<<<<<<<<<<<<
 *                     raise TypeError("None is not of type _typing.Sequence[str]")
 *                 if not isinstance(item, List__string):
 */
      }

      /* "picard/types.pyx":2136
 *                 if item is None:
 *                     raise TypeError("None is not of type _typing.Sequence[str]")
 *                 if not isinstance(item, List__string):             # <<<<<<<<<<<<<<
 *                     item = List__string(item)
 * 
 */
      __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_item, __pyx_ptype_6picard_5types_List__string); 
      __pyx_t_2 = ((!(__pyx_t_3 != 0)) != 0);
      if (__pyx_t_2) {

        /* "picard/types.pyx":2137
 *                     raise TypeError("None is not of type _typing.Sequence[str]")
 *                 if not isinstance(item, List__string):
 *                     item = List__string(item)             # <<<<<<<<<<<<<<
 * 
 *                 deref(c_inst)[key.encode('UTF-8')] = deref((<List__string>item)._cpp_obj)
 */
        __pyx_t_9 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_6picard_5types_List__string), __pyx_v_item); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF_SET(__pyx_v_item, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "picard/types.pyx":2136
 *                 if item is None:
 *                     raise TypeError("None is not of type _typing.Sequence[str]")
 *                 if not isinstance(item, List__string):             # <<<<<<<<<<<<<<
 *                     item = List__string(item)
 * 
 */
      }

      /* "picard/types.pyx":2139
 *                     item = List__string(item)
 * 
 *                 deref(c_inst)[key.encode('UTF-8')] = deref((<List__string>item)._cpp_obj)             # <<<<<<<<<<<<<<
 *         return c_inst
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      __pyx_t_9 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_11, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_kp_u_UTF_8);
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_12 = __pyx_convert_string_from_py_std__in_string(__pyx_t_9); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2139, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      ((*__pyx_v_c_inst)[__pyx_t_12]) = (*((struct __pyx_obj_6picard_5types_List__string *)__pyx_v_item)->_cpp_obj);
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "picard/types.pyx":2130
 *     cdef shared_ptr[cmap[string,vector[string]]] _make_instance(object items) except *:
 *         cdef shared_ptr[cmap[string,vector[string]]] c_inst = make_shared[cmap[string,vector[string]]]()
 *         if items is not None:             # <<<<<<<<<<<<<<
 *             for key, item in items.items():
 *                 if not isinstance(key, str):
 */
  }

  /* "picard/types.pyx":2140
 * 
 *                 deref(c_inst)[key.encode('UTF-8')] = deref((<List__string>item)._cpp_obj)
 *         return c_inst             # <<<<<<<<<<<<<<
 * 
 *     cdef _check_key_type(self, key):
 */
  __pyx_r = __pyx_v_c_inst;
  goto __pyx_L0;

  /* "picard/types.pyx":2128
 * 
 *     @staticmethod
 *     cdef shared_ptr[cmap[string,vector[string]]] _make_instance(object items) except *:             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[cmap[string,vector[string]]] c_inst = make_shared[cmap[string,vector[string]]]()
 *         if items is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("picard.types.Map__string_List__string._make_instance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2142
 *         return c_inst
 * 
 *     cdef _check_key_type(self, key):             # <<<<<<<<<<<<<<
 *         if not self or key is None:
 *             return
 */

static PyObject *__pyx_f_6picard_5types_24Map__string_List__string__check_key_type(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_key_type", 0);

  /* "picard/types.pyx":2143
 * 
 *     cdef _check_key_type(self, key):
 *         if not self or key is None:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(key, str):
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 2143, __pyx_L1_error)
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_key == Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "picard/types.pyx":2144
 *     cdef _check_key_type(self, key):
 *         if not self or key is None:
 *             return             # <<<<<<<<<<<<<<
 *         if isinstance(key, str):
 *             return key
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "picard/types.pyx":2143
 * 
 *     cdef _check_key_type(self, key):
 *         if not self or key is None:             # <<<<<<<<<<<<<<
 *             return
 *         if isinstance(key, str):
 */
  }

  /* "picard/types.pyx":2145
 *         if not self or key is None:
 *             return
 *         if isinstance(key, str):             # <<<<<<<<<<<<<<
 *             return key
 * 
 */
  __pyx_t_1 = PyUnicode_Check(__pyx_v_key); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":2146
 *             return
 *         if isinstance(key, str):
 *             return key             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, key):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_key);
    __pyx_r = __pyx_v_key;
    goto __pyx_L0;

    /* "picard/types.pyx":2145
 *         if not self or key is None:
 *             return
 *         if isinstance(key, str):             # <<<<<<<<<<<<<<
 *             return key
 * 
 */
  }

  /* "picard/types.pyx":2142
 *         return c_inst
 * 
 *     cdef _check_key_type(self, key):             # <<<<<<<<<<<<<<
 *         if not self or key is None:
 *             return
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_List__string._check_key_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2148
 *             return key
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_24Map__string_List__string_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static PyObject *__pyx_pw_6picard_5types_24Map__string_List__string_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_24Map__string_List__string_6__getitem__(((struct __pyx_obj_6picard_5types_Map__string_List__string *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_24Map__string_List__string_6__getitem__(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self, PyObject *__pyx_v_key) {
  PyObject *__pyx_v_err = NULL;
  std::string __pyx_v_ckey;
  std::shared_ptr<std::vector<std::string> >  __pyx_v_citem;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "picard/types.pyx":2149
 * 
 *     def __getitem__(self, key):
 *         err = KeyError(f'{key}')             # <<<<<<<<<<<<<<
 *         key = self._check_key_type(key)
 *         if key is None:
 */
  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_v_key, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_KeyError, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_err = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "picard/types.pyx":2150
 *     def __getitem__(self, key):
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)             # <<<<<<<<<<<<<<
 *         if key is None:
 *             raise err
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_6picard_5types_Map__string_List__string *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._check_key_type(((struct __pyx_obj_6thrift_3py3_5types_Map *)__pyx_v_self), __pyx_v_key); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "picard/types.pyx":2151
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)
 *         if key is None:             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')
 */
  __pyx_t_3 = (__pyx_v_key == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (unlikely(__pyx_t_4)) {

    /* "picard/types.pyx":2152
 *         key = self._check_key_type(key)
 *         if key is None:
 *             raise err             # <<<<<<<<<<<<<<
 *         cdef string ckey = key.encode('UTF-8')
 *         if not __map_contains(self._cpp_obj, ckey):
 */
    __Pyx_Raise(__pyx_v_err, 0, 0, 0);
    __PYX_ERR(0, 2152, __pyx_L1_error)

    /* "picard/types.pyx":2151
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)
 *         if key is None:             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')
 */
  }

  /* "picard/types.pyx":2153
 *         if key is None:
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         if not __map_contains(self._cpp_obj, ckey):
 *             raise err
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_kp_u_UTF_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ckey = __pyx_t_6;

  /* "picard/types.pyx":2154
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')
 *         if not __map_contains(self._cpp_obj, ckey):             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef shared_ptr[vector[string]] citem
 */
  __pyx_t_4 = ((!(::thrift::py3::map_contains<std::map<std::string,std::vector<std::string> > >(__pyx_v_self->_cpp_obj, __pyx_v_ckey) != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "picard/types.pyx":2155
 *         cdef string ckey = key.encode('UTF-8')
 *         if not __map_contains(self._cpp_obj, ckey):
 *             raise err             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[string]] citem
 *         __map_getitem(self._cpp_obj, ckey, citem)
 */
    __Pyx_Raise(__pyx_v_err, 0, 0, 0);
    __PYX_ERR(0, 2155, __pyx_L1_error)

    /* "picard/types.pyx":2154
 *             raise err
 *         cdef string ckey = key.encode('UTF-8')
 *         if not __map_contains(self._cpp_obj, ckey):             # <<<<<<<<<<<<<<
 *             raise err
 *         cdef shared_ptr[vector[string]] citem
 */
  }

  /* "picard/types.pyx":2157
 *             raise err
 *         cdef shared_ptr[vector[string]] citem
 *         __map_getitem(self._cpp_obj, ckey, citem)             # <<<<<<<<<<<<<<
 *         return List__string.create(citem)
 * 
 */
  ::thrift::py3::map_getitem<std::map<std::string,std::vector<std::string> > >(__pyx_v_self->_cpp_obj, __pyx_v_ckey, __pyx_v_citem);

  /* "picard/types.pyx":2158
 *         cdef shared_ptr[vector[string]] citem
 *         __map_getitem(self._cpp_obj, ckey, citem)
 *         return List__string.create(citem)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_f_6picard_5types_12List__string_create(__pyx_v_citem); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":2148
 *             return key
 * 
 *     def __getitem__(self, key):             # <<<<<<<<<<<<<<
 *         err = KeyError(f'{key}')
 *         key = self._check_key_type(key)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.Map__string_List__string.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_err);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6picard_5types_24Map__string_List__string_10generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "picard/types.pyx":2160
 *         return List__string.create(citem)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_24Map__string_List__string_9__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6picard_5types_24Map__string_List__string_9__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_24Map__string_List__string_8__iter__(((struct __pyx_obj_6picard_5types_Map__string_List__string *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_24Map__string_List__string_8__iter__(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__iter__", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__ *)__pyx_tp_new_6picard_5types___pyx_scope_struct_12___iter__(__pyx_ptype_6picard_5types___pyx_scope_struct_12___iter__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2160, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6picard_5types_24Map__string_List__string_10generator6, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter, __pyx_n_s_Map__string_List__string___iter, __pyx_n_s_picard_types); if (unlikely(!gen)) __PYX_ERR(0, 2160, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_List__string.__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6picard_5types_24Map__string_List__string_10generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__ *__pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__ *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2160, __pyx_L1_error)

  /* "picard/types.pyx":2161
 * 
 *     def __iter__(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,vector[string]]] itr = __map_iter[cmap[string,vector[string]]](self._cpp_obj)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_self)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2161, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":2162
 *     def __iter__(self):
 *         if not self:
 *             return             # <<<<<<<<<<<<<<
 *         cdef __map_iter[cmap[string,vector[string]]] itr = __map_iter[cmap[string,vector[string]]](self._cpp_obj)
 *         cdef string citem
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "picard/types.pyx":2161
 * 
 *     def __iter__(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,vector[string]]] itr = __map_iter[cmap[string,vector[string]]](self._cpp_obj)
 */
  }

  /* "picard/types.pyx":2163
 *         if not self:
 *             return
 *         cdef __map_iter[cmap[string,vector[string]]] itr = __map_iter[cmap[string,vector[string]]](self._cpp_obj)             # <<<<<<<<<<<<<<
 *         cdef string citem
 *         for i in range(deref(self._cpp_obj).size()):
 */
  __pyx_cur_scope->__pyx_v_itr = ::thrift::py3::map_iter<std::map<std::string,std::vector<std::string> > > (__pyx_cur_scope->__pyx_v_self->_cpp_obj);

  /* "picard/types.pyx":2165
 *         cdef __map_iter[cmap[string,vector[string]]] itr = __map_iter[cmap[string,vector[string]]](self._cpp_obj)
 *         cdef string citem
 *         for i in range(deref(self._cpp_obj).size()):             # <<<<<<<<<<<<<<
 *             itr.genNextKey(self._cpp_obj, citem)
 *             yield bytes(citem).decode('UTF-8')
 */
  __pyx_t_3 = (*__pyx_cur_scope->__pyx_v_self->_cpp_obj).size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_5;

    /* "picard/types.pyx":2166
 *         cdef string citem
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextKey(self._cpp_obj, citem)             # <<<<<<<<<<<<<<
 *             yield bytes(citem).decode('UTF-8')
 * 
 */
    __pyx_cur_scope->__pyx_v_itr.genNextKey(__pyx_cur_scope->__pyx_v_self->_cpp_obj, __pyx_cur_scope->__pyx_v_citem);

    /* "picard/types.pyx":2167
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextKey(self._cpp_obj, citem)
 *             yield bytes(citem).decode('UTF-8')             # <<<<<<<<<<<<<<
 * 
 *     def __contains__(self, key):
 */
    __pyx_t_6 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_cur_scope->__pyx_v_citem); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyBytes_Type)), __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_decode_bytes(__pyx_t_7, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2167, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2167, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "picard/types.pyx":2160
 *         return List__string.create(citem)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("__iter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2169
 *             yield bytes(citem).decode('UTF-8')
 * 
 *     def __contains__(self, key):             # <<<<<<<<<<<<<<
 *         key = self._check_key_type(key)
 *         if key is None:
 */

/* Python wrapper */
static int __pyx_pw_6picard_5types_24Map__string_List__string_12__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key); /*proto*/
static int __pyx_pw_6picard_5types_24Map__string_List__string_12__contains__(PyObject *__pyx_v_self, PyObject *__pyx_v_key) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__contains__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_24Map__string_List__string_11__contains__(((struct __pyx_obj_6picard_5types_Map__string_List__string *)__pyx_v_self), ((PyObject *)__pyx_v_key));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6picard_5types_24Map__string_List__string_11__contains__(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self, PyObject *__pyx_v_key) {
  std::string __pyx_v_ckey;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__contains__", 0);
  __Pyx_INCREF(__pyx_v_key);

  /* "picard/types.pyx":2170
 * 
 *     def __contains__(self, key):
 *         key = self._check_key_type(key)             # <<<<<<<<<<<<<<
 *         if key is None:
 *             return False
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6picard_5types_Map__string_List__string *)__pyx_v_self->__pyx_base.__pyx_vtab)->__pyx_base._check_key_type(((struct __pyx_obj_6thrift_3py3_5types_Map *)__pyx_v_self), __pyx_v_key); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF_SET(__pyx_v_key, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":2171
 *     def __contains__(self, key):
 *         key = self._check_key_type(key)
 *         if key is None:             # <<<<<<<<<<<<<<
 *             return False
 *         cdef string ckey = key.encode('UTF-8')
 */
  __pyx_t_2 = (__pyx_v_key == Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "picard/types.pyx":2172
 *         key = self._check_key_type(key)
 *         if key is None:
 *             return False             # <<<<<<<<<<<<<<
 *         cdef string ckey = key.encode('UTF-8')
 *         return __map_contains(self._cpp_obj, ckey)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "picard/types.pyx":2171
 *     def __contains__(self, key):
 *         key = self._check_key_type(key)
 *         if key is None:             # <<<<<<<<<<<<<<
 *             return False
 *         cdef string ckey = key.encode('UTF-8')
 */
  }

  /* "picard/types.pyx":2173
 *         if key is None:
 *             return False
 *         cdef string ckey = key.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         return __map_contains(self._cpp_obj, ckey)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_key, __pyx_n_s_encode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_kp_u_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_kp_u_UTF_8);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2173, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 2173, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_ckey = __pyx_t_6;

  /* "picard/types.pyx":2174
 *             return False
 *         cdef string ckey = key.encode('UTF-8')
 *         return __map_contains(self._cpp_obj, ckey)             # <<<<<<<<<<<<<<
 * 
 *     def values(self):
 */
  __pyx_r = ::thrift::py3::map_contains<std::map<std::string,std::vector<std::string> > >(__pyx_v_self->_cpp_obj, __pyx_v_ckey);
  goto __pyx_L0;

  /* "picard/types.pyx":2169
 *             yield bytes(citem).decode('UTF-8')
 * 
 *     def __contains__(self, key):             # <<<<<<<<<<<<<<
 *         key = self._check_key_type(key)
 *         if key is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("picard.types.Map__string_List__string.__contains__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6picard_5types_24Map__string_List__string_15generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "picard/types.pyx":2176
 *         return __map_contains(self._cpp_obj, ckey)
 * 
 *     def values(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_24Map__string_List__string_14values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_24Map__string_List__string_14values(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("values (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_24Map__string_List__string_13values(((struct __pyx_obj_6picard_5types_Map__string_List__string *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_24Map__string_List__string_13values(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("values", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values *)__pyx_tp_new_6picard_5types___pyx_scope_struct_13_values(__pyx_ptype_6picard_5types___pyx_scope_struct_13_values, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2176, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6picard_5types_24Map__string_List__string_15generator7, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_values, __pyx_n_s_Map__string_List__string_values, __pyx_n_s_picard_types); if (unlikely(!gen)) __PYX_ERR(0, 2176, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_List__string.values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6picard_5types_24Map__string_List__string_15generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values *__pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("values", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2176, __pyx_L1_error)

  /* "picard/types.pyx":2177
 * 
 *     def values(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,vector[string]]] itr = __map_iter[cmap[string,vector[string]]](self._cpp_obj)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_self)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2177, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":2178
 *     def values(self):
 *         if not self:
 *             return             # <<<<<<<<<<<<<<
 *         cdef __map_iter[cmap[string,vector[string]]] itr = __map_iter[cmap[string,vector[string]]](self._cpp_obj)
 *         cdef shared_ptr[vector[string]] citem
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "picard/types.pyx":2177
 * 
 *     def values(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,vector[string]]] itr = __map_iter[cmap[string,vector[string]]](self._cpp_obj)
 */
  }

  /* "picard/types.pyx":2179
 *         if not self:
 *             return
 *         cdef __map_iter[cmap[string,vector[string]]] itr = __map_iter[cmap[string,vector[string]]](self._cpp_obj)             # <<<<<<<<<<<<<<
 *         cdef shared_ptr[vector[string]] citem
 *         for i in range(deref(self._cpp_obj).size()):
 */
  __pyx_cur_scope->__pyx_v_itr = ::thrift::py3::map_iter<std::map<std::string,std::vector<std::string> > > (__pyx_cur_scope->__pyx_v_self->_cpp_obj);

  /* "picard/types.pyx":2181
 *         cdef __map_iter[cmap[string,vector[string]]] itr = __map_iter[cmap[string,vector[string]]](self._cpp_obj)
 *         cdef shared_ptr[vector[string]] citem
 *         for i in range(deref(self._cpp_obj).size()):             # <<<<<<<<<<<<<<
 *             itr.genNextValue(self._cpp_obj, citem)
 *             yield List__string.create(citem)
 */
  __pyx_t_3 = (*__pyx_cur_scope->__pyx_v_self->_cpp_obj).size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_5;

    /* "picard/types.pyx":2182
 *         cdef shared_ptr[vector[string]] citem
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextValue(self._cpp_obj, citem)             # <<<<<<<<<<<<<<
 *             yield List__string.create(citem)
 * 
 */
    __pyx_cur_scope->__pyx_v_itr.genNextValue(__pyx_cur_scope->__pyx_v_self->_cpp_obj, __pyx_cur_scope->__pyx_v_citem);

    /* "picard/types.pyx":2183
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextValue(self._cpp_obj, citem)
 *             yield List__string.create(citem)             # <<<<<<<<<<<<<<
 * 
 *     def items(self):
 */
    __pyx_t_6 = __pyx_f_6picard_5types_12List__string_create(__pyx_cur_scope->__pyx_v_citem); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2183, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "picard/types.pyx":2176
 *         return __map_contains(self._cpp_obj, ckey)
 * 
 *     def values(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6picard_5types_24Map__string_List__string_18generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "picard/types.pyx":2185
 *             yield List__string.create(citem)
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_24Map__string_List__string_17items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6picard_5types_24Map__string_List__string_17items(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items (wrapper)", 0);
  __pyx_r = __pyx_pf_6picard_5types_24Map__string_List__string_16items(((struct __pyx_obj_6picard_5types_Map__string_List__string *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_24Map__string_List__string_16items(struct __pyx_obj_6picard_5types_Map__string_List__string *__pyx_v_self) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("items", 0);
  __pyx_cur_scope = (struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items *)__pyx_tp_new_6picard_5types___pyx_scope_struct_14_items(__pyx_ptype_6picard_5types___pyx_scope_struct_14_items, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 2185, __pyx_L1_error)
  } else {
    __Pyx_GOTREF(__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6picard_5types_24Map__string_List__string_18generator8, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_items, __pyx_n_s_Map__string_List__string_items, __pyx_n_s_picard_types); if (unlikely(!gen)) __PYX_ERR(0, 2185, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("picard.types.Map__string_List__string.items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6picard_5types_24Map__string_List__string_18generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items *__pyx_cur_scope = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  size_t __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("items", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2185, __pyx_L1_error)

  /* "picard/types.pyx":2186
 * 
 *     def items(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,vector[string]]] itr = __map_iter[cmap[string,vector[string]]](self._cpp_obj)
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(((PyObject *)__pyx_cur_scope->__pyx_v_self)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 2186, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "picard/types.pyx":2187
 *     def items(self):
 *         if not self:
 *             return             # <<<<<<<<<<<<<<
 *         cdef __map_iter[cmap[string,vector[string]]] itr = __map_iter[cmap[string,vector[string]]](self._cpp_obj)
 *         cdef string ckey
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = NULL;
    goto __pyx_L0;

    /* "picard/types.pyx":2186
 * 
 *     def items(self):
 *         if not self:             # <<<<<<<<<<<<<<
 *             return
 *         cdef __map_iter[cmap[string,vector[string]]] itr = __map_iter[cmap[string,vector[string]]](self._cpp_obj)
 */
  }

  /* "picard/types.pyx":2188
 *         if not self:
 *             return
 *         cdef __map_iter[cmap[string,vector[string]]] itr = __map_iter[cmap[string,vector[string]]](self._cpp_obj)             # <<<<<<<<<<<<<<
 *         cdef string ckey
 *         cdef shared_ptr[vector[string]] citem
 */
  __pyx_cur_scope->__pyx_v_itr = ::thrift::py3::map_iter<std::map<std::string,std::vector<std::string> > > (__pyx_cur_scope->__pyx_v_self->_cpp_obj);

  /* "picard/types.pyx":2191
 *         cdef string ckey
 *         cdef shared_ptr[vector[string]] citem
 *         for i in range(deref(self._cpp_obj).size()):             # <<<<<<<<<<<<<<
 *             itr.genNextItem(self._cpp_obj, ckey, citem)
 *             yield (ckey.data().decode('UTF-8'), List__string.create(citem))
 */
  __pyx_t_3 = (*__pyx_cur_scope->__pyx_v_self->_cpp_obj).size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_5;

    /* "picard/types.pyx":2192
 *         cdef shared_ptr[vector[string]] citem
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextItem(self._cpp_obj, ckey, citem)             # <<<<<<<<<<<<<<
 *             yield (ckey.data().decode('UTF-8'), List__string.create(citem))
 * 
 */
    __pyx_cur_scope->__pyx_v_itr.genNextItem(__pyx_cur_scope->__pyx_v_self->_cpp_obj, __pyx_cur_scope->__pyx_v_ckey, __pyx_cur_scope->__pyx_v_citem);

    /* "picard/types.pyx":2193
 *         for i in range(deref(self._cpp_obj).size()):
 *             itr.genNextItem(self._cpp_obj, ckey, citem)
 *             yield (ckey.data().decode('UTF-8'), List__string.create(citem))             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_6 = __pyx_cur_scope->__pyx_v_ckey.data();
    __pyx_t_7 = __Pyx_decode_c_string(__pyx_t_6, 0, strlen(__pyx_t_6), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __pyx_f_6picard_5types_12List__string_create(__pyx_cur_scope->__pyx_v_citem); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 2193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 2193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_8 = 0;
    __pyx_r = __pyx_t_9;
    __pyx_t_9 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_5;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L7_resume_from_yield:;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_5 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 2193, __pyx_L1_error)
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "picard/types.pyx":2185
 *             yield List__string.create(citem)
 * 
 *     def items(self):             # <<<<<<<<<<<<<<
 *         if not self:
 *             return
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("items", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "picard/types.pyx":2196
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__Map__string_List__string()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6picard_5types_24Map__string_List__string_20__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6picard_5types_24Map__string_List__string_20__get_reflection__ = {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_24Map__string_List__string_20__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6picard_5types_24Map__string_List__string_20__get_reflection__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get_reflection__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__get_reflection__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__get_reflection__", 0))) return NULL;
  __pyx_r = __pyx_pf_6picard_5types_24Map__string_List__string_19__get_reflection__();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6picard_5types_24Map__string_List__string_19__get_reflection__(void) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get_reflection__", 0);

  /* "picard/types.pyx":2197
 *     @staticmethod
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__Map__string_List__string()             # <<<<<<<<<<<<<<
 * 
 * Mapping.register(Map__string_List__string)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_f_6picard_16types_reflection_get_reflection__Map__string_List__string()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "picard/types.pyx":2196
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__Map__string_List__string()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("picard.types.Map__string_List__string.__get_reflection__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrift/py3/std_libcpp.pxd":101
 *         const char* data()
 * 
 * cdef inline str sv_to_str(string_view sv) except +:             # <<<<<<<<<<<<<<
 *     return sv.data().decode("utf-8")
 */

static CYTHON_INLINE PyObject *__pyx_f_6thrift_3py3_10std_libcpp_sv_to_str(std::string_view __pyx_v_sv) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sv_to_str", 0);

  /* "thrift/py3/std_libcpp.pxd":102
 * 
 * cdef inline str sv_to_str(string_view sv) except +:
 *     return sv.data().decode("utf-8")             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_sv.data();
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_t_1, 0, strlen(__pyx_t_1), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "unicode", Py_TYPE(__pyx_t_2)->tp_name), 0))) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_INCREF(__pyx_t_2);
  __pyx_r = ((PyObject*)__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "thrift/py3/std_libcpp.pxd":101
 *         const char* data()
 * 
 * cdef inline str sv_to_str(string_view sv) except +:             # <<<<<<<<<<<<<<
 *     return sv.data().decode("utf-8")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("thrift.py3.std_libcpp.sv_to_str", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrift/py3/common.pxd":43
 * 
 * 
 * cdef inline cPriority Priority_to_cpp(object value):             # <<<<<<<<<<<<<<
 *     cdef int cvalue = value.value
 *     return <cPriority>cvalue
 */

static CYTHON_INLINE enum apache::thrift::concurrency::PRIORITY __pyx_f_6thrift_3py3_6common_Priority_to_cpp(PyObject *__pyx_v_value) {
  int __pyx_v_cvalue;
  enum apache::thrift::concurrency::PRIORITY __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Priority_to_cpp", 0);

  /* "thrift/py3/common.pxd":44
 * 
 * cdef inline cPriority Priority_to_cpp(object value):
 *     cdef int cvalue = value.value             # <<<<<<<<<<<<<<
 *     return <cPriority>cvalue
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cvalue = __pyx_t_2;

  /* "thrift/py3/common.pxd":45
 * cdef inline cPriority Priority_to_cpp(object value):
 *     cdef int cvalue = value.value
 *     return <cPriority>cvalue             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((enum apache::thrift::concurrency::PRIORITY)__pyx_v_cvalue);
  goto __pyx_L0;

  /* "thrift/py3/common.pxd":43
 * 
 * 
 * cdef inline cPriority Priority_to_cpp(object value):             # <<<<<<<<<<<<<<
 *     cdef int cvalue = value.value
 *     return <cPriority>cvalue
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("thrift.py3.common.Priority_to_cpp", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = (enum apache::thrift::concurrency::PRIORITY) 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "folly/range.pxd":18
 * 
 * # Conversion Helpers
 * cdef inline bytes to_bytes(R range):             # <<<<<<<<<<<<<<
 *     return <bytes>range.data()[:range.size()]
 */

static CYTHON_INLINE PyObject *__pyx_fuse_0__pyx_f_5folly_5range_to_bytes(__pyx_t_5folly_5range_StringPiece __pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_0to_bytes", 0);

  /* "folly/range.pxd":19
 * # Conversion Helpers
 * cdef inline bytes to_bytes(R range):
 *     return <bytes>range.data()[:range.size()]             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_range.data() + 0, __pyx_v_range.size() - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "folly/range.pxd":18
 * 
 * # Conversion Helpers
 * cdef inline bytes to_bytes(R range):             # <<<<<<<<<<<<<<
 *     return <bytes>range.data()[:range.size()]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("folly.range.to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static CYTHON_INLINE PyObject *__pyx_fuse_1__pyx_f_5folly_5range_to_bytes(__pyx_t_5folly_5range_ByteRange __pyx_v_range) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_fuse_1to_bytes", 0);

  /* "folly/range.pxd":19
 * # Conversion Helpers
 * cdef inline bytes to_bytes(R range):
 *     return <bytes>range.data()[:range.size()]             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(((const char*)__pyx_v_range.data()) + 0, __pyx_v_range.size() - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "folly/range.pxd":18
 * 
 * # Conversion Helpers
 * cdef inline bytes to_bytes(R range):             # <<<<<<<<<<<<<<
 *     return <bytes>range.data()[:range.size()]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("folly.range.to_bytes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thrift/py3/types.pxd":214
 * 
 * 
 * cdef inline string bytes_to_string(bytes b) except*:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data
 */

static CYTHON_INLINE std::string __pyx_f_6thrift_3py3_5types_bytes_to_string(PyObject *__pyx_v_b) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("bytes_to_string", 0);

  /* "thrift/py3/types.pxd":217
 *     cdef Py_ssize_t length
 *     cdef char* data
 *     PyBytes_AsStringAndSize(b, &data, &length)             # <<<<<<<<<<<<<<
 *     return move(string(data, length))  # there is a temp because string can raise
 * 
 */
  __pyx_t_1 = PyBytes_AsStringAndSize(__pyx_v_b, (&__pyx_v_data), (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(4, 217, __pyx_L1_error)

  /* "thrift/py3/types.pxd":218
 *     cdef char* data
 *     PyBytes_AsStringAndSize(b, &data, &length)
 *     return move(string(data, length))  # there is a temp because string can raise             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_2 = std::string(__pyx_v_data, __pyx_v_length);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(4, 218, __pyx_L1_error)
  }
  __pyx_r = std::move(__pyx_t_2);
  goto __pyx_L0;

  /* "thrift/py3/types.pxd":214
 * 
 * 
 * cdef inline string bytes_to_string(bytes b) except*:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("thrift.py3.types.bytes_to_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char const *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char const *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":14
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0             # <<<<<<<<<<<<<<
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)
 */
  __pyx_v_length = 0;

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == ((char const *)NULL))) __PYX_ERR(5, 15, __pyx_L1_error)
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length = 0
 *     cdef const char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(5, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(5, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(5, 122, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(5, 122, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 123, __pyx_L3_error)
    } else {

      /* "View.MemoryView":123
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(5, 122, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(5, 122, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":129
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(5, 129, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(5, 129, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":130
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 133, __pyx_L1_error)

    /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 136, __pyx_L1_error)

    /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":139
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":140
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(5, 140, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":141
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(5, 141, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(5, 141, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":144
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":145
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 148, __pyx_L1_error)

    /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_8 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(5, 151, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(5, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":153
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(5, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(5, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(5, 153, __pyx_L1_error)

      /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":154
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(5, 157, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":158
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":159
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(5, 160, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":161
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":162
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":164
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(5, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(5, 164, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":166
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":169
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":170
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(5, 170, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":174
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(5, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(5, 176, __pyx_L1_error)

      /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":179
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":180
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(5, 180, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(5, 180, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      __pyx_t_9 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":181
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":182
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":186
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 187, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":188
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(5, 189, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":190
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 192, __pyx_L1_error)

    /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":193
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":194
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":195
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":196
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":197
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":199
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":200
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":203
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":205
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":207
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":213
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":216
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":218
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":219
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":223
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":227
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":228
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":231
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":234
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":237
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":240
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(5, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":249
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":252
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(5, 252, __pyx_L1_error)

    /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":253
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":255
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(5, 281, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":282
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":284
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":300
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":304
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":307
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":309
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(5, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(5, 345, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 345, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 345, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 345, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":346
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":347
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":349
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(5, 349, __pyx_L1_error)

    /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":351
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":352
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         global __pyx_memoryview_thread_locks_used
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":356
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 */
    __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

    /* "View.MemoryView":357
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 */
    __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

    /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  }

  /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":359
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 raise MemoryError
 */
    __pyx_v_self->lock = PyThread_allocate_lock();

    /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":361
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
      PyErr_NoMemory(); __PYX_ERR(5, 361, __pyx_L1_error)

      /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    }

    /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  }

  /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":364
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":366
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L10:;

  /* "View.MemoryView":368
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":370
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":374
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_2 = ((((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":377
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":378
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":375
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":383
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":385
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":388
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":387
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":386
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":389
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":384
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":391
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":382
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":395
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 397, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(5, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(5, 397, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 397, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(5, 397, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":398
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(5, 398, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(5, 398, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":397
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":400
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":393
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":405
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":404
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":407
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(5, 407, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(5, 407, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(5, 410, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":411
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":410
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":413
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(5, 413, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":414
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":403
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(5, 418, __pyx_L1_error)

    /* "View.MemoryView":417
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":420
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(5, 420, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(5, 420, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 422, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":423
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 424, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":425
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 425, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":424
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":427
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(5, 427, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":422
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":429
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 429, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":416
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":435
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 435, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":434
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(5, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 434, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":436
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(5, 436, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":437
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":433
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":432
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":439
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":431
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  __Pyx_memviewslice *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(5, 445, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(5, 445, __pyx_L1_error)

  /* "View.MemoryView":446
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(5, 446, __pyx_L1_error)
  __pyx_t_2 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_2 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(5, 446, __pyx_L1_error)

  /* "View.MemoryView":447
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(5, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":445
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_6 = __pyx_memoryview_copy_contents((__pyx_t_1[0]), (__pyx_t_2[0]), __pyx_t_4, __pyx_t_5, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(5, 445, __pyx_L1_error)

  /* "View.MemoryView":441
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":451
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":456
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(5, 456, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_2 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":459
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_2 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":461
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(5, 461, __pyx_L1_error)

      /* "View.MemoryView":460
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":462
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":458
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":464
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":466
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_2 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":468
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":467
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":470
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 470, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_2 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":475
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_3 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 475, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":474
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":476
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":479
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":449
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":482
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(5, 482, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":483
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":481
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":488
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":491
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":493
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 493, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 493, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 493, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":498
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 498, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":497
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":499
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":494
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 494, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(5, 494, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 495, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(5, 495, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":492
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":485
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":504
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":510
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(5, 510, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":509
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":512
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 512, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(5, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 512, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(5, 512, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(5, 514, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":514
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":515
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":501
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 520, __pyx_L1_error)

    /* "View.MemoryView":519
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":523
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":522
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":525
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":528
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":527
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":530
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":533
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":532
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":535
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":538
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":537
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":540
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":542
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":543
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":544
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":545
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":546
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":547
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":518
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":554
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(5, 554, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":555
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(5, 555, __pyx_L1_error)

  /* "View.MemoryView":556
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":553
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":560
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":559
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":564
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(5, 564, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":563
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(5, 570, __pyx_L1_error)

    /* "View.MemoryView":568
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":572
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 572, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(5, 572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":567
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__16, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":576
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":579
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(5, 579, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":575
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":583
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":582
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":587
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":586
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":591
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":590
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":596
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":598
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":599
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 599, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":601
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":595
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":603
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":594
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":607
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":606
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":609
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":605
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":613
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":612
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":611
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":616
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":615
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":622
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(5, 622, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":623
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":619
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":628
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(5, 628, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":629
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":625
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":633
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":635
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":636
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 636, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":641
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":631
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":645
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":647
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":648
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(5, 648, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":653
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":643
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":658
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":659
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":660
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":657
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":664
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":663
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":672
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 672, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":671
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":674
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":676
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":677
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":678
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 679, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(5, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(5, 679, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 679, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(5, 679, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 679, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(5, 682, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 682, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__19);
            __Pyx_GIVEREF(__pyx_slice__19);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__19);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(5, 682, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":683
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":681
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":685
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__19); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(5, 685, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":686
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":680
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":689
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(5, 689, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(5, 689, __pyx_L1_error)

        /* "View.MemoryView":688
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":691
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":692
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(5, 692, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":679
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":694
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(5, 694, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":696
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__19);
        __Pyx_GIVEREF(__pyx_slice__19);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__19);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(5, 696, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":695
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":698
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(5, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":666
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":701
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(5, 703, __pyx_L1_error)

      /* "View.MemoryView":702
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":711
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":718
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":722
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(5, 722, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":725
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(5, 725, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":726
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":724
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":728
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":729
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":735
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":736
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":741
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":742
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(5, 746, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(5, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(5, 746, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 746, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(5, 746, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":751
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(5, 751, __pyx_L1_error)

      /* "View.MemoryView":748
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(5, 748, __pyx_L1_error)

      /* "View.MemoryView":747
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":755
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":756
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":757
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":758
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":754
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":760
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 760, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(5, 760, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":761
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 761, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(5, 761, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":762
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(5, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(5, 762, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":764
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":765
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 765, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":766
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(5, 768, __pyx_L1_error)

      /* "View.MemoryView":774
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":746
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":778
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(5, 778, __pyx_L1_error) }

    /* "View.MemoryView":779
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(5, 779, __pyx_L1_error) }

    /* "View.MemoryView":777
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 777, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(5, 777, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":776
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":783
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":782
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(5, 782, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":710
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":830
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":829
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":832
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(5, 832, __pyx_L1_error)

      /* "View.MemoryView":831
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":827
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":835
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":838
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(5, 838, __pyx_L1_error)

      /* "View.MemoryView":837
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":843
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":845
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":844
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":842
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":848
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":847
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":850
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":846
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":841
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":853
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":852
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":855
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":859
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":861
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":860
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":858
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":863
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":862
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":857
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":866
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":865
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":868
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":871
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":870
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":875
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":878
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":877
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":881
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":880
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":884
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":885
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":886
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":890
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":889
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":892
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":897
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":896
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":899
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":900
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(5, 899, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":895
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":902
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":894
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":904
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":807
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":912
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":913
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":917
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(5, 917, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(5, 917, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":918
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":916
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":920
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":921
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":923
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":922
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":926
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":928
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 928, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(5, 928, __pyx_L1_error)

      /* "View.MemoryView":927
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":925
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":931
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 931, __pyx_L1_error)

    /* "View.MemoryView":930
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":933
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":935
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":934
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":937
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":910
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":944
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":946
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":947
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":951
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":952
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":953
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":954
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":957
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(5, 957, __pyx_L1_error)

      /* "View.MemoryView":956
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":959
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":943
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":977
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":976
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":981
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":980
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":983
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":979
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":987
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(5, 987, __pyx_L1_error)

    /* "View.MemoryView":986
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":989
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":985
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":993
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":992
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1008
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1013
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1015
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1016
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1018
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1019
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1021
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1022
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1023
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1024
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1025
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1028
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1030
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1033
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1036
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1037
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1039
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1040
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1042
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1043
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 1043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1044
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(5, 1044, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1046
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1047
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1049
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1056
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(5, 1056, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1057
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1059
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1060
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1067
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1068
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1069
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1071
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1072
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1074
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1075
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1076
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1077
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1083
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1084
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1095
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1096
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1098
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1099
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1101
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1103
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1111
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1113
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1121
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1122
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1124
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1126
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1127
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1125
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1129
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1131
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1132
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1130
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1135
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1134
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1137
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1116
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1147
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1148
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1149
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1150
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1154
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1155
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1153
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1157
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1158
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1159
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1160
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1152
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1162
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1163
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1167
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1168
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1140
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1173
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1170
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1179
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1181
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1182
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1184
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1177
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1197
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1198
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1199
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1196
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1201
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1202
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1203
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1205
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1187
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1219
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1220
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1222
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1224
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(5, 1224, __pyx_L1_error)

    /* "View.MemoryView":1223
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1227
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1228
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1229
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1230
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1231
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1233
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1237
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1239
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1238
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1242
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1241
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1244
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1246
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1208
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1254
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1253
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(5, 1253, __pyx_L1_error)

  /* "View.MemoryView":1251
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1258
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 1258, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(5, 1258, __pyx_L1_error)

  /* "View.MemoryView":1257
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1263
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 1263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(5, 1263, __pyx_L1_error)

    /* "View.MemoryView":1262
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1265
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(5, 1265, __pyx_L1_error)
  }

  /* "View.MemoryView":1261
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":1276
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1277
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1279
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1280
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1281
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1285
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1284
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1287
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1286
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1289
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1291
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1294
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1295
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1293
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1297
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(5, 1297, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1292
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1300
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(5, 1300, __pyx_L1_error)

      /* "View.MemoryView":1299
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1305
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1304
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1307
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(5, 1307, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1308
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1302
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1314
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1313
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1316
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1315
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1320
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1321
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1322
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1323
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1324
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1318
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1310
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1329
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(5, 1329, __pyx_L1_error)

    /* "View.MemoryView":1330
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(5, 1330, __pyx_L1_error)

    /* "View.MemoryView":1326
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1332
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1333
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1334
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1336
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1337
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1268
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1344
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1346
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1347
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1348
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1349
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1351
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1352
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1353
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1354
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1340
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1367
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1366
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1362
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1374
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1381
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1384
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1383
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1386
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1382
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1388
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1389
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1391
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1377
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1400
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1401
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1403
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1397
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1411
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1412
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1415
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1416
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1417
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1414
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1419
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1420
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1422
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1407
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(5, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(5, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(5, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(5, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(5, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xb068931) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(5, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(5, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(5, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(5, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(5, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(5, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(5, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_6picard_5types_ColumnType __pyx_vtable_6picard_5types_ColumnType;

static PyObject *__pyx_tp_new_6picard_5types_ColumnType(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_ColumnType *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_ColumnType *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_CompiledEnum*)__pyx_vtabptr_6picard_5types_ColumnType;
  return o;
}

static void __pyx_tp_dealloc_6picard_5types_ColumnType(PyObject *o) {
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_CompiledEnum)) __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_ColumnType);
}

static int __pyx_tp_traverse_6picard_5types_ColumnType(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_CompiledEnum)) ? ((__pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_ColumnType)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types_ColumnType(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_CompiledEnum)) { if (__pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_clear) __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_ColumnType);
  return 0;
}

static PyMethodDef __pyx_methods_6picard_5types_ColumnType[] = {
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_10ColumnType_1__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_10ColumnType_3__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_ColumnType = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.ColumnType", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_ColumnType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_ColumnType, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_ColumnType, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_ColumnType, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_ColumnType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_ColumnType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_Mode __pyx_vtable_6picard_5types_Mode;

static PyObject *__pyx_tp_new_6picard_5types_Mode(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_Mode *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_Mode *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_CompiledEnum*)__pyx_vtabptr_6picard_5types_Mode;
  return o;
}

static void __pyx_tp_dealloc_6picard_5types_Mode(PyObject *o) {
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_CompiledEnum)) __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_Mode);
}

static int __pyx_tp_traverse_6picard_5types_Mode(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_CompiledEnum)) ? ((__pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_Mode)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types_Mode(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_CompiledEnum)) { if (__pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_clear) __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_Mode);
  return 0;
}

static PyMethodDef __pyx_methods_6picard_5types_Mode[] = {
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_4Mode_1__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_4Mode_3__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_Mode = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.Mode", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_Mode), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_Mode, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_Mode, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_Mode, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_Mode, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_Mode, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_SQLSchema __pyx_vtable_6picard_5types_SQLSchema;

static PyObject *__pyx_tp_new_6picard_5types_SQLSchema(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_SQLSchema *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_Struct->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_SQLSchema *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_Struct*)__pyx_vtabptr_6picard_5types_SQLSchema;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<::cpp2::SQLSchema> ();
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  p->__pyx___fbthrift_cached_columnNames = ((struct __pyx_obj_6picard_5types_Map__string_string *)Py_None); Py_INCREF(Py_None);
  p->__pyx___fbthrift_cached_columnTypes = ((struct __pyx_obj_6picard_5types_Map__string_ColumnType *)Py_None); Py_INCREF(Py_None);
  p->__pyx___fbthrift_cached_tableNames = ((struct __pyx_obj_6picard_5types_Map__string_string *)Py_None); Py_INCREF(Py_None);
  p->__pyx___fbthrift_cached_columnToTable = ((struct __pyx_obj_6picard_5types_Map__string_string *)Py_None); Py_INCREF(Py_None);
  p->__pyx___fbthrift_cached_tableToColumns = ((struct __pyx_obj_6picard_5types_Map__string_List__string *)Py_None); Py_INCREF(Py_None);
  p->__pyx___fbthrift_cached_foreignKeys = ((struct __pyx_obj_6picard_5types_Map__string_string *)Py_None); Py_INCREF(Py_None);
  p->__pyx___fbthrift_cached_primaryKeys = ((struct __pyx_obj_6picard_5types_List__string *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6picard_5types_9SQLSchema_17__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6picard_5types_SQLSchema(PyObject *o) {
  struct __pyx_obj_6picard_5types_SQLSchema *p = (struct __pyx_obj_6picard_5types_SQLSchema *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  Py_CLEAR(p->_fields_setter);
  Py_CLEAR(p->__pyx___fbthrift_cached_columnNames);
  Py_CLEAR(p->__pyx___fbthrift_cached_columnTypes);
  Py_CLEAR(p->__pyx___fbthrift_cached_tableNames);
  Py_CLEAR(p->__pyx___fbthrift_cached_columnToTable);
  Py_CLEAR(p->__pyx___fbthrift_cached_tableToColumns);
  Py_CLEAR(p->__pyx___fbthrift_cached_foreignKeys);
  Py_CLEAR(p->__pyx___fbthrift_cached_primaryKeys);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) __pyx_ptype_6thrift_3py3_5types_Struct->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_SQLSchema);
}

static int __pyx_tp_traverse_6picard_5types_SQLSchema(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types_SQLSchema *p = (struct __pyx_obj_6picard_5types_SQLSchema *)o;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_Struct)) ? ((__pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_SQLSchema)); if (e) return e;
  if (p->_fields_setter) {
    e = (*v)(((PyObject *)p->_fields_setter), a); if (e) return e;
  }
  if (p->__pyx___fbthrift_cached_columnNames) {
    e = (*v)(((PyObject *)p->__pyx___fbthrift_cached_columnNames), a); if (e) return e;
  }
  if (p->__pyx___fbthrift_cached_columnTypes) {
    e = (*v)(((PyObject *)p->__pyx___fbthrift_cached_columnTypes), a); if (e) return e;
  }
  if (p->__pyx___fbthrift_cached_tableNames) {
    e = (*v)(((PyObject *)p->__pyx___fbthrift_cached_tableNames), a); if (e) return e;
  }
  if (p->__pyx___fbthrift_cached_columnToTable) {
    e = (*v)(((PyObject *)p->__pyx___fbthrift_cached_columnToTable), a); if (e) return e;
  }
  if (p->__pyx___fbthrift_cached_tableToColumns) {
    e = (*v)(((PyObject *)p->__pyx___fbthrift_cached_tableToColumns), a); if (e) return e;
  }
  if (p->__pyx___fbthrift_cached_foreignKeys) {
    e = (*v)(((PyObject *)p->__pyx___fbthrift_cached_foreignKeys), a); if (e) return e;
  }
  if (p->__pyx___fbthrift_cached_primaryKeys) {
    e = (*v)(((PyObject *)p->__pyx___fbthrift_cached_primaryKeys), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types_SQLSchema(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types_SQLSchema *p = (struct __pyx_obj_6picard_5types_SQLSchema *)o;
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) { if (__pyx_ptype_6thrift_3py3_5types_Struct->tp_clear) __pyx_ptype_6thrift_3py3_5types_Struct->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_SQLSchema);
  tmp = ((PyObject*)p->_fields_setter);
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx___fbthrift_cached_columnNames);
  p->__pyx___fbthrift_cached_columnNames = ((struct __pyx_obj_6picard_5types_Map__string_string *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx___fbthrift_cached_columnTypes);
  p->__pyx___fbthrift_cached_columnTypes = ((struct __pyx_obj_6picard_5types_Map__string_ColumnType *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx___fbthrift_cached_tableNames);
  p->__pyx___fbthrift_cached_tableNames = ((struct __pyx_obj_6picard_5types_Map__string_string *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx___fbthrift_cached_columnToTable);
  p->__pyx___fbthrift_cached_columnToTable = ((struct __pyx_obj_6picard_5types_Map__string_string *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx___fbthrift_cached_tableToColumns);
  p->__pyx___fbthrift_cached_tableToColumns = ((struct __pyx_obj_6picard_5types_Map__string_List__string *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx___fbthrift_cached_foreignKeys);
  p->__pyx___fbthrift_cached_foreignKeys = ((struct __pyx_obj_6picard_5types_Map__string_string *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx___fbthrift_cached_primaryKeys);
  p->__pyx___fbthrift_cached_primaryKeys = ((struct __pyx_obj_6picard_5types_List__string *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6picard_5types_9SQLSchema_columnNames(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_9SQLSchema_11columnNames_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_9SQLSchema_columnTypes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_9SQLSchema_11columnTypes_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_9SQLSchema_tableNames(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_9SQLSchema_10tableNames_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_9SQLSchema_columnToTable(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_9SQLSchema_13columnToTable_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_9SQLSchema_tableToColumns(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_9SQLSchema_14tableToColumns_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_9SQLSchema_foreignKeys(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_9SQLSchema_11foreignKeys_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_9SQLSchema_primaryKeys(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_9SQLSchema_11primaryKeys_1__get__(o);
}

static PyMethodDef __pyx_methods_6picard_5types_SQLSchema[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_9SQLSchema_7__copy__, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_9SQLSchema_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_9SQLSchema_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_9SQLSchema_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6picard_5types_SQLSchema[] = {
  {(char *)"columnNames", __pyx_getprop_6picard_5types_9SQLSchema_columnNames, 0, (char *)0, 0},
  {(char *)"columnTypes", __pyx_getprop_6picard_5types_9SQLSchema_columnTypes, 0, (char *)0, 0},
  {(char *)"tableNames", __pyx_getprop_6picard_5types_9SQLSchema_tableNames, 0, (char *)0, 0},
  {(char *)"columnToTable", __pyx_getprop_6picard_5types_9SQLSchema_columnToTable, 0, (char *)0, 0},
  {(char *)"tableToColumns", __pyx_getprop_6picard_5types_9SQLSchema_tableToColumns, 0, (char *)0, 0},
  {(char *)"foreignKeys", __pyx_getprop_6picard_5types_9SQLSchema_foreignKeys, 0, (char *)0, 0},
  {(char *)"primaryKeys", __pyx_getprop_6picard_5types_9SQLSchema_primaryKeys, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_SQLSchema = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.SQLSchema", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_SQLSchema), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_SQLSchema, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6picard_5types_9SQLSchema_5__hash__, /*tp_hash*/
  __pyx_pw_6picard_5types_9SQLSchema_3__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_SQLSchema, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_SQLSchema, /*tp_clear*/
  __pyx_pw_6picard_5types_9SQLSchema_9__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_SQLSchema, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6picard_5types_SQLSchema, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_9SQLSchema_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_SQLSchema, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_RegisterSQLSchemaException __pyx_vtable_6picard_5types_RegisterSQLSchemaException;

static PyObject *__pyx_tp_new_6picard_5types_RegisterSQLSchemaException(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_10exceptions_GeneratedError*)__pyx_vtabptr_6picard_5types_RegisterSQLSchemaException;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<::cpp2::RegisterSQLSchemaException> ();
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6picard_5types_26RegisterSQLSchemaException_15__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6picard_5types_RegisterSQLSchemaException(PyObject *o) {
  struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *p = (struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  Py_CLEAR(p->_fields_setter);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError)) __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_RegisterSQLSchemaException);
}

static int __pyx_tp_traverse_6picard_5types_RegisterSQLSchemaException(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *p = (struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *)o;
  e = ((likely(__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError)) ? ((__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_traverse) ? __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_RegisterSQLSchemaException)); if (e) return e;
  if (p->_fields_setter) {
    e = (*v)(((PyObject *)p->_fields_setter), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types_RegisterSQLSchemaException(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *p = (struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *)o;
  if (likely(__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError)) { if (__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_clear) __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_RegisterSQLSchemaException);
  tmp = ((PyObject*)p->_fields_setter);
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6picard_5types_26RegisterSQLSchemaException_dbId(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_26RegisterSQLSchemaException_4dbId_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_26RegisterSQLSchemaException_message(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_26RegisterSQLSchemaException_7message_1__get__(o);
}

static PyMethodDef __pyx_methods_6picard_5types_RegisterSQLSchemaException[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_26RegisterSQLSchemaException_5__copy__, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_26RegisterSQLSchemaException_9__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_26RegisterSQLSchemaException_11__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_26RegisterSQLSchemaException_13__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6picard_5types_RegisterSQLSchemaException[] = {
  {(char *)"dbId", __pyx_getprop_6picard_5types_26RegisterSQLSchemaException_dbId, 0, (char *)0, 0},
  {(char *)"message", __pyx_getprop_6picard_5types_26RegisterSQLSchemaException_message, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_RegisterSQLSchemaException = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.RegisterSQLSchemaException", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_RegisterSQLSchemaException, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6picard_5types_26RegisterSQLSchemaException_3__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_RegisterSQLSchemaException, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_RegisterSQLSchemaException, /*tp_clear*/
  __pyx_pw_6picard_5types_26RegisterSQLSchemaException_7__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_RegisterSQLSchemaException, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6picard_5types_RegisterSQLSchemaException, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_26RegisterSQLSchemaException_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_RegisterSQLSchemaException, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_RegisterTokenizerException __pyx_vtable_6picard_5types_RegisterTokenizerException;

static PyObject *__pyx_tp_new_6picard_5types_RegisterTokenizerException(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_RegisterTokenizerException *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_RegisterTokenizerException *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_10exceptions_GeneratedError*)__pyx_vtabptr_6picard_5types_RegisterTokenizerException;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<::cpp2::RegisterTokenizerException> ();
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___RegisterTokenizerException_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6picard_5types_26RegisterTokenizerException_15__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6picard_5types_RegisterTokenizerException(PyObject *o) {
  struct __pyx_obj_6picard_5types_RegisterTokenizerException *p = (struct __pyx_obj_6picard_5types_RegisterTokenizerException *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  Py_CLEAR(p->_fields_setter);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError)) __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_RegisterTokenizerException);
}

static int __pyx_tp_traverse_6picard_5types_RegisterTokenizerException(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types_RegisterTokenizerException *p = (struct __pyx_obj_6picard_5types_RegisterTokenizerException *)o;
  e = ((likely(__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError)) ? ((__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_traverse) ? __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_RegisterTokenizerException)); if (e) return e;
  if (p->_fields_setter) {
    e = (*v)(((PyObject *)p->_fields_setter), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types_RegisterTokenizerException(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types_RegisterTokenizerException *p = (struct __pyx_obj_6picard_5types_RegisterTokenizerException *)o;
  if (likely(__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError)) { if (__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_clear) __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_RegisterTokenizerException);
  tmp = ((PyObject*)p->_fields_setter);
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___RegisterTokenizerException_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6picard_5types_26RegisterTokenizerException_message(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_26RegisterTokenizerException_7message_1__get__(o);
}

static PyMethodDef __pyx_methods_6picard_5types_RegisterTokenizerException[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_26RegisterTokenizerException_5__copy__, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_26RegisterTokenizerException_9__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_26RegisterTokenizerException_11__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_26RegisterTokenizerException_13__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6picard_5types_RegisterTokenizerException[] = {
  {(char *)"message", __pyx_getprop_6picard_5types_26RegisterTokenizerException_message, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_RegisterTokenizerException = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.RegisterTokenizerException", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_RegisterTokenizerException), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_RegisterTokenizerException, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6picard_5types_26RegisterTokenizerException_3__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_RegisterTokenizerException, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_RegisterTokenizerException, /*tp_clear*/
  __pyx_pw_6picard_5types_26RegisterTokenizerException_7__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_RegisterTokenizerException, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6picard_5types_RegisterTokenizerException, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_26RegisterTokenizerException_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_RegisterTokenizerException, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_TokenizerNotRegisteredException __pyx_vtable_6picard_5types_TokenizerNotRegisteredException;

static PyObject *__pyx_tp_new_6picard_5types_TokenizerNotRegisteredException(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_Struct->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_Struct*)__pyx_vtabptr_6picard_5types_TokenizerNotRegisteredException;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<::cpp2::TokenizerNotRegisteredException> ();
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_17__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6picard_5types_TokenizerNotRegisteredException(PyObject *o) {
  struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *p = (struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  Py_CLEAR(p->_fields_setter);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) __pyx_ptype_6thrift_3py3_5types_Struct->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_TokenizerNotRegisteredException);
}

static int __pyx_tp_traverse_6picard_5types_TokenizerNotRegisteredException(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *p = (struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)o;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_Struct)) ? ((__pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_TokenizerNotRegisteredException)); if (e) return e;
  if (p->_fields_setter) {
    e = (*v)(((PyObject *)p->_fields_setter), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types_TokenizerNotRegisteredException(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *p = (struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *)o;
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) { if (__pyx_ptype_6thrift_3py3_5types_Struct->tp_clear) __pyx_ptype_6thrift_3py3_5types_Struct->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_TokenizerNotRegisteredException);
  tmp = ((PyObject*)p->_fields_setter);
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6picard_5types_31TokenizerNotRegisteredException_message(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_31TokenizerNotRegisteredException_7message_1__get__(o);
}

static PyMethodDef __pyx_methods_6picard_5types_TokenizerNotRegisteredException[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_7__copy__, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_31TokenizerNotRegisteredException_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6picard_5types_TokenizerNotRegisteredException[] = {
  {(char *)"message", __pyx_getprop_6picard_5types_31TokenizerNotRegisteredException_message, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_TokenizerNotRegisteredException = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.TokenizerNotRegisteredException", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_TokenizerNotRegisteredException, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6picard_5types_31TokenizerNotRegisteredException_5__hash__, /*tp_hash*/
  __pyx_pw_6picard_5types_31TokenizerNotRegisteredException_3__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_TokenizerNotRegisteredException, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_TokenizerNotRegisteredException, /*tp_clear*/
  __pyx_pw_6picard_5types_31TokenizerNotRegisteredException_9__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_TokenizerNotRegisteredException, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6picard_5types_TokenizerNotRegisteredException, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_31TokenizerNotRegisteredException_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_TokenizerNotRegisteredException, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_TokenizerPrefixException __pyx_vtable_6picard_5types_TokenizerPrefixException;

static PyObject *__pyx_tp_new_6picard_5types_TokenizerPrefixException(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_TokenizerPrefixException *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_Struct->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_TokenizerPrefixException *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_Struct*)__pyx_vtabptr_6picard_5types_TokenizerPrefixException;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<::cpp2::TokenizerPrefixException> ();
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___TokenizerPrefixException_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6picard_5types_24TokenizerPrefixException_17__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6picard_5types_TokenizerPrefixException(PyObject *o) {
  struct __pyx_obj_6picard_5types_TokenizerPrefixException *p = (struct __pyx_obj_6picard_5types_TokenizerPrefixException *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  Py_CLEAR(p->_fields_setter);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) __pyx_ptype_6thrift_3py3_5types_Struct->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_TokenizerPrefixException);
}

static int __pyx_tp_traverse_6picard_5types_TokenizerPrefixException(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types_TokenizerPrefixException *p = (struct __pyx_obj_6picard_5types_TokenizerPrefixException *)o;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_Struct)) ? ((__pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_TokenizerPrefixException)); if (e) return e;
  if (p->_fields_setter) {
    e = (*v)(((PyObject *)p->_fields_setter), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types_TokenizerPrefixException(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types_TokenizerPrefixException *p = (struct __pyx_obj_6picard_5types_TokenizerPrefixException *)o;
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) { if (__pyx_ptype_6thrift_3py3_5types_Struct->tp_clear) __pyx_ptype_6thrift_3py3_5types_Struct->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_TokenizerPrefixException);
  tmp = ((PyObject*)p->_fields_setter);
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___TokenizerPrefixException_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6picard_5types_24TokenizerPrefixException_message(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_24TokenizerPrefixException_7message_1__get__(o);
}

static PyMethodDef __pyx_methods_6picard_5types_TokenizerPrefixException[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_24TokenizerPrefixException_7__copy__, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_24TokenizerPrefixException_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_24TokenizerPrefixException_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_24TokenizerPrefixException_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6picard_5types_TokenizerPrefixException[] = {
  {(char *)"message", __pyx_getprop_6picard_5types_24TokenizerPrefixException_message, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_TokenizerPrefixException = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.TokenizerPrefixException", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_TokenizerPrefixException), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_TokenizerPrefixException, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6picard_5types_24TokenizerPrefixException_5__hash__, /*tp_hash*/
  __pyx_pw_6picard_5types_24TokenizerPrefixException_3__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_TokenizerPrefixException, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_TokenizerPrefixException, /*tp_clear*/
  __pyx_pw_6picard_5types_24TokenizerPrefixException_9__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_TokenizerPrefixException, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6picard_5types_TokenizerPrefixException, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_24TokenizerPrefixException_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_TokenizerPrefixException, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_ModeException __pyx_vtable_6picard_5types_ModeException;

static PyObject *__pyx_tp_new_6picard_5types_ModeException(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_ModeException *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_Struct->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_ModeException *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_Struct*)__pyx_vtabptr_6picard_5types_ModeException;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<::cpp2::ModeException> ();
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___ModeException_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6picard_5types_13ModeException_17__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6picard_5types_ModeException(PyObject *o) {
  struct __pyx_obj_6picard_5types_ModeException *p = (struct __pyx_obj_6picard_5types_ModeException *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  Py_CLEAR(p->_fields_setter);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) __pyx_ptype_6thrift_3py3_5types_Struct->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_ModeException);
}

static int __pyx_tp_traverse_6picard_5types_ModeException(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types_ModeException *p = (struct __pyx_obj_6picard_5types_ModeException *)o;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_Struct)) ? ((__pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_ModeException)); if (e) return e;
  if (p->_fields_setter) {
    e = (*v)(((PyObject *)p->_fields_setter), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types_ModeException(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types_ModeException *p = (struct __pyx_obj_6picard_5types_ModeException *)o;
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) { if (__pyx_ptype_6thrift_3py3_5types_Struct->tp_clear) __pyx_ptype_6thrift_3py3_5types_Struct->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_ModeException);
  tmp = ((PyObject*)p->_fields_setter);
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___ModeException_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6picard_5types_13ModeException_message(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_13ModeException_7message_1__get__(o);
}

static PyMethodDef __pyx_methods_6picard_5types_ModeException[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_13ModeException_7__copy__, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_13ModeException_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_13ModeException_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_13ModeException_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6picard_5types_ModeException[] = {
  {(char *)"message", __pyx_getprop_6picard_5types_13ModeException_message, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_ModeException = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.ModeException", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_ModeException), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_ModeException, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6picard_5types_13ModeException_5__hash__, /*tp_hash*/
  __pyx_pw_6picard_5types_13ModeException_3__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_ModeException, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_ModeException, /*tp_clear*/
  __pyx_pw_6picard_5types_13ModeException_9__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_ModeException, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6picard_5types_ModeException, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_13ModeException_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_ModeException, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types___FeedFatalExceptionType __pyx_vtable_6picard_5types___FeedFatalExceptionType;

static PyObject *__pyx_tp_new_6picard_5types___FeedFatalExceptionType(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types___FeedFatalExceptionType *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types___FeedFatalExceptionType *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_CompiledEnum*)__pyx_vtabptr_6picard_5types___FeedFatalExceptionType;
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___FeedFatalExceptionType(PyObject *o) {
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_CompiledEnum)) __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types___FeedFatalExceptionType);
}

static int __pyx_tp_traverse_6picard_5types___FeedFatalExceptionType(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_CompiledEnum)) ? ((__pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types___FeedFatalExceptionType)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types___FeedFatalExceptionType(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_CompiledEnum)) { if (__pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_clear) __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types___FeedFatalExceptionType);
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___FeedFatalExceptionType = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__FeedFatalExceptionType", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___FeedFatalExceptionType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___FeedFatalExceptionType, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___FeedFatalExceptionType, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types___FeedFatalExceptionType, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___FeedFatalExceptionType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_FeedFatalException __pyx_vtable_6picard_5types_FeedFatalException;

static PyObject *__pyx_tp_new_6picard_5types_FeedFatalException(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_FeedFatalException *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_Union->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_FeedFatalException *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_Struct*)__pyx_vtabptr_6picard_5types_FeedFatalException;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<::cpp2::FeedFatalException> ();
  p->type = ((struct __pyx_obj_6picard_5types___FeedFatalExceptionType *)Py_None); Py_INCREF(Py_None);
  p->value = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6picard_5types_18FeedFatalException_17__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6picard_5types_FeedFatalException(PyObject *o) {
  struct __pyx_obj_6picard_5types_FeedFatalException *p = (struct __pyx_obj_6picard_5types_FeedFatalException *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  Py_CLEAR(p->type);
  Py_CLEAR(p->value);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_Union)) __pyx_ptype_6thrift_3py3_5types_Union->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_FeedFatalException);
}

static int __pyx_tp_traverse_6picard_5types_FeedFatalException(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types_FeedFatalException *p = (struct __pyx_obj_6picard_5types_FeedFatalException *)o;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_Union)) ? ((__pyx_ptype_6thrift_3py3_5types_Union->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_Union->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_FeedFatalException)); if (e) return e;
  if (p->type) {
    e = (*v)(((PyObject *)p->type), a); if (e) return e;
  }
  if (p->value) {
    e = (*v)(p->value, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types_FeedFatalException(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types_FeedFatalException *p = (struct __pyx_obj_6picard_5types_FeedFatalException *)o;
  if (likely(__pyx_ptype_6thrift_3py3_5types_Union)) { if (__pyx_ptype_6thrift_3py3_5types_Union->tp_clear) __pyx_ptype_6thrift_3py3_5types_Union->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_FeedFatalException);
  tmp = ((PyObject*)p->type);
  p->type = ((struct __pyx_obj_6picard_5types___FeedFatalExceptionType *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->value);
  p->value = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6picard_5types_18FeedFatalException_tokenizerNotRegisteredException(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_18FeedFatalException_31tokenizerNotRegisteredException_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_18FeedFatalException_tokenizerPrefixException(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_18FeedFatalException_24tokenizerPrefixException_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_18FeedFatalException_modeException(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_18FeedFatalException_13modeException_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_18FeedFatalException_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_18FeedFatalException_4type_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_18FeedFatalException_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_18FeedFatalException_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_6picard_5types_FeedFatalException[] = {
  {"fromValue", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedFatalException_3fromValue, METH_VARARGS|METH_KEYWORDS, 0},
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_18FeedFatalException_7__copy__, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedFatalException_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedFatalException_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedFatalException_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6picard_5types_FeedFatalException[] = {
  {(char *)"tokenizerNotRegisteredException", __pyx_getprop_6picard_5types_18FeedFatalException_tokenizerNotRegisteredException, 0, (char *)0, 0},
  {(char *)"tokenizerPrefixException", __pyx_getprop_6picard_5types_18FeedFatalException_tokenizerPrefixException, 0, (char *)0, 0},
  {(char *)"modeException", __pyx_getprop_6picard_5types_18FeedFatalException_modeException, 0, (char *)0, 0},
  {(char *)"type", __pyx_getprop_6picard_5types_18FeedFatalException_type, 0, (char *)0, 0},
  {(char *)"value", __pyx_getprop_6picard_5types_18FeedFatalException_value, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_FeedFatalException = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.FeedFatalException", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_FeedFatalException), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_FeedFatalException, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6picard_5types_18FeedFatalException_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_FeedFatalException, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_FeedFatalException, /*tp_clear*/
  __pyx_pw_6picard_5types_18FeedFatalException_9__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_FeedFatalException, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6picard_5types_FeedFatalException, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_18FeedFatalException_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_FeedFatalException, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_FeedException __pyx_vtable_6picard_5types_FeedException;

static PyObject *__pyx_tp_new_6picard_5types_FeedException(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_FeedException *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_FeedException *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_10exceptions_GeneratedError*)__pyx_vtabptr_6picard_5types_FeedException;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<::cpp2::FeedException> ();
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedException_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  p->__pyx___fbthrift_cached_feedFatalException = ((struct __pyx_obj_6picard_5types_FeedFatalException *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6picard_5types_13FeedException_15__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6picard_5types_FeedException(PyObject *o) {
  struct __pyx_obj_6picard_5types_FeedException *p = (struct __pyx_obj_6picard_5types_FeedException *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  Py_CLEAR(p->_fields_setter);
  Py_CLEAR(p->__pyx___fbthrift_cached_feedFatalException);
  #if CYTHON_USE_TYPE_SLOTS
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError)) __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_FeedException);
}

static int __pyx_tp_traverse_6picard_5types_FeedException(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types_FeedException *p = (struct __pyx_obj_6picard_5types_FeedException *)o;
  e = ((likely(__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError)) ? ((__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_traverse) ? __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_FeedException)); if (e) return e;
  if (p->_fields_setter) {
    e = (*v)(((PyObject *)p->_fields_setter), a); if (e) return e;
  }
  if (p->__pyx___fbthrift_cached_feedFatalException) {
    e = (*v)(((PyObject *)p->__pyx___fbthrift_cached_feedFatalException), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types_FeedException(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types_FeedException *p = (struct __pyx_obj_6picard_5types_FeedException *)o;
  if (likely(__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError)) { if (__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_clear) __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_FeedException);
  tmp = ((PyObject*)p->_fields_setter);
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedException_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx___fbthrift_cached_feedFatalException);
  p->__pyx___fbthrift_cached_feedFatalException = ((struct __pyx_obj_6picard_5types_FeedFatalException *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6picard_5types_13FeedException_feedFatalException(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_13FeedException_18feedFatalException_1__get__(o);
}

static PyMethodDef __pyx_methods_6picard_5types_FeedException[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_13FeedException_5__copy__, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_13FeedException_9__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_13FeedException_11__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_13FeedException_13__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6picard_5types_FeedException[] = {
  {(char *)"feedFatalException", __pyx_getprop_6picard_5types_13FeedException_feedFatalException, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_FeedException = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.FeedException", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_FeedException), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_FeedException, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6picard_5types_13FeedException_3__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_FeedException, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_FeedException, /*tp_clear*/
  __pyx_pw_6picard_5types_13FeedException_7__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_FeedException, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6picard_5types_FeedException, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_13FeedException_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_FeedException, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_FeedParseFailure __pyx_vtable_6picard_5types_FeedParseFailure;

static PyObject *__pyx_tp_new_6picard_5types_FeedParseFailure(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_FeedParseFailure *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_Struct->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_FeedParseFailure *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_Struct*)__pyx_vtabptr_6picard_5types_FeedParseFailure;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<::cpp2::FeedParseFailure> ();
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedParseFailure_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  p->__pyx___fbthrift_cached_contexts = ((struct __pyx_obj_6picard_5types_List__string *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6picard_5types_16FeedParseFailure_17__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6picard_5types_FeedParseFailure(PyObject *o) {
  struct __pyx_obj_6picard_5types_FeedParseFailure *p = (struct __pyx_obj_6picard_5types_FeedParseFailure *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  Py_CLEAR(p->_fields_setter);
  Py_CLEAR(p->__pyx___fbthrift_cached_contexts);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) __pyx_ptype_6thrift_3py3_5types_Struct->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_FeedParseFailure);
}

static int __pyx_tp_traverse_6picard_5types_FeedParseFailure(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types_FeedParseFailure *p = (struct __pyx_obj_6picard_5types_FeedParseFailure *)o;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_Struct)) ? ((__pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_FeedParseFailure)); if (e) return e;
  if (p->_fields_setter) {
    e = (*v)(((PyObject *)p->_fields_setter), a); if (e) return e;
  }
  if (p->__pyx___fbthrift_cached_contexts) {
    e = (*v)(((PyObject *)p->__pyx___fbthrift_cached_contexts), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types_FeedParseFailure(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types_FeedParseFailure *p = (struct __pyx_obj_6picard_5types_FeedParseFailure *)o;
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) { if (__pyx_ptype_6thrift_3py3_5types_Struct->tp_clear) __pyx_ptype_6thrift_3py3_5types_Struct->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_FeedParseFailure);
  tmp = ((PyObject*)p->_fields_setter);
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedParseFailure_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx___fbthrift_cached_contexts);
  p->__pyx___fbthrift_cached_contexts = ((struct __pyx_obj_6picard_5types_List__string *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6picard_5types_16FeedParseFailure_input(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_16FeedParseFailure_5input_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_16FeedParseFailure_contexts(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_16FeedParseFailure_8contexts_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_16FeedParseFailure_description(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_16FeedParseFailure_11description_1__get__(o);
}

static PyMethodDef __pyx_methods_6picard_5types_FeedParseFailure[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_16FeedParseFailure_7__copy__, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_16FeedParseFailure_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_16FeedParseFailure_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_16FeedParseFailure_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6picard_5types_FeedParseFailure[] = {
  {(char *)"input", __pyx_getprop_6picard_5types_16FeedParseFailure_input, 0, (char *)0, 0},
  {(char *)"contexts", __pyx_getprop_6picard_5types_16FeedParseFailure_contexts, 0, (char *)0, 0},
  {(char *)"description", __pyx_getprop_6picard_5types_16FeedParseFailure_description, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_FeedParseFailure = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.FeedParseFailure", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_FeedParseFailure), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_FeedParseFailure, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6picard_5types_16FeedParseFailure_5__hash__, /*tp_hash*/
  __pyx_pw_6picard_5types_16FeedParseFailure_3__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_FeedParseFailure, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_FeedParseFailure, /*tp_clear*/
  __pyx_pw_6picard_5types_16FeedParseFailure_9__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_FeedParseFailure, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6picard_5types_FeedParseFailure, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_16FeedParseFailure_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_FeedParseFailure, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_FeedTimeoutFailure __pyx_vtable_6picard_5types_FeedTimeoutFailure;

static PyObject *__pyx_tp_new_6picard_5types_FeedTimeoutFailure(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_FeedTimeoutFailure *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_Struct->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_Struct*)__pyx_vtabptr_6picard_5types_FeedTimeoutFailure;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<::cpp2::FeedTimeoutFailure> ();
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6picard_5types_18FeedTimeoutFailure_17__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6picard_5types_FeedTimeoutFailure(PyObject *o) {
  struct __pyx_obj_6picard_5types_FeedTimeoutFailure *p = (struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  Py_CLEAR(p->_fields_setter);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) __pyx_ptype_6thrift_3py3_5types_Struct->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_FeedTimeoutFailure);
}

static int __pyx_tp_traverse_6picard_5types_FeedTimeoutFailure(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types_FeedTimeoutFailure *p = (struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)o;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_Struct)) ? ((__pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_FeedTimeoutFailure)); if (e) return e;
  if (p->_fields_setter) {
    e = (*v)(((PyObject *)p->_fields_setter), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types_FeedTimeoutFailure(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types_FeedTimeoutFailure *p = (struct __pyx_obj_6picard_5types_FeedTimeoutFailure *)o;
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) { if (__pyx_ptype_6thrift_3py3_5types_Struct->tp_clear) __pyx_ptype_6thrift_3py3_5types_Struct->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_FeedTimeoutFailure);
  tmp = ((PyObject*)p->_fields_setter);
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6picard_5types_18FeedTimeoutFailure_message(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_18FeedTimeoutFailure_7message_1__get__(o);
}

static PyMethodDef __pyx_methods_6picard_5types_FeedTimeoutFailure[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_18FeedTimeoutFailure_7__copy__, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedTimeoutFailure_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedTimeoutFailure_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedTimeoutFailure_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6picard_5types_FeedTimeoutFailure[] = {
  {(char *)"message", __pyx_getprop_6picard_5types_18FeedTimeoutFailure_message, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_FeedTimeoutFailure = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.FeedTimeoutFailure", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_FeedTimeoutFailure), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_FeedTimeoutFailure, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6picard_5types_18FeedTimeoutFailure_5__hash__, /*tp_hash*/
  __pyx_pw_6picard_5types_18FeedTimeoutFailure_3__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_FeedTimeoutFailure, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_FeedTimeoutFailure, /*tp_clear*/
  __pyx_pw_6picard_5types_18FeedTimeoutFailure_9__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_FeedTimeoutFailure, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6picard_5types_FeedTimeoutFailure, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_18FeedTimeoutFailure_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_FeedTimeoutFailure, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_FeedPartialSuccess __pyx_vtable_6picard_5types_FeedPartialSuccess;

static PyObject *__pyx_tp_new_6picard_5types_FeedPartialSuccess(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_FeedPartialSuccess *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_Struct->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_FeedPartialSuccess *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_Struct*)__pyx_vtabptr_6picard_5types_FeedPartialSuccess;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<::cpp2::FeedPartialSuccess> ();
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedPartialSuccess_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6picard_5types_18FeedPartialSuccess_17__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6picard_5types_FeedPartialSuccess(PyObject *o) {
  struct __pyx_obj_6picard_5types_FeedPartialSuccess *p = (struct __pyx_obj_6picard_5types_FeedPartialSuccess *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  Py_CLEAR(p->_fields_setter);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) __pyx_ptype_6thrift_3py3_5types_Struct->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_FeedPartialSuccess);
}

static int __pyx_tp_traverse_6picard_5types_FeedPartialSuccess(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types_FeedPartialSuccess *p = (struct __pyx_obj_6picard_5types_FeedPartialSuccess *)o;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_Struct)) ? ((__pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_FeedPartialSuccess)); if (e) return e;
  if (p->_fields_setter) {
    e = (*v)(((PyObject *)p->_fields_setter), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types_FeedPartialSuccess(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types_FeedPartialSuccess *p = (struct __pyx_obj_6picard_5types_FeedPartialSuccess *)o;
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) { if (__pyx_ptype_6thrift_3py3_5types_Struct->tp_clear) __pyx_ptype_6thrift_3py3_5types_Struct->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_FeedPartialSuccess);
  tmp = ((PyObject*)p->_fields_setter);
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedPartialSuccess_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_6picard_5types_FeedPartialSuccess[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_18FeedPartialSuccess_7__copy__, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedPartialSuccess_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedPartialSuccess_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18FeedPartialSuccess_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_FeedPartialSuccess = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.FeedPartialSuccess", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_FeedPartialSuccess), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_FeedPartialSuccess, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6picard_5types_18FeedPartialSuccess_5__hash__, /*tp_hash*/
  __pyx_pw_6picard_5types_18FeedPartialSuccess_3__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_FeedPartialSuccess, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_FeedPartialSuccess, /*tp_clear*/
  __pyx_pw_6picard_5types_18FeedPartialSuccess_9__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_FeedPartialSuccess, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_18FeedPartialSuccess_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_FeedPartialSuccess, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_FeedCompleteSuccess __pyx_vtable_6picard_5types_FeedCompleteSuccess;

static PyObject *__pyx_tp_new_6picard_5types_FeedCompleteSuccess(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_FeedCompleteSuccess *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_Struct->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_Struct*)__pyx_vtabptr_6picard_5types_FeedCompleteSuccess;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<::cpp2::FeedCompleteSuccess> ();
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6picard_5types_19FeedCompleteSuccess_17__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6picard_5types_FeedCompleteSuccess(PyObject *o) {
  struct __pyx_obj_6picard_5types_FeedCompleteSuccess *p = (struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  Py_CLEAR(p->_fields_setter);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) __pyx_ptype_6thrift_3py3_5types_Struct->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_FeedCompleteSuccess);
}

static int __pyx_tp_traverse_6picard_5types_FeedCompleteSuccess(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types_FeedCompleteSuccess *p = (struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)o;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_Struct)) ? ((__pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_FeedCompleteSuccess)); if (e) return e;
  if (p->_fields_setter) {
    e = (*v)(((PyObject *)p->_fields_setter), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types_FeedCompleteSuccess(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types_FeedCompleteSuccess *p = (struct __pyx_obj_6picard_5types_FeedCompleteSuccess *)o;
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) { if (__pyx_ptype_6thrift_3py3_5types_Struct->tp_clear) __pyx_ptype_6thrift_3py3_5types_Struct->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_FeedCompleteSuccess);
  tmp = ((PyObject*)p->_fields_setter);
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6picard_5types_19FeedCompleteSuccess_leftover(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_19FeedCompleteSuccess_8leftover_1__get__(o);
}

static PyMethodDef __pyx_methods_6picard_5types_FeedCompleteSuccess[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_19FeedCompleteSuccess_7__copy__, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_19FeedCompleteSuccess_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_19FeedCompleteSuccess_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_19FeedCompleteSuccess_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6picard_5types_FeedCompleteSuccess[] = {
  {(char *)"leftover", __pyx_getprop_6picard_5types_19FeedCompleteSuccess_leftover, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_FeedCompleteSuccess = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.FeedCompleteSuccess", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_FeedCompleteSuccess), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_FeedCompleteSuccess, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6picard_5types_19FeedCompleteSuccess_5__hash__, /*tp_hash*/
  __pyx_pw_6picard_5types_19FeedCompleteSuccess_3__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_FeedCompleteSuccess, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_FeedCompleteSuccess, /*tp_clear*/
  __pyx_pw_6picard_5types_19FeedCompleteSuccess_9__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_FeedCompleteSuccess, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6picard_5types_FeedCompleteSuccess, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_19FeedCompleteSuccess_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_FeedCompleteSuccess, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types___FeedResultType __pyx_vtable_6picard_5types___FeedResultType;

static PyObject *__pyx_tp_new_6picard_5types___FeedResultType(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types___FeedResultType *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types___FeedResultType *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_CompiledEnum*)__pyx_vtabptr_6picard_5types___FeedResultType;
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___FeedResultType(PyObject *o) {
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_CompiledEnum)) __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types___FeedResultType);
}

static int __pyx_tp_traverse_6picard_5types___FeedResultType(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_CompiledEnum)) ? ((__pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types___FeedResultType)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types___FeedResultType(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_CompiledEnum)) { if (__pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_clear) __pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types___FeedResultType);
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___FeedResultType = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__FeedResultType", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___FeedResultType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___FeedResultType, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___FeedResultType, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types___FeedResultType, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___FeedResultType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_FeedResult __pyx_vtable_6picard_5types_FeedResult;

static PyObject *__pyx_tp_new_6picard_5types_FeedResult(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_FeedResult *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_Union->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_FeedResult *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_Struct*)__pyx_vtabptr_6picard_5types_FeedResult;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<::cpp2::FeedResult> ();
  p->type = ((struct __pyx_obj_6picard_5types___FeedResultType *)Py_None); Py_INCREF(Py_None);
  p->value = Py_None; Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6picard_5types_10FeedResult_17__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6picard_5types_FeedResult(PyObject *o) {
  struct __pyx_obj_6picard_5types_FeedResult *p = (struct __pyx_obj_6picard_5types_FeedResult *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  Py_CLEAR(p->type);
  Py_CLEAR(p->value);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_Union)) __pyx_ptype_6thrift_3py3_5types_Union->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_FeedResult);
}

static int __pyx_tp_traverse_6picard_5types_FeedResult(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types_FeedResult *p = (struct __pyx_obj_6picard_5types_FeedResult *)o;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_Union)) ? ((__pyx_ptype_6thrift_3py3_5types_Union->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_Union->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_FeedResult)); if (e) return e;
  if (p->type) {
    e = (*v)(((PyObject *)p->type), a); if (e) return e;
  }
  if (p->value) {
    e = (*v)(p->value, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types_FeedResult(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types_FeedResult *p = (struct __pyx_obj_6picard_5types_FeedResult *)o;
  if (likely(__pyx_ptype_6thrift_3py3_5types_Union)) { if (__pyx_ptype_6thrift_3py3_5types_Union->tp_clear) __pyx_ptype_6thrift_3py3_5types_Union->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_FeedResult);
  tmp = ((PyObject*)p->type);
  p->type = ((struct __pyx_obj_6picard_5types___FeedResultType *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->value);
  p->value = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6picard_5types_10FeedResult_feedParseFailure(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_10FeedResult_16feedParseFailure_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_10FeedResult_feedTimeoutFailure(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_10FeedResult_18feedTimeoutFailure_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_10FeedResult_feedPartialSuccess(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_10FeedResult_18feedPartialSuccess_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_10FeedResult_feedCompleteSuccess(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_10FeedResult_19feedCompleteSuccess_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_10FeedResult_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_10FeedResult_4type_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_10FeedResult_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_10FeedResult_5value_1__get__(o);
}

static PyMethodDef __pyx_methods_6picard_5types_FeedResult[] = {
  {"fromValue", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_10FeedResult_3fromValue, METH_VARARGS|METH_KEYWORDS, 0},
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_10FeedResult_7__copy__, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_10FeedResult_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_10FeedResult_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_10FeedResult_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6picard_5types_FeedResult[] = {
  {(char *)"feedParseFailure", __pyx_getprop_6picard_5types_10FeedResult_feedParseFailure, 0, (char *)0, 0},
  {(char *)"feedTimeoutFailure", __pyx_getprop_6picard_5types_10FeedResult_feedTimeoutFailure, 0, (char *)0, 0},
  {(char *)"feedPartialSuccess", __pyx_getprop_6picard_5types_10FeedResult_feedPartialSuccess, 0, (char *)0, 0},
  {(char *)"feedCompleteSuccess", __pyx_getprop_6picard_5types_10FeedResult_feedCompleteSuccess, 0, (char *)0, 0},
  {(char *)"type", __pyx_getprop_6picard_5types_10FeedResult_type, 0, (char *)0, 0},
  {(char *)"value", __pyx_getprop_6picard_5types_10FeedResult_value, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_FeedResult = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.FeedResult", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_FeedResult), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_FeedResult, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6picard_5types_10FeedResult_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_FeedResult, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_FeedResult, /*tp_clear*/
  __pyx_pw_6picard_5types_10FeedResult_9__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_FeedResult, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6picard_5types_FeedResult, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_10FeedResult_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_FeedResult, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_BatchFeedResult __pyx_vtable_6picard_5types_BatchFeedResult;

static PyObject *__pyx_tp_new_6picard_5types_BatchFeedResult(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_BatchFeedResult *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_Struct->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_BatchFeedResult *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_Struct*)__pyx_vtabptr_6picard_5types_BatchFeedResult;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<::cpp2::BatchFeedResult> ();
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___BatchFeedResult_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  p->__pyx___fbthrift_cached_feedResult = ((struct __pyx_obj_6picard_5types_FeedResult *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_6picard_5types_15BatchFeedResult_17__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6picard_5types_BatchFeedResult(PyObject *o) {
  struct __pyx_obj_6picard_5types_BatchFeedResult *p = (struct __pyx_obj_6picard_5types_BatchFeedResult *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  Py_CLEAR(p->_fields_setter);
  Py_CLEAR(p->__pyx___fbthrift_cached_feedResult);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) __pyx_ptype_6thrift_3py3_5types_Struct->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_BatchFeedResult);
}

static int __pyx_tp_traverse_6picard_5types_BatchFeedResult(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types_BatchFeedResult *p = (struct __pyx_obj_6picard_5types_BatchFeedResult *)o;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_Struct)) ? ((__pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_Struct->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_BatchFeedResult)); if (e) return e;
  if (p->_fields_setter) {
    e = (*v)(((PyObject *)p->_fields_setter), a); if (e) return e;
  }
  if (p->__pyx___fbthrift_cached_feedResult) {
    e = (*v)(((PyObject *)p->__pyx___fbthrift_cached_feedResult), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types_BatchFeedResult(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types_BatchFeedResult *p = (struct __pyx_obj_6picard_5types_BatchFeedResult *)o;
  if (likely(__pyx_ptype_6thrift_3py3_5types_Struct)) { if (__pyx_ptype_6thrift_3py3_5types_Struct->tp_clear) __pyx_ptype_6thrift_3py3_5types_Struct->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_BatchFeedResult);
  tmp = ((PyObject*)p->_fields_setter);
  p->_fields_setter = ((struct __pyx_obj_6picard_12types_fields___BatchFeedResult_FieldsSetter *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx___fbthrift_cached_feedResult);
  p->__pyx___fbthrift_cached_feedResult = ((struct __pyx_obj_6picard_5types_FeedResult *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6picard_5types_15BatchFeedResult_batchId(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_15BatchFeedResult_7batchId_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_15BatchFeedResult_topToken(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_15BatchFeedResult_8topToken_1__get__(o);
}

static PyObject *__pyx_getprop_6picard_5types_15BatchFeedResult_feedResult(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6picard_5types_15BatchFeedResult_10feedResult_1__get__(o);
}

static PyMethodDef __pyx_methods_6picard_5types_BatchFeedResult[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_15BatchFeedResult_7__copy__, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_15BatchFeedResult_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_metadata__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_15BatchFeedResult_13__get_metadata__, METH_VARARGS|METH_KEYWORDS, 0},
  {"__get_thrift_name__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_15BatchFeedResult_15__get_thrift_name__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6picard_5types_BatchFeedResult[] = {
  {(char *)"batchId", __pyx_getprop_6picard_5types_15BatchFeedResult_batchId, 0, (char *)0, 0},
  {(char *)"topToken", __pyx_getprop_6picard_5types_15BatchFeedResult_topToken, 0, (char *)0, 0},
  {(char *)"feedResult", __pyx_getprop_6picard_5types_15BatchFeedResult_feedResult, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6picard_5types_BatchFeedResult = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.BatchFeedResult", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_BatchFeedResult), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_BatchFeedResult, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6picard_5types_15BatchFeedResult_5__hash__, /*tp_hash*/
  __pyx_pw_6picard_5types_15BatchFeedResult_3__call__, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_BatchFeedResult, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_BatchFeedResult, /*tp_clear*/
  __pyx_pw_6picard_5types_15BatchFeedResult_9__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_BatchFeedResult, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6picard_5types_BatchFeedResult, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_15BatchFeedResult_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_BatchFeedResult, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_List__i64 __pyx_vtable_6picard_5types_List__i64;

static PyObject *__pyx_tp_new_6picard_5types_List__i64(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_List__i64 *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_List->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_List__i64 *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_List*)__pyx_vtabptr_6picard_5types_List__i64;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<std::vector<int64_t> > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types_List__i64(PyObject *o) {
  struct __pyx_obj_6picard_5types_List__i64 *p = (struct __pyx_obj_6picard_5types_List__i64 *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_List)) __pyx_ptype_6thrift_3py3_5types_List->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_List__i64);
}

static int __pyx_tp_traverse_6picard_5types_List__i64(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_List)) ? ((__pyx_ptype_6thrift_3py3_5types_List->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_List->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_List__i64)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types_List__i64(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_List)) { if (__pyx_ptype_6thrift_3py3_5types_List->tp_clear) __pyx_ptype_6thrift_3py3_5types_List->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_List__i64);
  return 0;
}

static PyMethodDef __pyx_methods_6picard_5types_List__i64[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_9List__i64_3__copy__, METH_NOARGS, 0},
  {"index", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_9List__i64_7index, METH_VARARGS|METH_KEYWORDS, 0},
  {"count", (PyCFunction)__pyx_pw_6picard_5types_9List__i64_9count, METH_O, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_9List__i64_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_List__i64 = {
  __pyx_pw_6picard_5types_9List__i64_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_List__i64 = {
  __pyx_pw_6picard_5types_9List__i64_5__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6picard_5types_List__i64 = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.List__i64", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_List__i64), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_List__i64, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_List__i64, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_List__i64, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_List__i64, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_List__i64, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_List__i64, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_9List__i64_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_List__i64, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_List__List__i64 __pyx_vtable_6picard_5types_List__List__i64;

static PyObject *__pyx_tp_new_6picard_5types_List__List__i64(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_List__List__i64 *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_List->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_List__List__i64 *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_List*)__pyx_vtabptr_6picard_5types_List__List__i64;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<std::vector<std::vector<int64_t> > > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types_List__List__i64(PyObject *o) {
  struct __pyx_obj_6picard_5types_List__List__i64 *p = (struct __pyx_obj_6picard_5types_List__List__i64 *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_List)) __pyx_ptype_6thrift_3py3_5types_List->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_List__List__i64);
}

static int __pyx_tp_traverse_6picard_5types_List__List__i64(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_List)) ? ((__pyx_ptype_6thrift_3py3_5types_List->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_List->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_List__List__i64)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types_List__List__i64(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_List)) { if (__pyx_ptype_6thrift_3py3_5types_List->tp_clear) __pyx_ptype_6thrift_3py3_5types_List->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_List__List__i64);
  return 0;
}

static PyMethodDef __pyx_methods_6picard_5types_List__List__i64[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_15List__List__i64_3__copy__, METH_NOARGS, 0},
  {"index", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_15List__List__i64_7index, METH_VARARGS|METH_KEYWORDS, 0},
  {"count", (PyCFunction)__pyx_pw_6picard_5types_15List__List__i64_9count, METH_O, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_15List__List__i64_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_List__List__i64 = {
  __pyx_pw_6picard_5types_15List__List__i64_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_List__List__i64 = {
  __pyx_pw_6picard_5types_15List__List__i64_5__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6picard_5types_List__List__i64 = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.List__List__i64", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_List__List__i64), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_List__List__i64, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_List__List__i64, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_List__List__i64, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_List__List__i64, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_List__List__i64, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_List__List__i64, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_15List__List__i64_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_List__List__i64, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_List__BatchFeedResult __pyx_vtable_6picard_5types_List__BatchFeedResult;

static PyObject *__pyx_tp_new_6picard_5types_List__BatchFeedResult(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_List__BatchFeedResult *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_List->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_List__BatchFeedResult *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_List*)__pyx_vtabptr_6picard_5types_List__BatchFeedResult;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<std::vector<::cpp2::BatchFeedResult> > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types_List__BatchFeedResult(PyObject *o) {
  struct __pyx_obj_6picard_5types_List__BatchFeedResult *p = (struct __pyx_obj_6picard_5types_List__BatchFeedResult *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_List)) __pyx_ptype_6thrift_3py3_5types_List->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_List__BatchFeedResult);
}

static int __pyx_tp_traverse_6picard_5types_List__BatchFeedResult(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_List)) ? ((__pyx_ptype_6thrift_3py3_5types_List->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_List->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_List__BatchFeedResult)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types_List__BatchFeedResult(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_List)) { if (__pyx_ptype_6thrift_3py3_5types_List->tp_clear) __pyx_ptype_6thrift_3py3_5types_List->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_List__BatchFeedResult);
  return 0;
}

static PyMethodDef __pyx_methods_6picard_5types_List__BatchFeedResult[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_21List__BatchFeedResult_3__copy__, METH_NOARGS, 0},
  {"index", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_21List__BatchFeedResult_7index, METH_VARARGS|METH_KEYWORDS, 0},
  {"count", (PyCFunction)__pyx_pw_6picard_5types_21List__BatchFeedResult_9count, METH_O, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_21List__BatchFeedResult_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_List__BatchFeedResult = {
  __pyx_pw_6picard_5types_21List__BatchFeedResult_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_List__BatchFeedResult = {
  __pyx_pw_6picard_5types_21List__BatchFeedResult_5__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6picard_5types_List__BatchFeedResult = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.List__BatchFeedResult", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_List__BatchFeedResult), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_List__BatchFeedResult, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_List__BatchFeedResult, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_List__BatchFeedResult, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_List__BatchFeedResult, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_List__BatchFeedResult, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_List__BatchFeedResult, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_21List__BatchFeedResult_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_List__BatchFeedResult, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_Map__string_string __pyx_vtable_6picard_5types_Map__string_string;

static PyObject *__pyx_tp_new_6picard_5types_Map__string_string(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_Map__string_string *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_Map->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_Map__string_string *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_Map*)__pyx_vtabptr_6picard_5types_Map__string_string;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<std::map<std::string,std::string> > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types_Map__string_string(PyObject *o) {
  struct __pyx_obj_6picard_5types_Map__string_string *p = (struct __pyx_obj_6picard_5types_Map__string_string *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_Map)) __pyx_ptype_6thrift_3py3_5types_Map->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_Map__string_string);
}

static int __pyx_tp_traverse_6picard_5types_Map__string_string(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_Map)) ? ((__pyx_ptype_6thrift_3py3_5types_Map->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_Map->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_Map__string_string)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types_Map__string_string(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_Map)) { if (__pyx_ptype_6thrift_3py3_5types_Map->tp_clear) __pyx_ptype_6thrift_3py3_5types_Map->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_Map__string_string);
  return 0;
}
static PyObject *__pyx_sq_item_6picard_5types_Map__string_string(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6picard_5types_Map__string_string[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_18Map__string_string_3__copy__, METH_NOARGS, 0},
  {"values", (PyCFunction)__pyx_pw_6picard_5types_18Map__string_string_14values, METH_NOARGS, 0},
  {"items", (PyCFunction)__pyx_pw_6picard_5types_18Map__string_string_17items, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_18Map__string_string_20__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Map__string_string = {
  __pyx_pw_6picard_5types_18Map__string_string_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6picard_5types_Map__string_string, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_6picard_5types_18Map__string_string_12__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Map__string_string = {
  __pyx_pw_6picard_5types_18Map__string_string_5__len__, /*mp_length*/
  __pyx_pw_6picard_5types_18Map__string_string_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6picard_5types_Map__string_string = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.Map__string_string", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_Map__string_string), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_Map__string_string, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Map__string_string, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Map__string_string, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_Map__string_string, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_Map__string_string, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6picard_5types_18Map__string_string_9__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_Map__string_string, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_18Map__string_string_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_Map__string_string, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_Map__string_ColumnType __pyx_vtable_6picard_5types_Map__string_ColumnType;

static PyObject *__pyx_tp_new_6picard_5types_Map__string_ColumnType(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_Map__string_ColumnType *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_Map->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_Map__string_ColumnType *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_Map*)__pyx_vtabptr_6picard_5types_Map__string_ColumnType;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<std::map<std::string,::cpp2::ColumnType> > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types_Map__string_ColumnType(PyObject *o) {
  struct __pyx_obj_6picard_5types_Map__string_ColumnType *p = (struct __pyx_obj_6picard_5types_Map__string_ColumnType *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_Map)) __pyx_ptype_6thrift_3py3_5types_Map->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_Map__string_ColumnType);
}

static int __pyx_tp_traverse_6picard_5types_Map__string_ColumnType(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_Map)) ? ((__pyx_ptype_6thrift_3py3_5types_Map->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_Map->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_Map__string_ColumnType)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types_Map__string_ColumnType(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_Map)) { if (__pyx_ptype_6thrift_3py3_5types_Map->tp_clear) __pyx_ptype_6thrift_3py3_5types_Map->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_Map__string_ColumnType);
  return 0;
}
static PyObject *__pyx_sq_item_6picard_5types_Map__string_ColumnType(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6picard_5types_Map__string_ColumnType[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_22Map__string_ColumnType_3__copy__, METH_NOARGS, 0},
  {"values", (PyCFunction)__pyx_pw_6picard_5types_22Map__string_ColumnType_14values, METH_NOARGS, 0},
  {"items", (PyCFunction)__pyx_pw_6picard_5types_22Map__string_ColumnType_17items, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_22Map__string_ColumnType_20__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Map__string_ColumnType = {
  __pyx_pw_6picard_5types_22Map__string_ColumnType_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6picard_5types_Map__string_ColumnType, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_6picard_5types_22Map__string_ColumnType_12__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Map__string_ColumnType = {
  __pyx_pw_6picard_5types_22Map__string_ColumnType_5__len__, /*mp_length*/
  __pyx_pw_6picard_5types_22Map__string_ColumnType_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6picard_5types_Map__string_ColumnType = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.Map__string_ColumnType", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_Map__string_ColumnType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_Map__string_ColumnType, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Map__string_ColumnType, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Map__string_ColumnType, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_Map__string_ColumnType, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_Map__string_ColumnType, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6picard_5types_22Map__string_ColumnType_9__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_Map__string_ColumnType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_22Map__string_ColumnType_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_Map__string_ColumnType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_List__string __pyx_vtable_6picard_5types_List__string;

static PyObject *__pyx_tp_new_6picard_5types_List__string(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_List__string *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_List->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_List__string *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_List*)__pyx_vtabptr_6picard_5types_List__string;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<std::vector<std::string> > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types_List__string(PyObject *o) {
  struct __pyx_obj_6picard_5types_List__string *p = (struct __pyx_obj_6picard_5types_List__string *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_List)) __pyx_ptype_6thrift_3py3_5types_List->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_List__string);
}

static int __pyx_tp_traverse_6picard_5types_List__string(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_List)) ? ((__pyx_ptype_6thrift_3py3_5types_List->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_List->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_List__string)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types_List__string(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_List)) { if (__pyx_ptype_6thrift_3py3_5types_List->tp_clear) __pyx_ptype_6thrift_3py3_5types_List->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_List__string);
  return 0;
}

static PyMethodDef __pyx_methods_6picard_5types_List__string[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_12List__string_3__copy__, METH_NOARGS, 0},
  {"index", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_12List__string_7index, METH_VARARGS|METH_KEYWORDS, 0},
  {"count", (PyCFunction)__pyx_pw_6picard_5types_12List__string_9count, METH_O, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_12List__string_11__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_List__string = {
  __pyx_pw_6picard_5types_12List__string_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_List__string = {
  __pyx_pw_6picard_5types_12List__string_5__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6picard_5types_List__string = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.List__string", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_List__string), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_List__string, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_List__string, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_List__string, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_List__string, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_List__string, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_List__string, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_12List__string_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_List__string, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_6picard_5types_Map__string_List__string __pyx_vtable_6picard_5types_Map__string_List__string;

static PyObject *__pyx_tp_new_6picard_5types_Map__string_List__string(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6picard_5types_Map__string_List__string *p;
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_Map->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6picard_5types_Map__string_List__string *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6thrift_3py3_5types_Map*)__pyx_vtabptr_6picard_5types_Map__string_List__string;
  new((void*)&(p->_cpp_obj)) std::shared_ptr<std::map<std::string,std::vector<std::string> > > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types_Map__string_List__string(PyObject *o) {
  struct __pyx_obj_6picard_5types_Map__string_List__string *p = (struct __pyx_obj_6picard_5types_Map__string_List__string *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->_cpp_obj);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_Map)) __pyx_ptype_6thrift_3py3_5types_Map->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types_Map__string_List__string);
}

static int __pyx_tp_traverse_6picard_5types_Map__string_List__string(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_Map)) ? ((__pyx_ptype_6thrift_3py3_5types_Map->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_Map->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types_Map__string_List__string)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types_Map__string_List__string(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_Map)) { if (__pyx_ptype_6thrift_3py3_5types_Map->tp_clear) __pyx_ptype_6thrift_3py3_5types_Map->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types_Map__string_List__string);
  return 0;
}
static PyObject *__pyx_sq_item_6picard_5types_Map__string_List__string(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6picard_5types_Map__string_List__string[] = {
  {"__copy__", (PyCFunction)__pyx_pw_6picard_5types_24Map__string_List__string_3__copy__, METH_NOARGS, 0},
  {"values", (PyCFunction)__pyx_pw_6picard_5types_24Map__string_List__string_14values, METH_NOARGS, 0},
  {"items", (PyCFunction)__pyx_pw_6picard_5types_24Map__string_List__string_17items, METH_NOARGS, 0},
  {"__get_reflection__", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_6picard_5types_24Map__string_List__string_20__get_reflection__, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Map__string_List__string = {
  __pyx_pw_6picard_5types_24Map__string_List__string_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6picard_5types_Map__string_List__string, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  __pyx_pw_6picard_5types_24Map__string_List__string_12__contains__, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Map__string_List__string = {
  __pyx_pw_6picard_5types_24Map__string_List__string_5__len__, /*mp_length*/
  __pyx_pw_6picard_5types_24Map__string_List__string_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6picard_5types_Map__string_List__string = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.Map__string_List__string", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types_Map__string_List__string), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types_Map__string_List__string, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Map__string_List__string, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Map__string_List__string, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types_Map__string_List__string, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types_Map__string_List__string, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6picard_5types_24Map__string_List__string_9__iter__, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types_Map__string_List__string, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6picard_5types_24Map__string_List__string_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types_Map__string_List__string, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_6picard_5types___ColumnTypeMeta(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___ColumnTypeMeta(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_EnumMeta)) __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types___ColumnTypeMeta);
}

static int __pyx_tp_traverse_6picard_5types___ColumnTypeMeta(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_EnumMeta)) ? ((__pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types___ColumnTypeMeta)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types___ColumnTypeMeta(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_EnumMeta)) { if (__pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_clear) __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types___ColumnTypeMeta);
  return 0;
}

static PyObject *__pyx_tp_getattro_6picard_5types___ColumnTypeMeta(PyObject *o, PyObject *n) {
  PyObject *v = __pyx_pw_6picard_5types_16__ColumnTypeMeta_7__getattribute__(o, n);
  return v;
}

static PyMethodDef __pyx_methods_6picard_5types___ColumnTypeMeta[] = {
  {"_fbthrift_get_by_value", (PyCFunction)__pyx_pw_6picard_5types_16__ColumnTypeMeta_1_fbthrift_get_by_value, METH_O, 0},
  {"_fbthrift_get_all_names", (PyCFunction)__pyx_pw_6picard_5types_16__ColumnTypeMeta_3_fbthrift_get_all_names, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence___ColumnTypeMeta = {
  __pyx_pw_6picard_5types_16__ColumnTypeMeta_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___ColumnTypeMeta = {
  __pyx_pw_6picard_5types_16__ColumnTypeMeta_5__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6picard_5types___ColumnTypeMeta = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__ColumnTypeMeta", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___ColumnTypeMeta), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___ColumnTypeMeta, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence___ColumnTypeMeta, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___ColumnTypeMeta, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_6picard_5types___ColumnTypeMeta, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___ColumnTypeMeta, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types___ColumnTypeMeta, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types___ColumnTypeMeta, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___ColumnTypeMeta, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_6picard_5types___ModeMeta(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___ModeMeta(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_EnumMeta)) __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types___ModeMeta);
}

static int __pyx_tp_traverse_6picard_5types___ModeMeta(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_EnumMeta)) ? ((__pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types___ModeMeta)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types___ModeMeta(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_EnumMeta)) { if (__pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_clear) __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types___ModeMeta);
  return 0;
}

static PyObject *__pyx_tp_getattro_6picard_5types___ModeMeta(PyObject *o, PyObject *n) {
  PyObject *v = __pyx_pw_6picard_5types_10__ModeMeta_7__getattribute__(o, n);
  return v;
}

static PyMethodDef __pyx_methods_6picard_5types___ModeMeta[] = {
  {"_fbthrift_get_by_value", (PyCFunction)__pyx_pw_6picard_5types_10__ModeMeta_1_fbthrift_get_by_value, METH_O, 0},
  {"_fbthrift_get_all_names", (PyCFunction)__pyx_pw_6picard_5types_10__ModeMeta_3_fbthrift_get_all_names, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence___ModeMeta = {
  __pyx_pw_6picard_5types_10__ModeMeta_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___ModeMeta = {
  __pyx_pw_6picard_5types_10__ModeMeta_5__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6picard_5types___ModeMeta = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__ModeMeta", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___ModeMeta), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___ModeMeta, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence___ModeMeta, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___ModeMeta, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_6picard_5types___ModeMeta, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___ModeMeta, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types___ModeMeta, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types___ModeMeta, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___ModeMeta, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_6picard_5types___FeedFatalException_Union_TypeMeta(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___FeedFatalException_Union_TypeMeta(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_EnumMeta)) __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types___FeedFatalException_Union_TypeMeta);
}

static int __pyx_tp_traverse_6picard_5types___FeedFatalException_Union_TypeMeta(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_EnumMeta)) ? ((__pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types___FeedFatalException_Union_TypeMeta)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types___FeedFatalException_Union_TypeMeta(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_EnumMeta)) { if (__pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_clear) __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types___FeedFatalException_Union_TypeMeta);
  return 0;
}

static PyObject *__pyx_tp_getattro_6picard_5types___FeedFatalException_Union_TypeMeta(PyObject *o, PyObject *n) {
  PyObject *v = __pyx_pw_6picard_5types_35__FeedFatalException_Union_TypeMeta_7__getattribute__(o, n);
  return v;
}

static PyMethodDef __pyx_methods_6picard_5types___FeedFatalException_Union_TypeMeta[] = {
  {"_fbthrift_get_by_value", (PyCFunction)__pyx_pw_6picard_5types_35__FeedFatalException_Union_TypeMeta_1_fbthrift_get_by_value, METH_O, 0},
  {"_fbthrift_get_all_names", (PyCFunction)__pyx_pw_6picard_5types_35__FeedFatalException_Union_TypeMeta_3_fbthrift_get_all_names, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence___FeedFatalException_Union_TypeMeta = {
  __pyx_pw_6picard_5types_35__FeedFatalException_Union_TypeMeta_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___FeedFatalException_Union_TypeMeta = {
  __pyx_pw_6picard_5types_35__FeedFatalException_Union_TypeMeta_5__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6picard_5types___FeedFatalException_Union_TypeMeta = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__FeedFatalException_Union_TypeMeta", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___FeedFatalException_Union_TypeMeta), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___FeedFatalException_Union_TypeMeta, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence___FeedFatalException_Union_TypeMeta, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___FeedFatalException_Union_TypeMeta, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_6picard_5types___FeedFatalException_Union_TypeMeta, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___FeedFatalException_Union_TypeMeta, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types___FeedFatalException_Union_TypeMeta, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types___FeedFatalException_Union_TypeMeta, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___FeedFatalException_Union_TypeMeta, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_6picard_5types___FeedResult_Union_TypeMeta(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_new(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___FeedResult_Union_TypeMeta(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_6thrift_3py3_5types_EnumMeta)) __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_6picard_5types___FeedResult_Union_TypeMeta);
}

static int __pyx_tp_traverse_6picard_5types___FeedResult_Union_TypeMeta(PyObject *o, visitproc v, void *a) {
  int e;
  e = ((likely(__pyx_ptype_6thrift_3py3_5types_EnumMeta)) ? ((__pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_traverse) ? __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6picard_5types___FeedResult_Union_TypeMeta)); if (e) return e;
  return 0;
}

static int __pyx_tp_clear_6picard_5types___FeedResult_Union_TypeMeta(PyObject *o) {
  if (likely(__pyx_ptype_6thrift_3py3_5types_EnumMeta)) { if (__pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_clear) __pyx_ptype_6thrift_3py3_5types_EnumMeta->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6picard_5types___FeedResult_Union_TypeMeta);
  return 0;
}

static PyObject *__pyx_tp_getattro_6picard_5types___FeedResult_Union_TypeMeta(PyObject *o, PyObject *n) {
  PyObject *v = __pyx_pw_6picard_5types_27__FeedResult_Union_TypeMeta_7__getattribute__(o, n);
  return v;
}

static PyMethodDef __pyx_methods_6picard_5types___FeedResult_Union_TypeMeta[] = {
  {"_fbthrift_get_by_value", (PyCFunction)__pyx_pw_6picard_5types_27__FeedResult_Union_TypeMeta_1_fbthrift_get_by_value, METH_O, 0},
  {"_fbthrift_get_all_names", (PyCFunction)__pyx_pw_6picard_5types_27__FeedResult_Union_TypeMeta_3_fbthrift_get_all_names, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence___FeedResult_Union_TypeMeta = {
  __pyx_pw_6picard_5types_27__FeedResult_Union_TypeMeta_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping___FeedResult_Union_TypeMeta = {
  __pyx_pw_6picard_5types_27__FeedResult_Union_TypeMeta_5__len__, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6picard_5types___FeedResult_Union_TypeMeta = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__FeedResult_Union_TypeMeta", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___FeedResult_Union_TypeMeta), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___FeedResult_Union_TypeMeta, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence___FeedResult_Union_TypeMeta, /*tp_as_sequence*/
  &__pyx_tp_as_mapping___FeedResult_Union_TypeMeta, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_6picard_5types___FeedResult_Union_TypeMeta, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___FeedResult_Union_TypeMeta, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types___FeedResult_Union_TypeMeta, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6picard_5types___FeedResult_Union_TypeMeta, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___FeedResult_Union_TypeMeta, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct__create *__pyx_freelist_6picard_5types___pyx_scope_struct__create[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct__create = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct__create(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct__create > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct__create)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct__create[--__pyx_freecount_6picard_5types___pyx_scope_struct__create];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct__create));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct__create(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct__create *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct__create *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v___fbthrift_inst);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct__create < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct__create)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct__create[__pyx_freecount_6picard_5types___pyx_scope_struct__create++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct__create *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct__create(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct__create *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct__create *)o;
  if (p->__pyx_v___fbthrift_inst) {
    e = (*v)(((PyObject *)p->__pyx_v___fbthrift_inst), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types___pyx_scope_struct__create(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types___pyx_scope_struct__create *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct__create *)o;
  tmp = ((PyObject*)p->__pyx_v___fbthrift_inst);
  p->__pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_RegisterSQLSchemaException *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct__create = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct__create", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct__create), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct__create, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct__create, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types___pyx_scope_struct__create, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct__create, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr *__pyx_freelist_6picard_5types___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct_1_genexpr[--__pyx_freecount_6picard_5types___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v__);
  Py_CLEAR(p->__pyx_v_v);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct_1_genexpr[__pyx_freecount_6picard_5types___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v__) {
    e = (*v)(p->__pyx_v__, a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create *__pyx_freelist_6picard_5types___pyx_scope_struct_2_create[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct_2_create = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_2_create(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct_2_create > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct_2_create[--__pyx_freecount_6picard_5types___pyx_scope_struct_2_create];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_2_create(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v___fbthrift_inst);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct_2_create < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct_2_create[__pyx_freecount_6picard_5types___pyx_scope_struct_2_create++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct_2_create(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create *)o;
  if (p->__pyx_v___fbthrift_inst) {
    e = (*v)(((PyObject *)p->__pyx_v___fbthrift_inst), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types___pyx_scope_struct_2_create(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create *)o;
  tmp = ((PyObject*)p->__pyx_v___fbthrift_inst);
  p->__pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_RegisterTokenizerException *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct_2_create = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct_2_create", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_2_create), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_2_create, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct_2_create, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types___pyx_scope_struct_2_create, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct_2_create, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr *__pyx_freelist_6picard_5types___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct_3_genexpr[--__pyx_freecount_6picard_5types___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v__);
  Py_CLEAR(p->__pyx_v_v);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct_3_genexpr[__pyx_freecount_6picard_5types___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v__) {
    e = (*v)(p->__pyx_v__, a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create *__pyx_freelist_6picard_5types___pyx_scope_struct_4_create[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct_4_create = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_4_create(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct_4_create > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct_4_create[--__pyx_freecount_6picard_5types___pyx_scope_struct_4_create];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_4_create(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v___fbthrift_inst);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct_4_create < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct_4_create[__pyx_freecount_6picard_5types___pyx_scope_struct_4_create++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct_4_create(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create *)o;
  if (p->__pyx_v___fbthrift_inst) {
    e = (*v)(((PyObject *)p->__pyx_v___fbthrift_inst), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6picard_5types___pyx_scope_struct_4_create(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create *)o;
  tmp = ((PyObject*)p->__pyx_v___fbthrift_inst);
  p->__pyx_v___fbthrift_inst = ((struct __pyx_obj_6picard_5types_FeedException *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct_4_create = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct_4_create", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_4_create), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_4_create, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct_4_create, /*tp_traverse*/
  __pyx_tp_clear_6picard_5types___pyx_scope_struct_4_create, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct_4_create, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr *__pyx_freelist_6picard_5types___pyx_scope_struct_5_genexpr[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct_5_genexpr = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_5_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct_5_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct_5_genexpr[--__pyx_freecount_6picard_5types___pyx_scope_struct_5_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_5_genexpr(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v__);
  Py_CLEAR(p->__pyx_v_v);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct_5_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct_5_genexpr[__pyx_freecount_6picard_5types___pyx_scope_struct_5_genexpr++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct_5_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v__) {
    e = (*v)(p->__pyx_v__, a); if (e) return e;
  }
  if (p->__pyx_v_v) {
    e = (*v)(p->__pyx_v_v, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct_5_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct_5_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_5_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_5_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct_5_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct_5_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__ *__pyx_freelist_6picard_5types___pyx_scope_struct_6___iter__[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct_6___iter__ = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_6___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__ *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct_6___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct_6___iter__[--__pyx_freecount_6picard_5types___pyx_scope_struct_6___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__ *)o);
  new((void*)&(p->__pyx_v_citem)) std::string();
  new((void*)&(p->__pyx_v_itr)) ::thrift::py3::map_iter<std::map<std::string,std::string> > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_6___iter__(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__ *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__ *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_citem);
  __Pyx_call_destructor(p->__pyx_v_itr);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct_6___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct_6___iter__[__pyx_freecount_6picard_5types___pyx_scope_struct_6___iter__++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct_6___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__ *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct_6___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct_6___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_6___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_6___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct_6___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct_6___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values *__pyx_freelist_6picard_5types___pyx_scope_struct_7_values[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct_7_values = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_7_values(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct_7_values > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct_7_values[--__pyx_freecount_6picard_5types___pyx_scope_struct_7_values];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values *)o);
  new((void*)&(p->__pyx_v_citem)) std::string();
  new((void*)&(p->__pyx_v_itr)) ::thrift::py3::map_iter<std::map<std::string,std::string> > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_7_values(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_citem);
  __Pyx_call_destructor(p->__pyx_v_itr);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct_7_values < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct_7_values[__pyx_freecount_6picard_5types___pyx_scope_struct_7_values++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct_7_values(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct_7_values = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct_7_values", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_7_values), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_7_values, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct_7_values, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct_7_values, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items *__pyx_freelist_6picard_5types___pyx_scope_struct_8_items[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct_8_items = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_8_items(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct_8_items > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct_8_items[--__pyx_freecount_6picard_5types___pyx_scope_struct_8_items];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items *)o);
  new((void*)&(p->__pyx_v_citem)) std::string();
  new((void*)&(p->__pyx_v_ckey)) std::string();
  new((void*)&(p->__pyx_v_itr)) ::thrift::py3::map_iter<std::map<std::string,std::string> > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_8_items(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_citem);
  __Pyx_call_destructor(p->__pyx_v_ckey);
  __Pyx_call_destructor(p->__pyx_v_itr);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct_8_items < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct_8_items[__pyx_freecount_6picard_5types___pyx_scope_struct_8_items++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct_8_items(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct_8_items = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct_8_items", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_8_items), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_8_items, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct_8_items, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct_8_items, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__ *__pyx_freelist_6picard_5types___pyx_scope_struct_9___iter__[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct_9___iter__ = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_9___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__ *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct_9___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct_9___iter__[--__pyx_freecount_6picard_5types___pyx_scope_struct_9___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__ *)o);
  new((void*)&(p->__pyx_v_citem)) std::string();
  new((void*)&(p->__pyx_v_itr)) ::thrift::py3::map_iter<std::map<std::string,::cpp2::ColumnType> > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_9___iter__(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__ *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__ *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_citem);
  __Pyx_call_destructor(p->__pyx_v_itr);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct_9___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct_9___iter__[__pyx_freecount_6picard_5types___pyx_scope_struct_9___iter__++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct_9___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__ *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct_9___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct_9___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_9___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_9___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct_9___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct_9___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values *__pyx_freelist_6picard_5types___pyx_scope_struct_10_values[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct_10_values = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_10_values(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct_10_values > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct_10_values[--__pyx_freecount_6picard_5types___pyx_scope_struct_10_values];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values *)o);
  new((void*)&(p->__pyx_v_citem)) ::cpp2::ColumnType();
  new((void*)&(p->__pyx_v_itr)) ::thrift::py3::map_iter<std::map<std::string,::cpp2::ColumnType> > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_10_values(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_citem);
  __Pyx_call_destructor(p->__pyx_v_itr);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct_10_values < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct_10_values[__pyx_freecount_6picard_5types___pyx_scope_struct_10_values++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct_10_values(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct_10_values = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct_10_values", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_10_values), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_10_values, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct_10_values, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct_10_values, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items *__pyx_freelist_6picard_5types___pyx_scope_struct_11_items[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct_11_items = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_11_items(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct_11_items > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct_11_items[--__pyx_freecount_6picard_5types___pyx_scope_struct_11_items];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items *)o);
  new((void*)&(p->__pyx_v_citem)) ::cpp2::ColumnType();
  new((void*)&(p->__pyx_v_ckey)) std::string();
  new((void*)&(p->__pyx_v_itr)) ::thrift::py3::map_iter<std::map<std::string,::cpp2::ColumnType> > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_11_items(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_citem);
  __Pyx_call_destructor(p->__pyx_v_ckey);
  __Pyx_call_destructor(p->__pyx_v_itr);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct_11_items < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct_11_items[__pyx_freecount_6picard_5types___pyx_scope_struct_11_items++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct_11_items(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct_11_items = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct_11_items", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_11_items), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_11_items, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct_11_items, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct_11_items, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__ *__pyx_freelist_6picard_5types___pyx_scope_struct_12___iter__[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct_12___iter__ = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_12___iter__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__ *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct_12___iter__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct_12___iter__[--__pyx_freecount_6picard_5types___pyx_scope_struct_12___iter__];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__ *)o);
  new((void*)&(p->__pyx_v_citem)) std::string();
  new((void*)&(p->__pyx_v_itr)) ::thrift::py3::map_iter<std::map<std::string,std::vector<std::string> > > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_12___iter__(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__ *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__ *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_citem);
  __Pyx_call_destructor(p->__pyx_v_itr);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct_12___iter__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct_12___iter__[__pyx_freecount_6picard_5types___pyx_scope_struct_12___iter__++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct_12___iter__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__ *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct_12___iter__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct_12___iter__", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_12___iter__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_12___iter__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct_12___iter__, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct_12___iter__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values *__pyx_freelist_6picard_5types___pyx_scope_struct_13_values[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct_13_values = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_13_values(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct_13_values > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct_13_values[--__pyx_freecount_6picard_5types___pyx_scope_struct_13_values];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values *)o);
  new((void*)&(p->__pyx_v_citem)) std::shared_ptr<std::vector<std::string> > ();
  new((void*)&(p->__pyx_v_itr)) ::thrift::py3::map_iter<std::map<std::string,std::vector<std::string> > > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_13_values(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_citem);
  __Pyx_call_destructor(p->__pyx_v_itr);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct_13_values < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct_13_values[__pyx_freecount_6picard_5types___pyx_scope_struct_13_values++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct_13_values(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct_13_values = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct_13_values", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_13_values), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_13_values, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct_13_values, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct_13_values, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items *__pyx_freelist_6picard_5types___pyx_scope_struct_14_items[8];
static int __pyx_freecount_6picard_5types___pyx_scope_struct_14_items = 0;

static PyObject *__pyx_tp_new_6picard_5types___pyx_scope_struct_14_items(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items *p;
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6picard_5types___pyx_scope_struct_14_items > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items)))) {
    o = (PyObject*)__pyx_freelist_6picard_5types___pyx_scope_struct_14_items[--__pyx_freecount_6picard_5types___pyx_scope_struct_14_items];
    memset(o, 0, sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  p = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items *)o);
  new((void*)&(p->__pyx_v_citem)) std::shared_ptr<std::vector<std::string> > ();
  new((void*)&(p->__pyx_v_ckey)) std::string();
  new((void*)&(p->__pyx_v_itr)) ::thrift::py3::map_iter<std::map<std::string,std::vector<std::string> > > ();
  return o;
}

static void __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_14_items(PyObject *o) {
  struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items *)o;
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->__pyx_v_citem);
  __Pyx_call_destructor(p->__pyx_v_ckey);
  __Pyx_call_destructor(p->__pyx_v_itr);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6picard_5types___pyx_scope_struct_14_items < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items)))) {
    __pyx_freelist_6picard_5types___pyx_scope_struct_14_items[__pyx_freecount_6picard_5types___pyx_scope_struct_14_items++] = ((struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6picard_5types___pyx_scope_struct_14_items(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items *p = (struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static PyTypeObject __pyx_type_6picard_5types___pyx_scope_struct_14_items = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.__pyx_scope_struct_14_items", /*tp_name*/
  sizeof(struct __pyx_obj_6picard_5types___pyx_scope_struct_14_items), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6picard_5types___pyx_scope_struct_14_items, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6picard_5types___pyx_scope_struct_14_items, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6picard_5types___pyx_scope_struct_14_items, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_array___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryview___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryviewslice___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "picard.types._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
  0, /*tp_pypy_flags*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_types(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_types},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "types",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 1},
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_kp_u_At_most_one_field_may_be_set_whe, __pyx_k_At_most_one_field_may_be_set_whe, sizeof(__pyx_k_At_most_one_field_may_be_set_whe), 0, 1, 0, 0},
  {&__pyx_n_s_BatchFeedResult, __pyx_k_BatchFeedResult, sizeof(__pyx_k_BatchFeedResult), 0, 0, 1, 1},
  {&__pyx_n_u_BatchFeedResult, __pyx_k_BatchFeedResult, sizeof(__pyx_k_BatchFeedResult), 0, 1, 0, 1},
  {&__pyx_n_s_BatchId, __pyx_k_BatchId, sizeof(__pyx_k_BatchId), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_ColumnId, __pyx_k_ColumnId, sizeof(__pyx_k_ColumnId), 0, 0, 1, 1},
  {&__pyx_n_s_ColumnType, __pyx_k_ColumnType, sizeof(__pyx_k_ColumnType), 0, 0, 1, 1},
  {&__pyx_n_s_DBId, __pyx_k_DBId, sizeof(__pyx_k_DBId), 0, 0, 1, 1},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_Exception, __pyx_k_Exception, sizeof(__pyx_k_Exception), 0, 0, 1, 1},
  {&__pyx_n_s_FeedCompleteSuccess, __pyx_k_FeedCompleteSuccess, sizeof(__pyx_k_FeedCompleteSuccess), 0, 0, 1, 1},
  {&__pyx_n_u_FeedCompleteSuccess, __pyx_k_FeedCompleteSuccess, sizeof(__pyx_k_FeedCompleteSuccess), 0, 1, 0, 1},
  {&__pyx_n_s_FeedException, __pyx_k_FeedException, sizeof(__pyx_k_FeedException), 0, 0, 1, 1},
  {&__pyx_n_u_FeedException, __pyx_k_FeedException, sizeof(__pyx_k_FeedException), 0, 1, 0, 1},
  {&__pyx_n_s_FeedException_create_locals_gene, __pyx_k_FeedException_create_locals_gene, sizeof(__pyx_k_FeedException_create_locals_gene), 0, 0, 1, 1},
  {&__pyx_n_s_FeedFatalException, __pyx_k_FeedFatalException, sizeof(__pyx_k_FeedFatalException), 0, 0, 1, 1},
  {&__pyx_n_s_FeedFatalExceptionType, __pyx_k_FeedFatalExceptionType, sizeof(__pyx_k_FeedFatalExceptionType), 0, 0, 1, 1},
  {&__pyx_n_s_FeedParseFailure, __pyx_k_FeedParseFailure, sizeof(__pyx_k_FeedParseFailure), 0, 0, 1, 1},
  {&__pyx_n_u_FeedParseFailure, __pyx_k_FeedParseFailure, sizeof(__pyx_k_FeedParseFailure), 0, 1, 0, 1},
  {&__pyx_n_s_FeedPartialSuccess, __pyx_k_FeedPartialSuccess, sizeof(__pyx_k_FeedPartialSuccess), 0, 0, 1, 1},
  {&__pyx_n_u_FeedPartialSuccess, __pyx_k_FeedPartialSuccess, sizeof(__pyx_k_FeedPartialSuccess), 0, 1, 0, 1},
  {&__pyx_n_s_FeedResult, __pyx_k_FeedResult, sizeof(__pyx_k_FeedResult), 0, 0, 1, 1},
  {&__pyx_n_s_FeedResultType, __pyx_k_FeedResultType, sizeof(__pyx_k_FeedResultType), 0, 0, 1, 1},
  {&__pyx_n_s_FeedTimeoutFailure, __pyx_k_FeedTimeoutFailure, sizeof(__pyx_k_FeedTimeoutFailure), 0, 0, 1, 1},
  {&__pyx_n_u_FeedTimeoutFailure, __pyx_k_FeedTimeoutFailure, sizeof(__pyx_k_FeedTimeoutFailure), 0, 1, 0, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_k_Incompatible_checksums_s_vs_0xb0, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xb0), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_n_s_InputIds, __pyx_k_InputIds, sizeof(__pyx_k_InputIds), 0, 0, 1, 1},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_n_s_IsSet, __pyx_k_IsSet, sizeof(__pyx_k_IsSet), 0, 0, 1, 1},
  {&__pyx_n_s_Iterable, __pyx_k_Iterable, sizeof(__pyx_k_Iterable), 0, 0, 1, 1},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_List__BatchFeedResult, __pyx_k_List__BatchFeedResult, sizeof(__pyx_k_List__BatchFeedResult), 0, 0, 1, 1},
  {&__pyx_n_s_List__List__i64, __pyx_k_List__List__i64, sizeof(__pyx_k_List__List__i64), 0, 0, 1, 1},
  {&__pyx_n_s_List__i64, __pyx_k_List__i64, sizeof(__pyx_k_List__i64), 0, 0, 1, 1},
  {&__pyx_n_s_List__string, __pyx_k_List__string, sizeof(__pyx_k_List__string), 0, 0, 1, 1},
  {&__pyx_n_s_Map__string_ColumnType, __pyx_k_Map__string_ColumnType, sizeof(__pyx_k_Map__string_ColumnType), 0, 0, 1, 1},
  {&__pyx_n_s_Map__string_ColumnType___iter, __pyx_k_Map__string_ColumnType___iter, sizeof(__pyx_k_Map__string_ColumnType___iter), 0, 0, 1, 1},
  {&__pyx_n_s_Map__string_ColumnType_items, __pyx_k_Map__string_ColumnType_items, sizeof(__pyx_k_Map__string_ColumnType_items), 0, 0, 1, 1},
  {&__pyx_n_s_Map__string_ColumnType_values, __pyx_k_Map__string_ColumnType_values, sizeof(__pyx_k_Map__string_ColumnType_values), 0, 0, 1, 1},
  {&__pyx_n_s_Map__string_List__string, __pyx_k_Map__string_List__string, sizeof(__pyx_k_Map__string_List__string), 0, 0, 1, 1},
  {&__pyx_n_s_Map__string_List__string___iter, __pyx_k_Map__string_List__string___iter, sizeof(__pyx_k_Map__string_List__string___iter), 0, 0, 1, 1},
  {&__pyx_n_s_Map__string_List__string_items, __pyx_k_Map__string_List__string_items, sizeof(__pyx_k_Map__string_List__string_items), 0, 0, 1, 1},
  {&__pyx_n_s_Map__string_List__string_values, __pyx_k_Map__string_List__string_values, sizeof(__pyx_k_Map__string_List__string_values), 0, 0, 1, 1},
  {&__pyx_n_s_Map__string_string, __pyx_k_Map__string_string, sizeof(__pyx_k_Map__string_string), 0, 0, 1, 1},
  {&__pyx_n_s_Map__string_string___iter, __pyx_k_Map__string_string___iter, sizeof(__pyx_k_Map__string_string___iter), 0, 0, 1, 1},
  {&__pyx_n_s_Map__string_string_items, __pyx_k_Map__string_string_items, sizeof(__pyx_k_Map__string_string_items), 0, 0, 1, 1},
  {&__pyx_n_s_Map__string_string_values, __pyx_k_Map__string_string_values, sizeof(__pyx_k_Map__string_string_values), 0, 0, 1, 1},
  {&__pyx_n_s_Mapping, __pyx_k_Mapping, sizeof(__pyx_k_Mapping), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_s_Mode, __pyx_k_Mode, sizeof(__pyx_k_Mode), 0, 0, 1, 1},
  {&__pyx_n_s_ModeException, __pyx_k_ModeException, sizeof(__pyx_k_ModeException), 0, 0, 1, 1},
  {&__pyx_n_u_ModeException, __pyx_k_ModeException, sizeof(__pyx_k_ModeException), 0, 1, 0, 1},
  {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {&__pyx_kp_u_None_is_not_of_the_type__typing, __pyx_k_None_is_not_of_the_type__typing, sizeof(__pyx_k_None_is_not_of_the_type__typing), 0, 1, 0, 0},
  {&__pyx_kp_u_None_is_not_of_type__typing_Sequ, __pyx_k_None_is_not_of_type__typing_Sequ, sizeof(__pyx_k_None_is_not_of_type__typing_Sequ), 0, 1, 0, 0},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_RegisterSQLSchemaException, __pyx_k_RegisterSQLSchemaException, sizeof(__pyx_k_RegisterSQLSchemaException), 0, 0, 1, 1},
  {&__pyx_n_u_RegisterSQLSchemaException, __pyx_k_RegisterSQLSchemaException, sizeof(__pyx_k_RegisterSQLSchemaException), 0, 1, 0, 1},
  {&__pyx_n_s_RegisterSQLSchemaException_creat, __pyx_k_RegisterSQLSchemaException_creat, sizeof(__pyx_k_RegisterSQLSchemaException_creat), 0, 0, 1, 1},
  {&__pyx_n_s_RegisterTokenizerException, __pyx_k_RegisterTokenizerException, sizeof(__pyx_k_RegisterTokenizerException), 0, 0, 1, 1},
  {&__pyx_n_u_RegisterTokenizerException, __pyx_k_RegisterTokenizerException, sizeof(__pyx_k_RegisterTokenizerException), 0, 1, 0, 1},
  {&__pyx_n_s_RegisterTokenizerException_creat, __pyx_k_RegisterTokenizerException_creat, sizeof(__pyx_k_RegisterTokenizerException_creat), 0, 0, 1, 1},
  {&__pyx_n_s_SQLSchema, __pyx_k_SQLSchema, sizeof(__pyx_k_SQLSchema), 0, 0, 1, 1},
  {&__pyx_n_u_SQLSchema, __pyx_k_SQLSchema, sizeof(__pyx_k_SQLSchema), 0, 1, 0, 1},
  {&__pyx_n_s_Sequence, __pyx_k_Sequence, sizeof(__pyx_k_Sequence), 0, 0, 1, 1},
  {&__pyx_n_s_Set, __pyx_k_Set, sizeof(__pyx_k_Set), 0, 0, 1, 1},
  {&__pyx_n_s_TableId, __pyx_k_TableId, sizeof(__pyx_k_TableId), 0, 0, 1, 1},
  {&__pyx_n_s_Token, __pyx_k_Token, sizeof(__pyx_k_Token), 0, 0, 1, 1},
  {&__pyx_n_s_TokenizerNotRegisteredException, __pyx_k_TokenizerNotRegisteredException, sizeof(__pyx_k_TokenizerNotRegisteredException), 0, 0, 1, 1},
  {&__pyx_n_u_TokenizerNotRegisteredException, __pyx_k_TokenizerNotRegisteredException, sizeof(__pyx_k_TokenizerNotRegisteredException), 0, 1, 0, 1},
  {&__pyx_n_s_TokenizerPrefixException, __pyx_k_TokenizerPrefixException, sizeof(__pyx_k_TokenizerPrefixException), 0, 0, 1, 1},
  {&__pyx_n_u_TokenizerPrefixException, __pyx_k_TokenizerPrefixException, sizeof(__pyx_k_TokenizerPrefixException), 0, 1, 0, 1},
  {&__pyx_n_s_Type, __pyx_k_Type, sizeof(__pyx_k_Type), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 1, 0, 0},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_kp_u_Unable_to_derive_correct_union_f, __pyx_k_Unable_to_derive_correct_union_f, sizeof(__pyx_k_Unable_to_derive_correct_union_f), 0, 1, 0, 0},
  {&__pyx_kp_u_Union_contains_a_value_of_type, __pyx_k_Union_contains_a_value_of_type, sizeof(__pyx_k_Union_contains_a_value_of_type), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_n_s__23, __pyx_k__23, sizeof(__pyx_k__23), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_u_batchId, __pyx_k_batchId, sizeof(__pyx_k_batchId), 0, 1, 0, 1},
  {&__pyx_n_s_builtins, __pyx_k_builtins, sizeof(__pyx_k_builtins), 0, 0, 1, 1},
  {&__pyx_n_s_builtins_2, __pyx_k_builtins_2, sizeof(__pyx_k_builtins_2), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_collections_abc, __pyx_k_collections_abc, sizeof(__pyx_k_collections_abc), 0, 0, 1, 1},
  {&__pyx_n_u_columnNames, __pyx_k_columnNames, sizeof(__pyx_k_columnNames), 0, 1, 0, 1},
  {&__pyx_n_u_columnToTable, __pyx_k_columnToTable, sizeof(__pyx_k_columnToTable), 0, 1, 0, 1},
  {&__pyx_n_u_columnTypes, __pyx_k_columnTypes, sizeof(__pyx_k_columnTypes), 0, 1, 0, 1},
  {&__pyx_n_u_contexts, __pyx_k_contexts, sizeof(__pyx_k_contexts), 0, 1, 0, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_u_dbId, __pyx_k_dbId, sizeof(__pyx_k_dbId), 0, 1, 0, 1},
  {&__pyx_n_u_description, __pyx_k_description, sizeof(__pyx_k_description), 0, 1, 0, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_u_fbthrift, __pyx_k_fbthrift, sizeof(__pyx_k_fbthrift), 0, 1, 0, 1},
  {&__pyx_n_s_fbthrift_iobuf, __pyx_k_fbthrift_iobuf, sizeof(__pyx_k_fbthrift_iobuf), 0, 0, 1, 1},
  {&__pyx_n_s_feedCompleteSuccess, __pyx_k_feedCompleteSuccess, sizeof(__pyx_k_feedCompleteSuccess), 0, 0, 1, 1},
  {&__pyx_n_u_feedFatalException, __pyx_k_feedFatalException, sizeof(__pyx_k_feedFatalException), 0, 1, 0, 1},
  {&__pyx_n_s_feedParseFailure, __pyx_k_feedParseFailure, sizeof(__pyx_k_feedParseFailure), 0, 0, 1, 1},
  {&__pyx_n_s_feedPartialSuccess, __pyx_k_feedPartialSuccess, sizeof(__pyx_k_feedPartialSuccess), 0, 0, 1, 1},
  {&__pyx_n_u_feedResult, __pyx_k_feedResult, sizeof(__pyx_k_feedResult), 0, 1, 0, 1},
  {&__pyx_n_s_feedTimeoutFailure, __pyx_k_feedTimeoutFailure, sizeof(__pyx_k_feedTimeoutFailure), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_folly_iobuf, __pyx_k_folly_iobuf, sizeof(__pyx_k_folly_iobuf), 0, 0, 1, 1},
  {&__pyx_n_u_foreignKeys, __pyx_k_foreignKeys, sizeof(__pyx_k_foreignKeys), 0, 1, 0, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_fromValue, __pyx_k_fromValue, sizeof(__pyx_k_fromValue), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_all_names, __pyx_k_get_all_names, sizeof(__pyx_k_get_all_names), 0, 0, 1, 1},
  {&__pyx_n_s_get_metadata, __pyx_k_get_metadata, sizeof(__pyx_k_get_metadata), 0, 0, 1, 1},
  {&__pyx_n_s_get_reflection, __pyx_k_get_reflection, sizeof(__pyx_k_get_reflection), 0, 0, 1, 1},
  {&__pyx_n_s_get_thrift_name, __pyx_k_get_thrift_name, sizeof(__pyx_k_get_thrift_name), 0, 0, 1, 1},
  {&__pyx_n_s_getattribute, __pyx_k_getattribute, sizeof(__pyx_k_getattribute), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_hash, __pyx_k_hash, sizeof(__pyx_k_hash), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_u_input, __pyx_k_input, sizeof(__pyx_k_input), 0, 1, 0, 1},
  {&__pyx_kp_u_is_not_in_list, __pyx_k_is_not_in_list, sizeof(__pyx_k_is_not_in_list), 0, 1, 0, 0},
  {&__pyx_kp_u_is_not_of_type_BatchFeedResult, __pyx_k_is_not_of_type_BatchFeedResult, sizeof(__pyx_k_is_not_of_type_BatchFeedResult), 0, 1, 0, 0},
  {&__pyx_kp_u_is_not_of_type_ColumnType, __pyx_k_is_not_of_type_ColumnType, sizeof(__pyx_k_is_not_of_type_ColumnType), 0, 1, 0, 0},
  {&__pyx_kp_u_is_not_of_type_int, __pyx_k_is_not_of_type_int, sizeof(__pyx_k_is_not_of_type_int), 0, 1, 0, 0},
  {&__pyx_kp_u_is_not_of_type_str, __pyx_k_is_not_of_type_str, sizeof(__pyx_k_is_not_of_type_str), 0, 1, 0, 0},
  {&__pyx_n_s_item, __pyx_k_item, sizeof(__pyx_k_item), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_u_leftover, __pyx_k_leftover, sizeof(__pyx_k_leftover), 0, 1, 0, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_u_message, __pyx_k_message, sizeof(__pyx_k_message), 0, 1, 0, 1},
  {&__pyx_n_s_meta, __pyx_k_meta, sizeof(__pyx_k_meta), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_modeException, __pyx_k_modeException, sizeof(__pyx_k_modeException), 0, 0, 1, 1},
  {&__pyx_n_u_mro, __pyx_k_mro, sizeof(__pyx_k_mro), 0, 1, 0, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_kp_u_not_feedCompleteSuccess, __pyx_k_not_feedCompleteSuccess, sizeof(__pyx_k_not_feedCompleteSuccess), 0, 1, 0, 0},
  {&__pyx_kp_u_not_feedParseFailure, __pyx_k_not_feedParseFailure, sizeof(__pyx_k_not_feedParseFailure), 0, 1, 0, 0},
  {&__pyx_kp_u_not_feedPartialSuccess, __pyx_k_not_feedPartialSuccess, sizeof(__pyx_k_not_feedPartialSuccess), 0, 1, 0, 0},
  {&__pyx_kp_u_not_feedTimeoutFailure, __pyx_k_not_feedTimeoutFailure, sizeof(__pyx_k_not_feedTimeoutFailure), 0, 1, 0, 0},
  {&__pyx_kp_u_not_modeException, __pyx_k_not_modeException, sizeof(__pyx_k_not_modeException), 0, 1, 0, 0},
  {&__pyx_kp_u_not_tokenizerNotRegisteredExcep, __pyx_k_not_tokenizerNotRegisteredExcep, sizeof(__pyx_k_not_tokenizerNotRegisteredExcep), 0, 1, 0, 0},
  {&__pyx_kp_u_not_tokenizerPrefixException, __pyx_k_not_tokenizerPrefixException, sizeof(__pyx_k_not_tokenizerPrefixException), 0, 1, 0, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_kp_u_picard_BatchFeedResult, __pyx_k_picard_BatchFeedResult, sizeof(__pyx_k_picard_BatchFeedResult), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_ColumnType, __pyx_k_picard_ColumnType, sizeof(__pyx_k_picard_ColumnType), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_FeedCompleteSuccess, __pyx_k_picard_FeedCompleteSuccess, sizeof(__pyx_k_picard_FeedCompleteSuccess), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_FeedException, __pyx_k_picard_FeedException, sizeof(__pyx_k_picard_FeedException), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_FeedFatalException, __pyx_k_picard_FeedFatalException, sizeof(__pyx_k_picard_FeedFatalException), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_FeedParseFailure, __pyx_k_picard_FeedParseFailure, sizeof(__pyx_k_picard_FeedParseFailure), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_FeedPartialSuccess, __pyx_k_picard_FeedPartialSuccess, sizeof(__pyx_k_picard_FeedPartialSuccess), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_FeedResult, __pyx_k_picard_FeedResult, sizeof(__pyx_k_picard_FeedResult), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_FeedTimeoutFailure, __pyx_k_picard_FeedTimeoutFailure, sizeof(__pyx_k_picard_FeedTimeoutFailure), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_Mode, __pyx_k_picard_Mode, sizeof(__pyx_k_picard_Mode), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_ModeException, __pyx_k_picard_ModeException, sizeof(__pyx_k_picard_ModeException), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_RegisterSQLSchemaExceptio, __pyx_k_picard_RegisterSQLSchemaExceptio, sizeof(__pyx_k_picard_RegisterSQLSchemaExceptio), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_RegisterTokenizerExceptio, __pyx_k_picard_RegisterTokenizerExceptio, sizeof(__pyx_k_picard_RegisterTokenizerExceptio), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_SQLSchema, __pyx_k_picard_SQLSchema, sizeof(__pyx_k_picard_SQLSchema), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_TokenizerNotRegisteredExc, __pyx_k_picard_TokenizerNotRegisteredExc, sizeof(__pyx_k_picard_TokenizerNotRegisteredExc), 0, 1, 0, 0},
  {&__pyx_kp_u_picard_TokenizerPrefixException, __pyx_k_picard_TokenizerPrefixException, sizeof(__pyx_k_picard_TokenizerPrefixException), 0, 1, 0, 0},
  {&__pyx_n_s_picard_types, __pyx_k_picard_types, sizeof(__pyx_k_picard_types), 0, 0, 1, 1},
  {&__pyx_kp_s_picard_types_pyx, __pyx_k_picard_types_pyx, sizeof(__pyx_k_picard_types_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_u_primaryKeys, __pyx_k_primaryKeys, sizeof(__pyx_k_primaryKeys), 0, 1, 0, 1},
  {&__pyx_n_s_py3, __pyx_k_py3, sizeof(__pyx_k_py3), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_register, __pyx_k_register, sizeof(__pyx_k_register), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_u_tableNames, __pyx_k_tableNames, sizeof(__pyx_k_tableNames), 0, 1, 0, 1},
  {&__pyx_n_u_tableToColumns, __pyx_k_tableToColumns, sizeof(__pyx_k_tableToColumns), 0, 1, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_thrift, __pyx_k_thrift, sizeof(__pyx_k_thrift), 0, 0, 1, 1},
  {&__pyx_n_s_thrift_py3_types, __pyx_k_thrift_py3_types, sizeof(__pyx_k_thrift_py3_types), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_tokenizerNotRegisteredException, __pyx_k_tokenizerNotRegisteredException, sizeof(__pyx_k_tokenizerNotRegisteredException), 0, 0, 1, 1},
  {&__pyx_n_s_tokenizerPrefixException, __pyx_k_tokenizerPrefixException, sizeof(__pyx_k_tokenizerPrefixException), 0, 0, 1, 1},
  {&__pyx_n_u_topToken, __pyx_k_topToken, sizeof(__pyx_k_topToken), 0, 1, 0, 1},
  {&__pyx_n_s_types, __pyx_k_types, sizeof(__pyx_k_types), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_weakref, __pyx_k_weakref, sizeof(__pyx_k_weakref), 0, 0, 1, 1},
  {&__pyx_n_s_weakref_2, __pyx_k_weakref_2, sizeof(__pyx_k_weakref_2), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 88, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 77, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 785, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 798, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 1880, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 1896, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(5, 148, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(5, 151, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(5, 404, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(5, 613, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(5, 832, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "picard/types.pyx":798
 *         if tokenizerNotRegisteredException is not None:
 *             if any_set:
 *                 raise TypeError("At most one field may be set when initializing a union")             # <<<<<<<<<<<<<<
 *             deref(c_inst).set_tokenizerNotRegisteredException(deref((<TokenizerNotRegisteredException?> tokenizerNotRegisteredException)._cpp_obj))
 *             any_set = True
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_At_most_one_field_may_be_set_whe); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "picard/types.pyx":1706
 *             for item in items:
 *                 if item is None:
 *                     raise TypeError("None is not of the type _typing.Sequence[int]")             # <<<<<<<<<<<<<<
 *                 if not isinstance(item, List__i64):
 *                     item = List__i64(item)
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_None_is_not_of_the_type__typing); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 1706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "picard/types.pyx":2135
 *                     raise TypeError(f"{key!r} is not of type str")
 *                 if item is None:
 *                     raise TypeError("None is not of type _typing.Sequence[str]")             # <<<<<<<<<<<<<<
 *                 if not isinstance(item, List__string):
 *                     item = List__string(item)
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_None_is_not_of_type__typing_Sequ); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 2135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(5, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(5, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(5, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(5, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(5, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "View.MemoryView":418
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(5, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "View.MemoryView":495
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(5, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "View.MemoryView":520
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(5, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "View.MemoryView":570
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(5, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "View.MemoryView":577
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__16 = PyTuple_New(1); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(5, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__16, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "View.MemoryView":682
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
  __pyx_slice__19 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__19)) __PYX_ERR(5, 682, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__19);
  __Pyx_GIVEREF(__pyx_slice__19);

  /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(5, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(5, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "picard/types.pyx":89
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         EnumMetadata[cColumnType].gen(meta)
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 89, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 89, __pyx_L1_error)

  /* "picard/types.pyx":95
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.ColumnType"
 * 
 */
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 95, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 95, __pyx_L1_error)

  /* "picard/types.pyx":131
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         EnumMetadata[cMode].gen(meta)
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 131, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 131, __pyx_L1_error)

  /* "picard/types.pyx":137
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.Mode"
 * 
 */
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 137, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 137, __pyx_L1_error)

  /* "picard/types.pyx":318
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__SQLSchema()
 * 
 */
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 318, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 318, __pyx_L1_error)

  /* "picard/types.pyx":322
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cSQLSchema].gen(meta)
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 322, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 322, __pyx_L1_error)

  /* "picard/types.pyx":328
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.SQLSchema"
 * 
 */
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 328, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 328, __pyx_L1_error)

  /* "picard/types.pyx":403
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__RegisterSQLSchemaException()
 * 
 */
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 403, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 403, __pyx_L1_error)

  /* "picard/types.pyx":407
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cRegisterSQLSchemaException].gen(meta)
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 407, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) __PYX_ERR(0, 407, __pyx_L1_error)

  /* "picard/types.pyx":413
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.RegisterSQLSchemaException"
 * 
 */
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 413, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 413, __pyx_L1_error)

  /* "picard/types.pyx":470
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__RegisterTokenizerException()
 * 
 */
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 470, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 470, __pyx_L1_error)

  /* "picard/types.pyx":474
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cRegisterTokenizerException].gen(meta)
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__39, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 474, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 474, __pyx_L1_error)

  /* "picard/types.pyx":480
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.RegisterTokenizerException"
 * 
 */
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 480, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 480, __pyx_L1_error)

  /* "picard/types.pyx":546
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__TokenizerNotRegisteredException()
 * 
 */
  __pyx_codeobj__42 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 546, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__42)) __PYX_ERR(0, 546, __pyx_L1_error)

  /* "picard/types.pyx":550
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cTokenizerNotRegisteredException].gen(meta)
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);
  __pyx_codeobj__44 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__43, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 550, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__44)) __PYX_ERR(0, 550, __pyx_L1_error)

  /* "picard/types.pyx":556
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.TokenizerNotRegisteredException"
 * 
 */
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 556, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(0, 556, __pyx_L1_error)

  /* "picard/types.pyx":634
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__TokenizerPrefixException()
 * 
 */
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 634, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(0, 634, __pyx_L1_error)

  /* "picard/types.pyx":638
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cTokenizerPrefixException].gen(meta)
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 638, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(0, 638, __pyx_L1_error)

  /* "picard/types.pyx":644
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.TokenizerPrefixException"
 * 
 */
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 644, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 644, __pyx_L1_error)

  /* "picard/types.pyx":722
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__ModeException()
 * 
 */
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 722, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(0, 722, __pyx_L1_error)

  /* "picard/types.pyx":726
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cModeException].gen(meta)
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 726, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(0, 726, __pyx_L1_error)

  /* "picard/types.pyx":732
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.ModeException"
 * 
 */
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 732, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 732, __pyx_L1_error)

  /* "picard/types.pyx":776
 * 
 *     @staticmethod
 *     def fromValue(value):             # <<<<<<<<<<<<<<
 *         if value is None:
 *             return FeedFatalException()
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_n_s_value); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_fromValue, 776, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 776, __pyx_L1_error)

  /* "picard/types.pyx":871
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedFatalException()
 * 
 */
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 871, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(0, 871, __pyx_L1_error)

  /* "picard/types.pyx":875
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedFatalException].gen(meta)
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 875, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(0, 875, __pyx_L1_error)

  /* "picard/types.pyx":881
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedFatalException"
 * 
 */
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 881, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 881, __pyx_L1_error)

  /* "picard/types.pyx":954
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedException()
 * 
 */
  __pyx_codeobj__60 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 954, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__60)) __PYX_ERR(0, 954, __pyx_L1_error)

  /* "picard/types.pyx":958
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cFeedException].gen(meta)
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__62 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 958, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__62)) __PYX_ERR(0, 958, __pyx_L1_error)

  /* "picard/types.pyx":964
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedException"
 * 
 */
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 964, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 964, __pyx_L1_error)

  /* "picard/types.pyx":1044
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedParseFailure()
 * 
 */
  __pyx_codeobj__64 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 1044, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__64)) __PYX_ERR(0, 1044, __pyx_L1_error)

  /* "picard/types.pyx":1048
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedParseFailure].gen(meta)
 */
  __pyx_tuple__65 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__66 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 1048, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__66)) __PYX_ERR(0, 1048, __pyx_L1_error)

  /* "picard/types.pyx":1054
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedParseFailure"
 * 
 */
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 1054, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 1054, __pyx_L1_error)

  /* "picard/types.pyx":1132
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedTimeoutFailure()
 * 
 */
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 1132, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 1132, __pyx_L1_error)

  /* "picard/types.pyx":1136
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedTimeoutFailure].gen(meta)
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__70 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 1136, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__70)) __PYX_ERR(0, 1136, __pyx_L1_error)

  /* "picard/types.pyx":1142
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedTimeoutFailure"
 * 
 */
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 1142, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 1142, __pyx_L1_error)

  /* "picard/types.pyx":1207
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedPartialSuccess()
 * 
 */
  __pyx_codeobj__72 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 1207, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__72)) __PYX_ERR(0, 1207, __pyx_L1_error)

  /* "picard/types.pyx":1211
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedPartialSuccess].gen(meta)
 */
  __pyx_tuple__73 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 1211, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 1211, __pyx_L1_error)

  /* "picard/types.pyx":1217
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedPartialSuccess"
 * 
 */
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 1217, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 1217, __pyx_L1_error)

  /* "picard/types.pyx":1295
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedCompleteSuccess()
 * 
 */
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 1295, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(0, 1295, __pyx_L1_error)

  /* "picard/types.pyx":1299
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedCompleteSuccess].gen(meta)
 */
  __pyx_tuple__77 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__78 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 1299, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__78)) __PYX_ERR(0, 1299, __pyx_L1_error)

  /* "picard/types.pyx":1305
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedCompleteSuccess"
 * 
 */
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 1305, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 1305, __pyx_L1_error)

  /* "picard/types.pyx":1351
 * 
 *     @staticmethod
 *     def fromValue(value):             # <<<<<<<<<<<<<<
 *         if value is None:
 *             return FeedResult()
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_n_s_value); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_fromValue, 1351, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 1351, __pyx_L1_error)

  /* "picard/types.pyx":1462
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedResult()
 * 
 */
  __pyx_codeobj__82 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 1462, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__82)) __PYX_ERR(0, 1462, __pyx_L1_error)

  /* "picard/types.pyx":1466
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedResult].gen(meta)
 */
  __pyx_tuple__83 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 1466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__84 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 1466, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__84)) __PYX_ERR(0, 1466, __pyx_L1_error)

  /* "picard/types.pyx":1472
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedResult"
 * 
 */
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 1472, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 1472, __pyx_L1_error)

  /* "picard/types.pyx":1566
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__BatchFeedResult()
 * 
 */
  __pyx_codeobj__86 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 1566, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__86)) __PYX_ERR(0, 1566, __pyx_L1_error)

  /* "picard/types.pyx":1570
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cBatchFeedResult].gen(meta)
 */
  __pyx_tuple__87 = PyTuple_Pack(1, __pyx_n_s_meta); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 1570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__88 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_metadata, 1570, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__88)) __PYX_ERR(0, 1570, __pyx_L1_error)

  /* "picard/types.pyx":1576
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.BatchFeedResult"
 * 
 */
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_thrift_name, 1576, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 1576, __pyx_L1_error)

  /* "picard/types.pyx":1671
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__i64()
 * 
 */
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 1671, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 1671, __pyx_L1_error)

  /* "picard/types.pyx":1754
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__List__i64()
 * 
 */
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 1754, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(0, 1754, __pyx_L1_error)

  /* "picard/types.pyx":1831
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__BatchFeedResult()
 * 
 */
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 1831, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 1831, __pyx_L1_error)

  /* "picard/types.pyx":1927
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__Map__string_string()
 * 
 */
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 1927, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 1927, __pyx_L1_error)

  /* "picard/types.pyx":2022
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__Map__string_ColumnType()
 * 
 */
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 2022, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 2022, __pyx_L1_error)

  /* "picard/types.pyx":2098
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__string()
 * 
 */
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 2098, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 2098, __pyx_L1_error)

  /* "picard/types.pyx":2196
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__Map__string_List__string()
 * 
 */
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_picard_types_pyx, __pyx_n_s_get_reflection, 2196, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 2196, __pyx_L1_error)

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__97 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(5, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__98 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(5, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__99 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(5, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__100 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(5, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__101 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(5, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__102 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PySlice_Type_indices.type = (PyObject*)&PySlice_Type;
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_6picard_5types___ColumnType_enum_data = ((struct __pyx_obj_6thrift_3py3_5types_EnumData *)Py_None); Py_INCREF(Py_None);
  __pyx_v_6picard_5types___Mode_enum_data = ((struct __pyx_obj_6thrift_3py3_5types_EnumData *)Py_None); Py_INCREF(Py_None);
  __pyx_v_6picard_5types___FeedFatalException_union_type_enum_data = ((struct __pyx_obj_6thrift_3py3_5types_UnionTypeEnumData *)Py_None); Py_INCREF(Py_None);
  __pyx_v_6picard_5types___FeedResult_union_type_enum_data = ((struct __pyx_obj_6thrift_3py3_5types_UnionTypeEnumData *)Py_None); Py_INCREF(Py_None);
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("thrift.py3.types"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6thrift_3py3_5types_CompiledEnum = __Pyx_ImportType(__pyx_t_1, "thrift.py3.types", "CompiledEnum", sizeof(struct __pyx_obj_6thrift_3py3_5types_CompiledEnum), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types_CompiledEnum) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_5types_CompiledEnum = (struct __pyx_vtabstruct_6thrift_3py3_5types_CompiledEnum*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_5types_CompiledEnum->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_5types_CompiledEnum)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6picard_5types_ColumnType = &__pyx_vtable_6picard_5types_ColumnType;
  __pyx_vtable_6picard_5types_ColumnType.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_CompiledEnum;
  __pyx_vtable_6picard_5types_ColumnType.__pyx_base.get_by_name = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_CompiledEnum *, PyObject *))__pyx_f_6picard_5types_10ColumnType_get_by_name;
  __pyx_type_6picard_5types_ColumnType.tp_base = __pyx_ptype_6thrift_3py3_5types_CompiledEnum;
  if (PyType_Ready(&__pyx_type_6picard_5types_ColumnType) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_ColumnType.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_ColumnType.tp_dictoffset && __pyx_type_6picard_5types_ColumnType.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_ColumnType.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_ColumnType.tp_dict, __pyx_vtabptr_6picard_5types_ColumnType) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ColumnType, (PyObject *)&__pyx_type_6picard_5types_ColumnType) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  if (__pyx_type_6picard_5types_ColumnType.tp_weaklistoffset == 0) __pyx_type_6picard_5types_ColumnType.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_ColumnType, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_ColumnType = &__pyx_type_6picard_5types_ColumnType;
  __pyx_vtabptr_6picard_5types_Mode = &__pyx_vtable_6picard_5types_Mode;
  __pyx_vtable_6picard_5types_Mode.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_CompiledEnum;
  __pyx_vtable_6picard_5types_Mode.__pyx_base.get_by_name = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_CompiledEnum *, PyObject *))__pyx_f_6picard_5types_4Mode_get_by_name;
  __pyx_type_6picard_5types_Mode.tp_base = __pyx_ptype_6thrift_3py3_5types_CompiledEnum;
  if (PyType_Ready(&__pyx_type_6picard_5types_Mode) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_Mode.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_Mode.tp_dictoffset && __pyx_type_6picard_5types_Mode.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_Mode.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_Mode.tp_dict, __pyx_vtabptr_6picard_5types_Mode) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Mode, (PyObject *)&__pyx_type_6picard_5types_Mode) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  if (__pyx_type_6picard_5types_Mode.tp_weaklistoffset == 0) __pyx_type_6picard_5types_Mode.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_Mode, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_Mode = &__pyx_type_6picard_5types_Mode;
  __pyx_ptype_6thrift_3py3_5types_Struct = __Pyx_ImportType(__pyx_t_1, "thrift.py3.types", "Struct", sizeof(struct __pyx_obj_6thrift_3py3_5types_Struct), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types_Struct) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_5types_Struct = (struct __pyx_vtabstruct_6thrift_3py3_5types_Struct*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_5types_Struct->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_5types_Struct)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6picard_5types_SQLSchema = &__pyx_vtable_6picard_5types_SQLSchema;
  __pyx_vtable_6picard_5types_SQLSchema.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_Struct;
  __pyx_vtable_6picard_5types_SQLSchema.__pyx_base._serialize = (struct __pyx_obj_5folly_5iobuf_IOBuf *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_9SQLSchema__serialize;
  __pyx_vtable_6picard_5types_SQLSchema.__pyx_base._deserialize = (uint32_t (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, folly::IOBuf const *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_9SQLSchema__deserialize;
  __pyx_vtable_6picard_5types_SQLSchema.__pyx_base._fbthrift_isset = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *))__pyx_f_6picard_5types_9SQLSchema__fbthrift_isset;
  __pyx_vtable_6picard_5types_SQLSchema.__pyx_base._fbthrift_set_field = (void (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, PyObject *, PyObject *))__pyx_f_6picard_5types_9SQLSchema__fbthrift_set_field;
  __pyx_vtable_6picard_5types_SQLSchema.__pyx_base._fbthrift_get_field_name_by_index = (std::string_view (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, size_t))__pyx_f_6picard_5types_9SQLSchema__fbthrift_get_field_name_by_index;
  __pyx_vtable_6picard_5types_SQLSchema.create = (PyObject *(*)(std::shared_ptr<::cpp2::SQLSchema> ))__pyx_f_6picard_5types_9SQLSchema_create;
  __pyx_type_6picard_5types_SQLSchema.tp_base = __pyx_ptype_6thrift_3py3_5types_Struct;
  if (PyType_Ready(&__pyx_type_6picard_5types_SQLSchema) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_SQLSchema.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_SQLSchema.tp_dictoffset && __pyx_type_6picard_5types_SQLSchema.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_SQLSchema.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_SQLSchema.tp_dict, __pyx_vtabptr_6picard_5types_SQLSchema) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SQLSchema, (PyObject *)&__pyx_type_6picard_5types_SQLSchema) < 0) __PYX_ERR(0, 214, __pyx_L1_error)
  if (__pyx_type_6picard_5types_SQLSchema.tp_weaklistoffset == 0) __pyx_type_6picard_5types_SQLSchema.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_SQLSchema, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_SQLSchema = &__pyx_type_6picard_5types_SQLSchema;
  __pyx_t_2 = PyImport_ImportModule("thrift.py3.exceptions"); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError = __Pyx_ImportType(__pyx_t_2, "thrift.py3.exceptions", "GeneratedError", sizeof(struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_10exceptions_GeneratedError = (struct __pyx_vtabstruct_6thrift_3py3_10exceptions_GeneratedError*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_10exceptions_GeneratedError->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_10exceptions_GeneratedError)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6picard_5types_RegisterSQLSchemaException = &__pyx_vtable_6picard_5types_RegisterSQLSchemaException;
  __pyx_vtable_6picard_5types_RegisterSQLSchemaException.__pyx_base = *__pyx_vtabptr_6thrift_3py3_10exceptions_GeneratedError;
  __pyx_vtable_6picard_5types_RegisterSQLSchemaException.__pyx_base._fbthrift_isset = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *))__pyx_f_6picard_5types_26RegisterSQLSchemaException__fbthrift_isset;
  __pyx_vtable_6picard_5types_RegisterSQLSchemaException.__pyx_base._fbthrift_set_field = (void (*)(struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *, PyObject *, PyObject *))__pyx_f_6picard_5types_26RegisterSQLSchemaException__fbthrift_set_field;
  __pyx_vtable_6picard_5types_RegisterSQLSchemaException.__pyx_base._fbthrift_get_field_name_by_index = (std::string_view (*)(struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *, size_t))__pyx_f_6picard_5types_26RegisterSQLSchemaException__fbthrift_get_field_name_by_index;
  __pyx_vtable_6picard_5types_RegisterSQLSchemaException.create = (PyObject *(*)(std::shared_ptr<::cpp2::RegisterSQLSchemaException> ))__pyx_f_6picard_5types_26RegisterSQLSchemaException_create;
  __pyx_type_6picard_5types_RegisterSQLSchemaException.tp_base = __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError;
  if (PyType_Ready(&__pyx_type_6picard_5types_RegisterSQLSchemaException) < 0) __PYX_ERR(0, 352, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_RegisterSQLSchemaException.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_RegisterSQLSchemaException.tp_dictoffset && __pyx_type_6picard_5types_RegisterSQLSchemaException.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_RegisterSQLSchemaException.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_RegisterSQLSchemaException.tp_dict, __pyx_vtabptr_6picard_5types_RegisterSQLSchemaException) < 0) __PYX_ERR(0, 352, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RegisterSQLSchemaException, (PyObject *)&__pyx_type_6picard_5types_RegisterSQLSchemaException) < 0) __PYX_ERR(0, 352, __pyx_L1_error)
  if (__pyx_type_6picard_5types_RegisterSQLSchemaException.tp_weaklistoffset == 0) __pyx_type_6picard_5types_RegisterSQLSchemaException.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_RegisterSQLSchemaException, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_RegisterSQLSchemaException = &__pyx_type_6picard_5types_RegisterSQLSchemaException;
  __pyx_vtabptr_6picard_5types_RegisterTokenizerException = &__pyx_vtable_6picard_5types_RegisterTokenizerException;
  __pyx_vtable_6picard_5types_RegisterTokenizerException.__pyx_base = *__pyx_vtabptr_6thrift_3py3_10exceptions_GeneratedError;
  __pyx_vtable_6picard_5types_RegisterTokenizerException.__pyx_base._fbthrift_isset = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *))__pyx_f_6picard_5types_26RegisterTokenizerException__fbthrift_isset;
  __pyx_vtable_6picard_5types_RegisterTokenizerException.__pyx_base._fbthrift_set_field = (void (*)(struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *, PyObject *, PyObject *))__pyx_f_6picard_5types_26RegisterTokenizerException__fbthrift_set_field;
  __pyx_vtable_6picard_5types_RegisterTokenizerException.__pyx_base._fbthrift_get_field_name_by_index = (std::string_view (*)(struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *, size_t))__pyx_f_6picard_5types_26RegisterTokenizerException__fbthrift_get_field_name_by_index;
  __pyx_vtable_6picard_5types_RegisterTokenizerException.create = (PyObject *(*)(std::shared_ptr<::cpp2::RegisterTokenizerException> ))__pyx_f_6picard_5types_26RegisterTokenizerException_create;
  __pyx_type_6picard_5types_RegisterTokenizerException.tp_base = __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError;
  if (PyType_Ready(&__pyx_type_6picard_5types_RegisterTokenizerException) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_RegisterTokenizerException.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_RegisterTokenizerException.tp_dictoffset && __pyx_type_6picard_5types_RegisterTokenizerException.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_RegisterTokenizerException.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_RegisterTokenizerException.tp_dict, __pyx_vtabptr_6picard_5types_RegisterTokenizerException) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RegisterTokenizerException, (PyObject *)&__pyx_type_6picard_5types_RegisterTokenizerException) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  if (__pyx_type_6picard_5types_RegisterTokenizerException.tp_weaklistoffset == 0) __pyx_type_6picard_5types_RegisterTokenizerException.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_RegisterTokenizerException, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_RegisterTokenizerException = &__pyx_type_6picard_5types_RegisterTokenizerException;
  __pyx_vtabptr_6picard_5types_TokenizerNotRegisteredException = &__pyx_vtable_6picard_5types_TokenizerNotRegisteredException;
  __pyx_vtable_6picard_5types_TokenizerNotRegisteredException.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_Struct;
  __pyx_vtable_6picard_5types_TokenizerNotRegisteredException.__pyx_base._serialize = (struct __pyx_obj_5folly_5iobuf_IOBuf *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_31TokenizerNotRegisteredException__serialize;
  __pyx_vtable_6picard_5types_TokenizerNotRegisteredException.__pyx_base._deserialize = (uint32_t (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, folly::IOBuf const *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_31TokenizerNotRegisteredException__deserialize;
  __pyx_vtable_6picard_5types_TokenizerNotRegisteredException.__pyx_base._fbthrift_isset = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *))__pyx_f_6picard_5types_31TokenizerNotRegisteredException__fbthrift_isset;
  __pyx_vtable_6picard_5types_TokenizerNotRegisteredException.__pyx_base._fbthrift_set_field = (void (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, PyObject *, PyObject *))__pyx_f_6picard_5types_31TokenizerNotRegisteredException__fbthrift_set_field;
  __pyx_vtable_6picard_5types_TokenizerNotRegisteredException.__pyx_base._fbthrift_get_field_name_by_index = (std::string_view (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, size_t))__pyx_f_6picard_5types_31TokenizerNotRegisteredException__fbthrift_get_field_name_by_index;
  __pyx_vtable_6picard_5types_TokenizerNotRegisteredException.create = (PyObject *(*)(std::shared_ptr<::cpp2::TokenizerNotRegisteredException> ))__pyx_f_6picard_5types_31TokenizerNotRegisteredException_create;
  __pyx_type_6picard_5types_TokenizerNotRegisteredException.tp_base = __pyx_ptype_6thrift_3py3_5types_Struct;
  if (PyType_Ready(&__pyx_type_6picard_5types_TokenizerNotRegisteredException) < 0) __PYX_ERR(0, 492, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_TokenizerNotRegisteredException.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_TokenizerNotRegisteredException.tp_dictoffset && __pyx_type_6picard_5types_TokenizerNotRegisteredException.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_TokenizerNotRegisteredException.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_TokenizerNotRegisteredException.tp_dict, __pyx_vtabptr_6picard_5types_TokenizerNotRegisteredException) < 0) __PYX_ERR(0, 492, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TokenizerNotRegisteredException, (PyObject *)&__pyx_type_6picard_5types_TokenizerNotRegisteredException) < 0) __PYX_ERR(0, 492, __pyx_L1_error)
  if (__pyx_type_6picard_5types_TokenizerNotRegisteredException.tp_weaklistoffset == 0) __pyx_type_6picard_5types_TokenizerNotRegisteredException.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_TokenizerNotRegisteredException = &__pyx_type_6picard_5types_TokenizerNotRegisteredException;
  __pyx_vtabptr_6picard_5types_TokenizerPrefixException = &__pyx_vtable_6picard_5types_TokenizerPrefixException;
  __pyx_vtable_6picard_5types_TokenizerPrefixException.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_Struct;
  __pyx_vtable_6picard_5types_TokenizerPrefixException.__pyx_base._serialize = (struct __pyx_obj_5folly_5iobuf_IOBuf *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_24TokenizerPrefixException__serialize;
  __pyx_vtable_6picard_5types_TokenizerPrefixException.__pyx_base._deserialize = (uint32_t (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, folly::IOBuf const *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_24TokenizerPrefixException__deserialize;
  __pyx_vtable_6picard_5types_TokenizerPrefixException.__pyx_base._fbthrift_isset = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *))__pyx_f_6picard_5types_24TokenizerPrefixException__fbthrift_isset;
  __pyx_vtable_6picard_5types_TokenizerPrefixException.__pyx_base._fbthrift_set_field = (void (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, PyObject *, PyObject *))__pyx_f_6picard_5types_24TokenizerPrefixException__fbthrift_set_field;
  __pyx_vtable_6picard_5types_TokenizerPrefixException.__pyx_base._fbthrift_get_field_name_by_index = (std::string_view (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, size_t))__pyx_f_6picard_5types_24TokenizerPrefixException__fbthrift_get_field_name_by_index;
  __pyx_vtable_6picard_5types_TokenizerPrefixException.create = (PyObject *(*)(std::shared_ptr<::cpp2::TokenizerPrefixException> ))__pyx_f_6picard_5types_24TokenizerPrefixException_create;
  __pyx_type_6picard_5types_TokenizerPrefixException.tp_base = __pyx_ptype_6thrift_3py3_5types_Struct;
  if (PyType_Ready(&__pyx_type_6picard_5types_TokenizerPrefixException) < 0) __PYX_ERR(0, 580, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_TokenizerPrefixException.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_TokenizerPrefixException.tp_dictoffset && __pyx_type_6picard_5types_TokenizerPrefixException.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_TokenizerPrefixException.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_TokenizerPrefixException.tp_dict, __pyx_vtabptr_6picard_5types_TokenizerPrefixException) < 0) __PYX_ERR(0, 580, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_TokenizerPrefixException, (PyObject *)&__pyx_type_6picard_5types_TokenizerPrefixException) < 0) __PYX_ERR(0, 580, __pyx_L1_error)
  if (__pyx_type_6picard_5types_TokenizerPrefixException.tp_weaklistoffset == 0) __pyx_type_6picard_5types_TokenizerPrefixException.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_TokenizerPrefixException, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_TokenizerPrefixException = &__pyx_type_6picard_5types_TokenizerPrefixException;
  __pyx_vtabptr_6picard_5types_ModeException = &__pyx_vtable_6picard_5types_ModeException;
  __pyx_vtable_6picard_5types_ModeException.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_Struct;
  __pyx_vtable_6picard_5types_ModeException.__pyx_base._serialize = (struct __pyx_obj_5folly_5iobuf_IOBuf *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_13ModeException__serialize;
  __pyx_vtable_6picard_5types_ModeException.__pyx_base._deserialize = (uint32_t (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, folly::IOBuf const *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_13ModeException__deserialize;
  __pyx_vtable_6picard_5types_ModeException.__pyx_base._fbthrift_isset = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *))__pyx_f_6picard_5types_13ModeException__fbthrift_isset;
  __pyx_vtable_6picard_5types_ModeException.__pyx_base._fbthrift_set_field = (void (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, PyObject *, PyObject *))__pyx_f_6picard_5types_13ModeException__fbthrift_set_field;
  __pyx_vtable_6picard_5types_ModeException.__pyx_base._fbthrift_get_field_name_by_index = (std::string_view (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, size_t))__pyx_f_6picard_5types_13ModeException__fbthrift_get_field_name_by_index;
  __pyx_vtable_6picard_5types_ModeException.create = (PyObject *(*)(std::shared_ptr<::cpp2::ModeException> ))__pyx_f_6picard_5types_13ModeException_create;
  __pyx_type_6picard_5types_ModeException.tp_base = __pyx_ptype_6thrift_3py3_5types_Struct;
  if (PyType_Ready(&__pyx_type_6picard_5types_ModeException) < 0) __PYX_ERR(0, 668, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_ModeException.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_ModeException.tp_dictoffset && __pyx_type_6picard_5types_ModeException.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_ModeException.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_ModeException.tp_dict, __pyx_vtabptr_6picard_5types_ModeException) < 0) __PYX_ERR(0, 668, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ModeException, (PyObject *)&__pyx_type_6picard_5types_ModeException) < 0) __PYX_ERR(0, 668, __pyx_L1_error)
  if (__pyx_type_6picard_5types_ModeException.tp_weaklistoffset == 0) __pyx_type_6picard_5types_ModeException.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_ModeException, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_ModeException = &__pyx_type_6picard_5types_ModeException;
  __pyx_vtabptr_6picard_5types___FeedFatalExceptionType = &__pyx_vtable_6picard_5types___FeedFatalExceptionType;
  __pyx_vtable_6picard_5types___FeedFatalExceptionType.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_CompiledEnum;
  __pyx_vtable_6picard_5types___FeedFatalExceptionType.__pyx_base.get_by_name = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_CompiledEnum *, PyObject *))__pyx_f_6picard_5types_24__FeedFatalExceptionType_get_by_name;
  __pyx_type_6picard_5types___FeedFatalExceptionType.tp_base = __pyx_ptype_6thrift_3py3_5types_CompiledEnum;
  if (PyType_Ready(&__pyx_type_6picard_5types___FeedFatalExceptionType) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___FeedFatalExceptionType.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___FeedFatalExceptionType.tp_dictoffset && __pyx_type_6picard_5types___FeedFatalExceptionType.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___FeedFatalExceptionType.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types___FeedFatalExceptionType.tp_dict, __pyx_vtabptr_6picard_5types___FeedFatalExceptionType) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FeedFatalExceptionType, (PyObject *)&__pyx_type_6picard_5types___FeedFatalExceptionType) < 0) __PYX_ERR(0, 171, __pyx_L1_error)
  if (__pyx_type_6picard_5types___FeedFatalExceptionType.tp_weaklistoffset == 0) __pyx_type_6picard_5types___FeedFatalExceptionType.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types___FeedFatalExceptionType, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types___FeedFatalExceptionType = &__pyx_type_6picard_5types___FeedFatalExceptionType;
  __pyx_ptype_6thrift_3py3_5types_Union = __Pyx_ImportType(__pyx_t_1, "thrift.py3.types", "Union", sizeof(struct __pyx_obj_6thrift_3py3_5types_Union), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types_Union) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_5types_Union = (struct __pyx_vtabstruct_6thrift_3py3_5types_Union*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_5types_Union->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_5types_Union)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6picard_5types_FeedFatalException = &__pyx_vtable_6picard_5types_FeedFatalException;
  __pyx_vtable_6picard_5types_FeedFatalException.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_Union;
  __pyx_vtable_6picard_5types_FeedFatalException.__pyx_base.__pyx_base._serialize = (struct __pyx_obj_5folly_5iobuf_IOBuf *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_18FeedFatalException__serialize;
  __pyx_vtable_6picard_5types_FeedFatalException.__pyx_base.__pyx_base._deserialize = (uint32_t (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, folly::IOBuf const *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_18FeedFatalException__deserialize;
  __pyx_vtable_6picard_5types_FeedFatalException.__pyx_base.__pyx_base._fbthrift_get_field_name_by_index = (std::string_view (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, size_t))__pyx_f_6picard_5types_18FeedFatalException__fbthrift_get_field_name_by_index;
  __pyx_vtable_6picard_5types_FeedFatalException._load_cache = (PyObject *(*)(struct __pyx_obj_6picard_5types_FeedFatalException *))__pyx_f_6picard_5types_18FeedFatalException__load_cache;
  __pyx_vtable_6picard_5types_FeedFatalException._make_instance = (std::unique_ptr<::cpp2::FeedFatalException>  (*)(::cpp2::FeedFatalException *, struct __pyx_obj_6picard_5types_TokenizerNotRegisteredException *, struct __pyx_obj_6picard_5types_TokenizerPrefixException *, struct __pyx_obj_6picard_5types_ModeException *))__pyx_f_6picard_5types_18FeedFatalException__make_instance;
  __pyx_vtable_6picard_5types_FeedFatalException.create = (PyObject *(*)(std::shared_ptr<::cpp2::FeedFatalException> ))__pyx_f_6picard_5types_18FeedFatalException_create;
  __pyx_type_6picard_5types_FeedFatalException.tp_base = __pyx_ptype_6thrift_3py3_5types_Union;
  if (PyType_Ready(&__pyx_type_6picard_5types_FeedFatalException) < 0) __PYX_ERR(0, 758, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_FeedFatalException.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_FeedFatalException.tp_dictoffset && __pyx_type_6picard_5types_FeedFatalException.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_FeedFatalException.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_FeedFatalException.tp_dict, __pyx_vtabptr_6picard_5types_FeedFatalException) < 0) __PYX_ERR(0, 758, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FeedFatalException, (PyObject *)&__pyx_type_6picard_5types_FeedFatalException) < 0) __PYX_ERR(0, 758, __pyx_L1_error)
  if (__pyx_type_6picard_5types_FeedFatalException.tp_weaklistoffset == 0) __pyx_type_6picard_5types_FeedFatalException.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_FeedFatalException, __pyx_base.__pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_FeedFatalException = &__pyx_type_6picard_5types_FeedFatalException;
  __pyx_vtabptr_6picard_5types_FeedException = &__pyx_vtable_6picard_5types_FeedException;
  __pyx_vtable_6picard_5types_FeedException.__pyx_base = *__pyx_vtabptr_6thrift_3py3_10exceptions_GeneratedError;
  __pyx_vtable_6picard_5types_FeedException.__pyx_base._fbthrift_isset = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *))__pyx_f_6picard_5types_13FeedException__fbthrift_isset;
  __pyx_vtable_6picard_5types_FeedException.__pyx_base._fbthrift_set_field = (void (*)(struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *, PyObject *, PyObject *))__pyx_f_6picard_5types_13FeedException__fbthrift_set_field;
  __pyx_vtable_6picard_5types_FeedException.__pyx_base._fbthrift_get_field_name_by_index = (std::string_view (*)(struct __pyx_obj_6thrift_3py3_10exceptions_GeneratedError *, size_t))__pyx_f_6picard_5types_13FeedException__fbthrift_get_field_name_by_index;
  __pyx_vtable_6picard_5types_FeedException.create = (PyObject *(*)(std::shared_ptr<::cpp2::FeedException> ))__pyx_f_6picard_5types_13FeedException_create;
  __pyx_type_6picard_5types_FeedException.tp_base = __pyx_ptype_6thrift_3py3_10exceptions_GeneratedError;
  if (PyType_Ready(&__pyx_type_6picard_5types_FeedException) < 0) __PYX_ERR(0, 907, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_FeedException.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_FeedException.tp_dictoffset && __pyx_type_6picard_5types_FeedException.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_FeedException.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_FeedException.tp_dict, __pyx_vtabptr_6picard_5types_FeedException) < 0) __PYX_ERR(0, 907, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FeedException, (PyObject *)&__pyx_type_6picard_5types_FeedException) < 0) __PYX_ERR(0, 907, __pyx_L1_error)
  if (__pyx_type_6picard_5types_FeedException.tp_weaklistoffset == 0) __pyx_type_6picard_5types_FeedException.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_FeedException, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_FeedException = &__pyx_type_6picard_5types_FeedException;
  __pyx_vtabptr_6picard_5types_FeedParseFailure = &__pyx_vtable_6picard_5types_FeedParseFailure;
  __pyx_vtable_6picard_5types_FeedParseFailure.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_Struct;
  __pyx_vtable_6picard_5types_FeedParseFailure.__pyx_base._serialize = (struct __pyx_obj_5folly_5iobuf_IOBuf *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_16FeedParseFailure__serialize;
  __pyx_vtable_6picard_5types_FeedParseFailure.__pyx_base._deserialize = (uint32_t (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, folly::IOBuf const *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_16FeedParseFailure__deserialize;
  __pyx_vtable_6picard_5types_FeedParseFailure.__pyx_base._fbthrift_isset = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *))__pyx_f_6picard_5types_16FeedParseFailure__fbthrift_isset;
  __pyx_vtable_6picard_5types_FeedParseFailure.__pyx_base._fbthrift_set_field = (void (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, PyObject *, PyObject *))__pyx_f_6picard_5types_16FeedParseFailure__fbthrift_set_field;
  __pyx_vtable_6picard_5types_FeedParseFailure.__pyx_base._fbthrift_get_field_name_by_index = (std::string_view (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, size_t))__pyx_f_6picard_5types_16FeedParseFailure__fbthrift_get_field_name_by_index;
  __pyx_vtable_6picard_5types_FeedParseFailure.create = (PyObject *(*)(std::shared_ptr<::cpp2::FeedParseFailure> ))__pyx_f_6picard_5types_16FeedParseFailure_create;
  __pyx_type_6picard_5types_FeedParseFailure.tp_base = __pyx_ptype_6thrift_3py3_5types_Struct;
  if (PyType_Ready(&__pyx_type_6picard_5types_FeedParseFailure) < 0) __PYX_ERR(0, 976, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_FeedParseFailure.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_FeedParseFailure.tp_dictoffset && __pyx_type_6picard_5types_FeedParseFailure.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_FeedParseFailure.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_FeedParseFailure.tp_dict, __pyx_vtabptr_6picard_5types_FeedParseFailure) < 0) __PYX_ERR(0, 976, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FeedParseFailure, (PyObject *)&__pyx_type_6picard_5types_FeedParseFailure) < 0) __PYX_ERR(0, 976, __pyx_L1_error)
  if (__pyx_type_6picard_5types_FeedParseFailure.tp_weaklistoffset == 0) __pyx_type_6picard_5types_FeedParseFailure.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_FeedParseFailure, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_FeedParseFailure = &__pyx_type_6picard_5types_FeedParseFailure;
  __pyx_vtabptr_6picard_5types_FeedTimeoutFailure = &__pyx_vtable_6picard_5types_FeedTimeoutFailure;
  __pyx_vtable_6picard_5types_FeedTimeoutFailure.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_Struct;
  __pyx_vtable_6picard_5types_FeedTimeoutFailure.__pyx_base._serialize = (struct __pyx_obj_5folly_5iobuf_IOBuf *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_18FeedTimeoutFailure__serialize;
  __pyx_vtable_6picard_5types_FeedTimeoutFailure.__pyx_base._deserialize = (uint32_t (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, folly::IOBuf const *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_18FeedTimeoutFailure__deserialize;
  __pyx_vtable_6picard_5types_FeedTimeoutFailure.__pyx_base._fbthrift_isset = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *))__pyx_f_6picard_5types_18FeedTimeoutFailure__fbthrift_isset;
  __pyx_vtable_6picard_5types_FeedTimeoutFailure.__pyx_base._fbthrift_set_field = (void (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, PyObject *, PyObject *))__pyx_f_6picard_5types_18FeedTimeoutFailure__fbthrift_set_field;
  __pyx_vtable_6picard_5types_FeedTimeoutFailure.__pyx_base._fbthrift_get_field_name_by_index = (std::string_view (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, size_t))__pyx_f_6picard_5types_18FeedTimeoutFailure__fbthrift_get_field_name_by_index;
  __pyx_vtable_6picard_5types_FeedTimeoutFailure.create = (PyObject *(*)(std::shared_ptr<::cpp2::FeedTimeoutFailure> ))__pyx_f_6picard_5types_18FeedTimeoutFailure_create;
  __pyx_type_6picard_5types_FeedTimeoutFailure.tp_base = __pyx_ptype_6thrift_3py3_5types_Struct;
  if (PyType_Ready(&__pyx_type_6picard_5types_FeedTimeoutFailure) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_FeedTimeoutFailure.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_FeedTimeoutFailure.tp_dictoffset && __pyx_type_6picard_5types_FeedTimeoutFailure.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_FeedTimeoutFailure.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_FeedTimeoutFailure.tp_dict, __pyx_vtabptr_6picard_5types_FeedTimeoutFailure) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FeedTimeoutFailure, (PyObject *)&__pyx_type_6picard_5types_FeedTimeoutFailure) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  if (__pyx_type_6picard_5types_FeedTimeoutFailure.tp_weaklistoffset == 0) __pyx_type_6picard_5types_FeedTimeoutFailure.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_FeedTimeoutFailure, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_FeedTimeoutFailure = &__pyx_type_6picard_5types_FeedTimeoutFailure;
  __pyx_vtabptr_6picard_5types_FeedPartialSuccess = &__pyx_vtable_6picard_5types_FeedPartialSuccess;
  __pyx_vtable_6picard_5types_FeedPartialSuccess.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_Struct;
  __pyx_vtable_6picard_5types_FeedPartialSuccess.__pyx_base._serialize = (struct __pyx_obj_5folly_5iobuf_IOBuf *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_18FeedPartialSuccess__serialize;
  __pyx_vtable_6picard_5types_FeedPartialSuccess.__pyx_base._deserialize = (uint32_t (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, folly::IOBuf const *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_18FeedPartialSuccess__deserialize;
  __pyx_vtable_6picard_5types_FeedPartialSuccess.__pyx_base._fbthrift_isset = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *))__pyx_f_6picard_5types_18FeedPartialSuccess__fbthrift_isset;
  __pyx_vtable_6picard_5types_FeedPartialSuccess.__pyx_base._fbthrift_set_field = (void (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, PyObject *, PyObject *))__pyx_f_6picard_5types_18FeedPartialSuccess__fbthrift_set_field;
  __pyx_vtable_6picard_5types_FeedPartialSuccess.__pyx_base._fbthrift_get_field_name_by_index = (std::string_view (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, size_t))__pyx_f_6picard_5types_18FeedPartialSuccess__fbthrift_get_field_name_by_index;
  __pyx_vtable_6picard_5types_FeedPartialSuccess.create = (PyObject *(*)(std::shared_ptr<::cpp2::FeedPartialSuccess> ))__pyx_f_6picard_5types_18FeedPartialSuccess_create;
  __pyx_type_6picard_5types_FeedPartialSuccess.tp_base = __pyx_ptype_6thrift_3py3_5types_Struct;
  if (PyType_Ready(&__pyx_type_6picard_5types_FeedPartialSuccess) < 0) __PYX_ERR(0, 1166, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_FeedPartialSuccess.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_FeedPartialSuccess.tp_dictoffset && __pyx_type_6picard_5types_FeedPartialSuccess.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_FeedPartialSuccess.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_FeedPartialSuccess.tp_dict, __pyx_vtabptr_6picard_5types_FeedPartialSuccess) < 0) __PYX_ERR(0, 1166, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FeedPartialSuccess, (PyObject *)&__pyx_type_6picard_5types_FeedPartialSuccess) < 0) __PYX_ERR(0, 1166, __pyx_L1_error)
  if (__pyx_type_6picard_5types_FeedPartialSuccess.tp_weaklistoffset == 0) __pyx_type_6picard_5types_FeedPartialSuccess.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_FeedPartialSuccess, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_FeedPartialSuccess = &__pyx_type_6picard_5types_FeedPartialSuccess;
  __pyx_vtabptr_6picard_5types_FeedCompleteSuccess = &__pyx_vtable_6picard_5types_FeedCompleteSuccess;
  __pyx_vtable_6picard_5types_FeedCompleteSuccess.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_Struct;
  __pyx_vtable_6picard_5types_FeedCompleteSuccess.__pyx_base._serialize = (struct __pyx_obj_5folly_5iobuf_IOBuf *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_19FeedCompleteSuccess__serialize;
  __pyx_vtable_6picard_5types_FeedCompleteSuccess.__pyx_base._deserialize = (uint32_t (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, folly::IOBuf const *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_19FeedCompleteSuccess__deserialize;
  __pyx_vtable_6picard_5types_FeedCompleteSuccess.__pyx_base._fbthrift_isset = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *))__pyx_f_6picard_5types_19FeedCompleteSuccess__fbthrift_isset;
  __pyx_vtable_6picard_5types_FeedCompleteSuccess.__pyx_base._fbthrift_set_field = (void (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, PyObject *, PyObject *))__pyx_f_6picard_5types_19FeedCompleteSuccess__fbthrift_set_field;
  __pyx_vtable_6picard_5types_FeedCompleteSuccess.__pyx_base._fbthrift_get_field_name_by_index = (std::string_view (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, size_t))__pyx_f_6picard_5types_19FeedCompleteSuccess__fbthrift_get_field_name_by_index;
  __pyx_vtable_6picard_5types_FeedCompleteSuccess.create = (PyObject *(*)(std::shared_ptr<::cpp2::FeedCompleteSuccess> ))__pyx_f_6picard_5types_19FeedCompleteSuccess_create;
  __pyx_type_6picard_5types_FeedCompleteSuccess.tp_base = __pyx_ptype_6thrift_3py3_5types_Struct;
  if (PyType_Ready(&__pyx_type_6picard_5types_FeedCompleteSuccess) < 0) __PYX_ERR(0, 1241, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_FeedCompleteSuccess.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_FeedCompleteSuccess.tp_dictoffset && __pyx_type_6picard_5types_FeedCompleteSuccess.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_FeedCompleteSuccess.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_FeedCompleteSuccess.tp_dict, __pyx_vtabptr_6picard_5types_FeedCompleteSuccess) < 0) __PYX_ERR(0, 1241, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FeedCompleteSuccess, (PyObject *)&__pyx_type_6picard_5types_FeedCompleteSuccess) < 0) __PYX_ERR(0, 1241, __pyx_L1_error)
  if (__pyx_type_6picard_5types_FeedCompleteSuccess.tp_weaklistoffset == 0) __pyx_type_6picard_5types_FeedCompleteSuccess.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_FeedCompleteSuccess, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_FeedCompleteSuccess = &__pyx_type_6picard_5types_FeedCompleteSuccess;
  __pyx_vtabptr_6picard_5types___FeedResultType = &__pyx_vtable_6picard_5types___FeedResultType;
  __pyx_vtable_6picard_5types___FeedResultType.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_CompiledEnum;
  __pyx_vtable_6picard_5types___FeedResultType.__pyx_base.get_by_name = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_CompiledEnum *, PyObject *))__pyx_f_6picard_5types_16__FeedResultType_get_by_name;
  __pyx_type_6picard_5types___FeedResultType.tp_base = __pyx_ptype_6thrift_3py3_5types_CompiledEnum;
  if (PyType_Ready(&__pyx_type_6picard_5types___FeedResultType) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___FeedResultType.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___FeedResultType.tp_dictoffset && __pyx_type_6picard_5types___FeedResultType.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___FeedResultType.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types___FeedResultType.tp_dict, __pyx_vtabptr_6picard_5types___FeedResultType) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FeedResultType, (PyObject *)&__pyx_type_6picard_5types___FeedResultType) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  if (__pyx_type_6picard_5types___FeedResultType.tp_weaklistoffset == 0) __pyx_type_6picard_5types___FeedResultType.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types___FeedResultType, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types___FeedResultType = &__pyx_type_6picard_5types___FeedResultType;
  __pyx_vtabptr_6picard_5types_FeedResult = &__pyx_vtable_6picard_5types_FeedResult;
  __pyx_vtable_6picard_5types_FeedResult.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_Union;
  __pyx_vtable_6picard_5types_FeedResult.__pyx_base.__pyx_base._serialize = (struct __pyx_obj_5folly_5iobuf_IOBuf *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_10FeedResult__serialize;
  __pyx_vtable_6picard_5types_FeedResult.__pyx_base.__pyx_base._deserialize = (uint32_t (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, folly::IOBuf const *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_10FeedResult__deserialize;
  __pyx_vtable_6picard_5types_FeedResult.__pyx_base.__pyx_base._fbthrift_get_field_name_by_index = (std::string_view (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, size_t))__pyx_f_6picard_5types_10FeedResult__fbthrift_get_field_name_by_index;
  __pyx_vtable_6picard_5types_FeedResult._load_cache = (PyObject *(*)(struct __pyx_obj_6picard_5types_FeedResult *))__pyx_f_6picard_5types_10FeedResult__load_cache;
  __pyx_vtable_6picard_5types_FeedResult._make_instance = (std::unique_ptr<::cpp2::FeedResult>  (*)(::cpp2::FeedResult *, struct __pyx_obj_6picard_5types_FeedParseFailure *, struct __pyx_obj_6picard_5types_FeedTimeoutFailure *, struct __pyx_obj_6picard_5types_FeedPartialSuccess *, struct __pyx_obj_6picard_5types_FeedCompleteSuccess *))__pyx_f_6picard_5types_10FeedResult__make_instance;
  __pyx_vtable_6picard_5types_FeedResult.create = (PyObject *(*)(std::shared_ptr<::cpp2::FeedResult> ))__pyx_f_6picard_5types_10FeedResult_create;
  __pyx_type_6picard_5types_FeedResult.tp_base = __pyx_ptype_6thrift_3py3_5types_Union;
  if (PyType_Ready(&__pyx_type_6picard_5types_FeedResult) < 0) __PYX_ERR(0, 1331, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_FeedResult.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_FeedResult.tp_dictoffset && __pyx_type_6picard_5types_FeedResult.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_FeedResult.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_FeedResult.tp_dict, __pyx_vtabptr_6picard_5types_FeedResult) < 0) __PYX_ERR(0, 1331, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FeedResult, (PyObject *)&__pyx_type_6picard_5types_FeedResult) < 0) __PYX_ERR(0, 1331, __pyx_L1_error)
  if (__pyx_type_6picard_5types_FeedResult.tp_weaklistoffset == 0) __pyx_type_6picard_5types_FeedResult.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_FeedResult, __pyx_base.__pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_FeedResult = &__pyx_type_6picard_5types_FeedResult;
  __pyx_vtabptr_6picard_5types_BatchFeedResult = &__pyx_vtable_6picard_5types_BatchFeedResult;
  __pyx_vtable_6picard_5types_BatchFeedResult.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_Struct;
  __pyx_vtable_6picard_5types_BatchFeedResult.__pyx_base._serialize = (struct __pyx_obj_5folly_5iobuf_IOBuf *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_15BatchFeedResult__serialize;
  __pyx_vtable_6picard_5types_BatchFeedResult.__pyx_base._deserialize = (uint32_t (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, folly::IOBuf const *, enum apache::thrift::protocol::PROTOCOL_TYPES))__pyx_f_6picard_5types_15BatchFeedResult__deserialize;
  __pyx_vtable_6picard_5types_BatchFeedResult.__pyx_base._fbthrift_isset = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_Struct *))__pyx_f_6picard_5types_15BatchFeedResult__fbthrift_isset;
  __pyx_vtable_6picard_5types_BatchFeedResult.__pyx_base._fbthrift_set_field = (void (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, PyObject *, PyObject *))__pyx_f_6picard_5types_15BatchFeedResult__fbthrift_set_field;
  __pyx_vtable_6picard_5types_BatchFeedResult.__pyx_base._fbthrift_get_field_name_by_index = (std::string_view (*)(struct __pyx_obj_6thrift_3py3_5types_Struct *, size_t))__pyx_f_6picard_5types_15BatchFeedResult__fbthrift_get_field_name_by_index;
  __pyx_vtable_6picard_5types_BatchFeedResult.create = (PyObject *(*)(std::shared_ptr<::cpp2::BatchFeedResult> ))__pyx_f_6picard_5types_15BatchFeedResult_create;
  __pyx_type_6picard_5types_BatchFeedResult.tp_base = __pyx_ptype_6thrift_3py3_5types_Struct;
  if (PyType_Ready(&__pyx_type_6picard_5types_BatchFeedResult) < 0) __PYX_ERR(0, 1498, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_BatchFeedResult.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_BatchFeedResult.tp_dictoffset && __pyx_type_6picard_5types_BatchFeedResult.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_BatchFeedResult.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_BatchFeedResult.tp_dict, __pyx_vtabptr_6picard_5types_BatchFeedResult) < 0) __PYX_ERR(0, 1498, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BatchFeedResult, (PyObject *)&__pyx_type_6picard_5types_BatchFeedResult) < 0) __PYX_ERR(0, 1498, __pyx_L1_error)
  if (__pyx_type_6picard_5types_BatchFeedResult.tp_weaklistoffset == 0) __pyx_type_6picard_5types_BatchFeedResult.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_BatchFeedResult, __pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_BatchFeedResult = &__pyx_type_6picard_5types_BatchFeedResult;
  __pyx_ptype_6thrift_3py3_5types_List = __Pyx_ImportType(__pyx_t_1, "thrift.py3.types", "List", sizeof(struct __pyx_obj_6thrift_3py3_5types_List), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types_List) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_5types_List = (struct __pyx_vtabstruct_6thrift_3py3_5types_List*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_5types_List->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_5types_List)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6picard_5types_List__i64 = &__pyx_vtable_6picard_5types_List__i64;
  __pyx_vtable_6picard_5types_List__i64.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_List;
  __pyx_vtable_6picard_5types_List__i64.__pyx_base._get_slice = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_List *, PyObject *))__pyx_f_6picard_5types_9List__i64__get_slice;
  __pyx_vtable_6picard_5types_List__i64.__pyx_base._get_single_item = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_List *, size_t))__pyx_f_6picard_5types_9List__i64__get_single_item;
  __pyx_vtable_6picard_5types_List__i64.__pyx_base._check_item_type = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_List *, PyObject *))__pyx_f_6picard_5types_9List__i64__check_item_type;
  __pyx_vtable_6picard_5types_List__i64.create = (PyObject *(*)(std::shared_ptr<std::vector<int64_t> > ))__pyx_f_6picard_5types_9List__i64_create;
  __pyx_vtable_6picard_5types_List__i64._make_instance = (std::shared_ptr<std::vector<int64_t> >  (*)(PyObject *))__pyx_f_6picard_5types_9List__i64__make_instance;
  __pyx_type_6picard_5types_List__i64.tp_base = __pyx_ptype_6thrift_3py3_5types_List;
  if (PyType_Ready(&__pyx_type_6picard_5types_List__i64) < 0) __PYX_ERR(0, 1600, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_List__i64.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_List__i64.tp_dictoffset && __pyx_type_6picard_5types_List__i64.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_List__i64.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_List__i64.tp_dict, __pyx_vtabptr_6picard_5types_List__i64) < 0) __PYX_ERR(0, 1600, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_List__i64, (PyObject *)&__pyx_type_6picard_5types_List__i64) < 0) __PYX_ERR(0, 1600, __pyx_L1_error)
  if (__pyx_type_6picard_5types_List__i64.tp_weaklistoffset == 0) __pyx_type_6picard_5types_List__i64.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_List__i64, __pyx_base.__pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_List__i64 = &__pyx_type_6picard_5types_List__i64;
  __pyx_vtabptr_6picard_5types_List__List__i64 = &__pyx_vtable_6picard_5types_List__List__i64;
  __pyx_vtable_6picard_5types_List__List__i64.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_List;
  __pyx_vtable_6picard_5types_List__List__i64.__pyx_base._get_slice = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_List *, PyObject *))__pyx_f_6picard_5types_15List__List__i64__get_slice;
  __pyx_vtable_6picard_5types_List__List__i64.__pyx_base._get_single_item = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_List *, size_t))__pyx_f_6picard_5types_15List__List__i64__get_single_item;
  __pyx_vtable_6picard_5types_List__List__i64.__pyx_base._check_item_type = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_List *, PyObject *))__pyx_f_6picard_5types_15List__List__i64__check_item_type;
  __pyx_vtable_6picard_5types_List__List__i64.create = (PyObject *(*)(std::shared_ptr<std::vector<std::vector<int64_t> > > ))__pyx_f_6picard_5types_15List__List__i64_create;
  __pyx_vtable_6picard_5types_List__List__i64._make_instance = (std::shared_ptr<std::vector<std::vector<int64_t> > >  (*)(PyObject *))__pyx_f_6picard_5types_15List__List__i64__make_instance;
  __pyx_type_6picard_5types_List__List__i64.tp_base = __pyx_ptype_6thrift_3py3_5types_List;
  if (PyType_Ready(&__pyx_type_6picard_5types_List__List__i64) < 0) __PYX_ERR(0, 1678, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_List__List__i64.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_List__List__i64.tp_dictoffset && __pyx_type_6picard_5types_List__List__i64.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_List__List__i64.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_List__List__i64.tp_dict, __pyx_vtabptr_6picard_5types_List__List__i64) < 0) __PYX_ERR(0, 1678, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_List__List__i64, (PyObject *)&__pyx_type_6picard_5types_List__List__i64) < 0) __PYX_ERR(0, 1678, __pyx_L1_error)
  if (__pyx_type_6picard_5types_List__List__i64.tp_weaklistoffset == 0) __pyx_type_6picard_5types_List__List__i64.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_List__List__i64, __pyx_base.__pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_List__List__i64 = &__pyx_type_6picard_5types_List__List__i64;
  __pyx_vtabptr_6picard_5types_List__BatchFeedResult = &__pyx_vtable_6picard_5types_List__BatchFeedResult;
  __pyx_vtable_6picard_5types_List__BatchFeedResult.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_List;
  __pyx_vtable_6picard_5types_List__BatchFeedResult.__pyx_base._get_slice = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_List *, PyObject *))__pyx_f_6picard_5types_21List__BatchFeedResult__get_slice;
  __pyx_vtable_6picard_5types_List__BatchFeedResult.__pyx_base._get_single_item = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_List *, size_t))__pyx_f_6picard_5types_21List__BatchFeedResult__get_single_item;
  __pyx_vtable_6picard_5types_List__BatchFeedResult.__pyx_base._check_item_type = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_List *, PyObject *))__pyx_f_6picard_5types_21List__BatchFeedResult__check_item_type;
  __pyx_vtable_6picard_5types_List__BatchFeedResult.create = (PyObject *(*)(std::shared_ptr<std::vector<::cpp2::BatchFeedResult> > ))__pyx_f_6picard_5types_21List__BatchFeedResult_create;
  __pyx_vtable_6picard_5types_List__BatchFeedResult._make_instance = (std::shared_ptr<std::vector<::cpp2::BatchFeedResult> >  (*)(PyObject *))__pyx_f_6picard_5types_21List__BatchFeedResult__make_instance;
  __pyx_type_6picard_5types_List__BatchFeedResult.tp_base = __pyx_ptype_6thrift_3py3_5types_List;
  if (PyType_Ready(&__pyx_type_6picard_5types_List__BatchFeedResult) < 0) __PYX_ERR(0, 1761, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_List__BatchFeedResult.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_List__BatchFeedResult.tp_dictoffset && __pyx_type_6picard_5types_List__BatchFeedResult.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_List__BatchFeedResult.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_List__BatchFeedResult.tp_dict, __pyx_vtabptr_6picard_5types_List__BatchFeedResult) < 0) __PYX_ERR(0, 1761, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_List__BatchFeedResult, (PyObject *)&__pyx_type_6picard_5types_List__BatchFeedResult) < 0) __PYX_ERR(0, 1761, __pyx_L1_error)
  if (__pyx_type_6picard_5types_List__BatchFeedResult.tp_weaklistoffset == 0) __pyx_type_6picard_5types_List__BatchFeedResult.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_List__BatchFeedResult, __pyx_base.__pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_List__BatchFeedResult = &__pyx_type_6picard_5types_List__BatchFeedResult;
  __pyx_ptype_6thrift_3py3_5types_Map = __Pyx_ImportType(__pyx_t_1, "thrift.py3.types", "Map", sizeof(struct __pyx_obj_6thrift_3py3_5types_Map), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types_Map) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_5types_Map = (struct __pyx_vtabstruct_6thrift_3py3_5types_Map*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_5types_Map->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_5types_Map)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_6picard_5types_Map__string_string = &__pyx_vtable_6picard_5types_Map__string_string;
  __pyx_vtable_6picard_5types_Map__string_string.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_Map;
  __pyx_vtable_6picard_5types_Map__string_string.__pyx_base._check_key_type = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_Map *, PyObject *))__pyx_f_6picard_5types_18Map__string_string__check_key_type;
  __pyx_vtable_6picard_5types_Map__string_string.create = (PyObject *(*)(std::shared_ptr<std::map<std::string,std::string> > ))__pyx_f_6picard_5types_18Map__string_string_create;
  __pyx_vtable_6picard_5types_Map__string_string._make_instance = (std::shared_ptr<std::map<std::string,std::string> >  (*)(PyObject *))__pyx_f_6picard_5types_18Map__string_string__make_instance;
  __pyx_type_6picard_5types_Map__string_string.tp_base = __pyx_ptype_6thrift_3py3_5types_Map;
  if (PyType_Ready(&__pyx_type_6picard_5types_Map__string_string) < 0) __PYX_ERR(0, 1838, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_Map__string_string.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_Map__string_string.tp_dictoffset && __pyx_type_6picard_5types_Map__string_string.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_Map__string_string.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_Map__string_string.tp_dict, __pyx_vtabptr_6picard_5types_Map__string_string) < 0) __PYX_ERR(0, 1838, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Map__string_string, (PyObject *)&__pyx_type_6picard_5types_Map__string_string) < 0) __PYX_ERR(0, 1838, __pyx_L1_error)
  if (__pyx_type_6picard_5types_Map__string_string.tp_weaklistoffset == 0) __pyx_type_6picard_5types_Map__string_string.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_Map__string_string, __pyx_base.__pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_Map__string_string = &__pyx_type_6picard_5types_Map__string_string;
  __pyx_vtabptr_6picard_5types_Map__string_ColumnType = &__pyx_vtable_6picard_5types_Map__string_ColumnType;
  __pyx_vtable_6picard_5types_Map__string_ColumnType.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_Map;
  __pyx_vtable_6picard_5types_Map__string_ColumnType.__pyx_base._check_key_type = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_Map *, PyObject *))__pyx_f_6picard_5types_22Map__string_ColumnType__check_key_type;
  __pyx_vtable_6picard_5types_Map__string_ColumnType.create = (PyObject *(*)(std::shared_ptr<std::map<std::string,::cpp2::ColumnType> > ))__pyx_f_6picard_5types_22Map__string_ColumnType_create;
  __pyx_vtable_6picard_5types_Map__string_ColumnType._make_instance = (std::shared_ptr<std::map<std::string,::cpp2::ColumnType> >  (*)(PyObject *))__pyx_f_6picard_5types_22Map__string_ColumnType__make_instance;
  __pyx_type_6picard_5types_Map__string_ColumnType.tp_base = __pyx_ptype_6thrift_3py3_5types_Map;
  if (PyType_Ready(&__pyx_type_6picard_5types_Map__string_ColumnType) < 0) __PYX_ERR(0, 1933, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_Map__string_ColumnType.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_Map__string_ColumnType.tp_dictoffset && __pyx_type_6picard_5types_Map__string_ColumnType.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_Map__string_ColumnType.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_Map__string_ColumnType.tp_dict, __pyx_vtabptr_6picard_5types_Map__string_ColumnType) < 0) __PYX_ERR(0, 1933, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Map__string_ColumnType, (PyObject *)&__pyx_type_6picard_5types_Map__string_ColumnType) < 0) __PYX_ERR(0, 1933, __pyx_L1_error)
  if (__pyx_type_6picard_5types_Map__string_ColumnType.tp_weaklistoffset == 0) __pyx_type_6picard_5types_Map__string_ColumnType.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_Map__string_ColumnType, __pyx_base.__pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_Map__string_ColumnType = &__pyx_type_6picard_5types_Map__string_ColumnType;
  __pyx_vtabptr_6picard_5types_List__string = &__pyx_vtable_6picard_5types_List__string;
  __pyx_vtable_6picard_5types_List__string.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_List;
  __pyx_vtable_6picard_5types_List__string.__pyx_base._get_slice = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_List *, PyObject *))__pyx_f_6picard_5types_12List__string__get_slice;
  __pyx_vtable_6picard_5types_List__string.__pyx_base._get_single_item = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_List *, size_t))__pyx_f_6picard_5types_12List__string__get_single_item;
  __pyx_vtable_6picard_5types_List__string.__pyx_base._check_item_type = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_List *, PyObject *))__pyx_f_6picard_5types_12List__string__check_item_type;
  __pyx_vtable_6picard_5types_List__string.create = (PyObject *(*)(std::shared_ptr<std::vector<std::string> > ))__pyx_f_6picard_5types_12List__string_create;
  __pyx_vtable_6picard_5types_List__string._make_instance = (std::shared_ptr<std::vector<std::string> >  (*)(PyObject *))__pyx_f_6picard_5types_12List__string__make_instance;
  __pyx_type_6picard_5types_List__string.tp_base = __pyx_ptype_6thrift_3py3_5types_List;
  if (PyType_Ready(&__pyx_type_6picard_5types_List__string) < 0) __PYX_ERR(0, 2028, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_List__string.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_List__string.tp_dictoffset && __pyx_type_6picard_5types_List__string.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_List__string.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_List__string.tp_dict, __pyx_vtabptr_6picard_5types_List__string) < 0) __PYX_ERR(0, 2028, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_List__string, (PyObject *)&__pyx_type_6picard_5types_List__string) < 0) __PYX_ERR(0, 2028, __pyx_L1_error)
  if (__pyx_type_6picard_5types_List__string.tp_weaklistoffset == 0) __pyx_type_6picard_5types_List__string.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_List__string, __pyx_base.__pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_List__string = &__pyx_type_6picard_5types_List__string;
  __pyx_vtabptr_6picard_5types_Map__string_List__string = &__pyx_vtable_6picard_5types_Map__string_List__string;
  __pyx_vtable_6picard_5types_Map__string_List__string.__pyx_base = *__pyx_vtabptr_6thrift_3py3_5types_Map;
  __pyx_vtable_6picard_5types_Map__string_List__string.__pyx_base._check_key_type = (PyObject *(*)(struct __pyx_obj_6thrift_3py3_5types_Map *, PyObject *))__pyx_f_6picard_5types_24Map__string_List__string__check_key_type;
  __pyx_vtable_6picard_5types_Map__string_List__string.create = (PyObject *(*)(std::shared_ptr<std::map<std::string,std::vector<std::string> > > ))__pyx_f_6picard_5types_24Map__string_List__string_create;
  __pyx_vtable_6picard_5types_Map__string_List__string._make_instance = (std::shared_ptr<std::map<std::string,std::vector<std::string> > >  (*)(PyObject *))__pyx_f_6picard_5types_24Map__string_List__string__make_instance;
  __pyx_type_6picard_5types_Map__string_List__string.tp_base = __pyx_ptype_6thrift_3py3_5types_Map;
  if (PyType_Ready(&__pyx_type_6picard_5types_Map__string_List__string) < 0) __PYX_ERR(0, 2105, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types_Map__string_List__string.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types_Map__string_List__string.tp_dictoffset && __pyx_type_6picard_5types_Map__string_List__string.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types_Map__string_List__string.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_6picard_5types_Map__string_List__string.tp_dict, __pyx_vtabptr_6picard_5types_Map__string_List__string) < 0) __PYX_ERR(0, 2105, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_Map__string_List__string, (PyObject *)&__pyx_type_6picard_5types_Map__string_List__string) < 0) __PYX_ERR(0, 2105, __pyx_L1_error)
  if (__pyx_type_6picard_5types_Map__string_List__string.tp_weaklistoffset == 0) __pyx_type_6picard_5types_Map__string_List__string.tp_weaklistoffset = offsetof(struct __pyx_obj_6picard_5types_Map__string_List__string, __pyx_base.__pyx_base.__weakref__);
  __pyx_ptype_6picard_5types_Map__string_List__string = &__pyx_type_6picard_5types_Map__string_List__string;
  __pyx_ptype_6thrift_3py3_5types_EnumMeta = __Pyx_ImportType(__pyx_t_1, "thrift.py3.types", "EnumMeta", sizeof(struct __pyx_obj_6thrift_3py3_5types_EnumMeta), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types_EnumMeta) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_type_6picard_5types___ColumnTypeMeta.tp_base = __pyx_ptype_6thrift_3py3_5types_EnumMeta;
  if (PyType_Ready(&__pyx_type_6picard_5types___ColumnTypeMeta) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___ColumnTypeMeta.tp_print = 0;
  #endif
  __pyx_ptype_6picard_5types___ColumnTypeMeta = &__pyx_type_6picard_5types___ColumnTypeMeta;
  __pyx_type_6picard_5types___ModeMeta.tp_base = __pyx_ptype_6thrift_3py3_5types_EnumMeta;
  if (PyType_Ready(&__pyx_type_6picard_5types___ModeMeta) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___ModeMeta.tp_print = 0;
  #endif
  __pyx_ptype_6picard_5types___ModeMeta = &__pyx_type_6picard_5types___ModeMeta;
  __pyx_type_6picard_5types___FeedFatalException_Union_TypeMeta.tp_base = __pyx_ptype_6thrift_3py3_5types_EnumMeta;
  if (PyType_Ready(&__pyx_type_6picard_5types___FeedFatalException_Union_TypeMeta) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___FeedFatalException_Union_TypeMeta.tp_print = 0;
  #endif
  __pyx_ptype_6picard_5types___FeedFatalException_Union_TypeMeta = &__pyx_type_6picard_5types___FeedFatalException_Union_TypeMeta;
  __pyx_type_6picard_5types___FeedResult_Union_TypeMeta.tp_base = __pyx_ptype_6thrift_3py3_5types_EnumMeta;
  if (PyType_Ready(&__pyx_type_6picard_5types___FeedResult_Union_TypeMeta) < 0) __PYX_ERR(0, 187, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___FeedResult_Union_TypeMeta.tp_print = 0;
  #endif
  __pyx_ptype_6picard_5types___FeedResult_Union_TypeMeta = &__pyx_type_6picard_5types___FeedResult_Union_TypeMeta;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct__create) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct__create.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct__create.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct__create.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct__create.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct__create = &__pyx_type_6picard_5types___pyx_scope_struct__create;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 371, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct_1_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct_1_genexpr = &__pyx_type_6picard_5types___pyx_scope_struct_1_genexpr;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct_2_create) < 0) __PYX_ERR(0, 440, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct_2_create.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct_2_create.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct_2_create.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct_2_create.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct_2_create = &__pyx_type_6picard_5types___pyx_scope_struct_2_create;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct_3_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct_3_genexpr.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct_3_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct_3_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct_3_genexpr = &__pyx_type_6picard_5types___pyx_scope_struct_3_genexpr;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct_4_create) < 0) __PYX_ERR(0, 922, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct_4_create.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct_4_create.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct_4_create.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct_4_create.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct_4_create = &__pyx_type_6picard_5types___pyx_scope_struct_4_create;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct_5_genexpr) < 0) __PYX_ERR(0, 925, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct_5_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct_5_genexpr.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct_5_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct_5_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct_5_genexpr = &__pyx_type_6picard_5types___pyx_scope_struct_5_genexpr;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct_6___iter__) < 0) __PYX_ERR(0, 1891, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct_6___iter__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct_6___iter__.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct_6___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct_6___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct_6___iter__ = &__pyx_type_6picard_5types___pyx_scope_struct_6___iter__;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct_7_values) < 0) __PYX_ERR(0, 1907, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct_7_values.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct_7_values.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct_7_values.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct_7_values.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct_7_values = &__pyx_type_6picard_5types___pyx_scope_struct_7_values;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct_8_items) < 0) __PYX_ERR(0, 1916, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct_8_items.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct_8_items.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct_8_items.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct_8_items.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct_8_items = &__pyx_type_6picard_5types___pyx_scope_struct_8_items;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct_9___iter__) < 0) __PYX_ERR(0, 1986, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct_9___iter__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct_9___iter__.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct_9___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct_9___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct_9___iter__ = &__pyx_type_6picard_5types___pyx_scope_struct_9___iter__;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct_10_values) < 0) __PYX_ERR(0, 2002, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct_10_values.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct_10_values.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct_10_values.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct_10_values.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct_10_values = &__pyx_type_6picard_5types___pyx_scope_struct_10_values;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct_11_items) < 0) __PYX_ERR(0, 2011, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct_11_items.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct_11_items.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct_11_items.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct_11_items.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct_11_items = &__pyx_type_6picard_5types___pyx_scope_struct_11_items;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct_12___iter__) < 0) __PYX_ERR(0, 2160, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct_12___iter__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct_12___iter__.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct_12___iter__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct_12___iter__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct_12___iter__ = &__pyx_type_6picard_5types___pyx_scope_struct_12___iter__;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct_13_values) < 0) __PYX_ERR(0, 2176, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct_13_values.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct_13_values.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct_13_values.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct_13_values.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct_13_values = &__pyx_type_6picard_5types___pyx_scope_struct_13_values;
  if (PyType_Ready(&__pyx_type_6picard_5types___pyx_scope_struct_14_items) < 0) __PYX_ERR(0, 2185, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type_6picard_5types___pyx_scope_struct_14_items.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_6picard_5types___pyx_scope_struct_14_items.tp_dictoffset && __pyx_type_6picard_5types___pyx_scope_struct_14_items.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_6picard_5types___pyx_scope_struct_14_items.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  __pyx_ptype_6picard_5types___pyx_scope_struct_14_items = &__pyx_type_6picard_5types___pyx_scope_struct_14_items;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(5, 105, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_array.tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(5, 105, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(5, 105, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(5, 279, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(5, 279, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(5, 330, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryview.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(5, 330, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(5, 330, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(5, 965, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(5, 965, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(5, 965, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(7, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(8, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("folly.iobuf"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5folly_5iobuf_IOBuf = __Pyx_ImportType(__pyx_t_1, "folly.iobuf", "IOBuf", sizeof(struct __pyx_obj_5folly_5iobuf_IOBuf), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5folly_5iobuf_IOBuf) __PYX_ERR(9, 57, __pyx_L1_error)
  __pyx_vtabptr_5folly_5iobuf_IOBuf = (struct __pyx_vtabstruct_5folly_5iobuf_IOBuf*)__Pyx_GetVtable(__pyx_ptype_5folly_5iobuf_IOBuf->tp_dict); if (unlikely(!__pyx_vtabptr_5folly_5iobuf_IOBuf)) __PYX_ERR(9, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("thrift.py3.common"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6thrift_3py3_6common_Headers = __Pyx_ImportType(__pyx_t_1, "thrift.py3.common", "Headers", sizeof(struct __pyx_obj_6thrift_3py3_6common_Headers), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_6common_Headers) __PYX_ERR(2, 48, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_6common_Headers = (struct __pyx_vtabstruct_6thrift_3py3_6common_Headers*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_6common_Headers->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_6common_Headers)) __PYX_ERR(2, 48, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_6common_RpcOptions = __Pyx_ImportType(__pyx_t_1, "thrift.py3.common", "RpcOptions", sizeof(struct __pyx_obj_6thrift_3py3_6common_RpcOptions), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_6common_RpcOptions) __PYX_ERR(2, 85, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_6common_ReadHeaders = __Pyx_ImportType(__pyx_t_1, "thrift.py3.common", "ReadHeaders", sizeof(struct __pyx_obj_6thrift_3py3_6common_ReadHeaders), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_6common_ReadHeaders) __PYX_ERR(2, 92, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_6common_ReadHeaders = (struct __pyx_vtabstruct_6thrift_3py3_6common_ReadHeaders*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_6common_ReadHeaders->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_6common_ReadHeaders)) __PYX_ERR(2, 92, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_6common_WriteHeaders = __Pyx_ImportType(__pyx_t_1, "thrift.py3.common", "WriteHeaders", sizeof(struct __pyx_obj_6thrift_3py3_6common_WriteHeaders), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_6common_WriteHeaders) __PYX_ERR(2, 98, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_6common_WriteHeaders = (struct __pyx_vtabstruct_6thrift_3py3_6common_WriteHeaders*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_6common_WriteHeaders->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_6common_WriteHeaders)) __PYX_ERR(2, 98, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_6common_MetadataBox = __Pyx_ImportType(__pyx_t_1, "thrift.py3.common", "MetadataBox", sizeof(struct __pyx_obj_6thrift_3py3_6common_MetadataBox), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_6common_MetadataBox) __PYX_ERR(2, 104, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_6common_MetadataBox = (struct __pyx_vtabstruct_6thrift_3py3_6common_MetadataBox*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_6common_MetadataBox->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_6common_MetadataBox)) __PYX_ERR(2, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_6thrift_3py3_10exceptions_Exception = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "Exception", sizeof(PyBaseExceptionObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10exceptions_Exception) __PYX_ERR(10, 103, __pyx_L1_error)
  __pyx_t_2 = PyImport_ImportModule("thrift.py3.exceptions"); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_6thrift_3py3_10exceptions_Error = __Pyx_ImportType(__pyx_t_2, "thrift.py3.exceptions", "Error", sizeof(struct __pyx_obj_6thrift_3py3_10exceptions_Error), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10exceptions_Error) __PYX_ERR(10, 125, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_10exceptions_LibraryError = __Pyx_ImportType(__pyx_t_2, "thrift.py3.exceptions", "LibraryError", sizeof(struct __pyx_obj_6thrift_3py3_10exceptions_LibraryError), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10exceptions_LibraryError) __PYX_ERR(10, 128, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_10exceptions_ProtocolError = __Pyx_ImportType(__pyx_t_2, "thrift.py3.exceptions", "ProtocolError", sizeof(struct __pyx_obj_6thrift_3py3_10exceptions_ProtocolError), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10exceptions_ProtocolError) __PYX_ERR(10, 131, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_10exceptions_ApplicationError = __Pyx_ImportType(__pyx_t_2, "thrift.py3.exceptions", "ApplicationError", sizeof(struct __pyx_obj_6thrift_3py3_10exceptions_ApplicationError), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10exceptions_ApplicationError) __PYX_ERR(10, 134, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_10exceptions_TransportError = __Pyx_ImportType(__pyx_t_2, "thrift.py3.exceptions", "TransportError", sizeof(struct __pyx_obj_6thrift_3py3_10exceptions_TransportError), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10exceptions_TransportError) __PYX_ERR(10, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyImport_ImportModule("thrift.py3.types"); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_6thrift_3py3_5types_EnumData = __Pyx_ImportType(__pyx_t_2, "thrift.py3.types", "EnumData", sizeof(struct __pyx_obj_6thrift_3py3_5types_EnumData), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types_EnumData) __PYX_ERR(4, 106, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_5types_EnumData = (struct __pyx_vtabstruct_6thrift_3py3_5types_EnumData*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_5types_EnumData->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_5types_EnumData)) __PYX_ERR(4, 106, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_5types_EnumFlagsData = __Pyx_ImportType(__pyx_t_2, "thrift.py3.types", "EnumFlagsData", sizeof(struct __pyx_obj_6thrift_3py3_5types_EnumFlagsData), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types_EnumFlagsData) __PYX_ERR(4, 117, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_5types_EnumFlagsData = (struct __pyx_vtabstruct_6thrift_3py3_5types_EnumFlagsData*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_5types_EnumFlagsData->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_5types_EnumFlagsData)) __PYX_ERR(4, 117, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_5types_UnionTypeEnumData = __Pyx_ImportType(__pyx_t_2, "thrift.py3.types", "UnionTypeEnumData", sizeof(struct __pyx_obj_6thrift_3py3_5types_UnionTypeEnumData), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types_UnionTypeEnumData) __PYX_ERR(4, 122, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_5types_UnionTypeEnumData = (struct __pyx_vtabstruct_6thrift_3py3_5types_UnionTypeEnumData*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_5types_UnionTypeEnumData->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_5types_UnionTypeEnumData)) __PYX_ERR(4, 122, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_5types___NotSet = __Pyx_ImportType(__pyx_t_2, "thrift.py3.types", "__NotSet", sizeof(struct __pyx_obj_6thrift_3py3_5types___NotSet), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types___NotSet) __PYX_ERR(4, 131, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_5types_Container = __Pyx_ImportType(__pyx_t_2, "thrift.py3.types", "Container", sizeof(struct __pyx_obj_6thrift_3py3_5types_Container), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types_Container) __PYX_ERR(4, 154, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_5types_Set = __Pyx_ImportType(__pyx_t_2, "thrift.py3.types", "Set", sizeof(struct __pyx_obj_6thrift_3py3_5types_Set), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types_Set) __PYX_ERR(4, 165, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_5types_Set = (struct __pyx_vtabstruct_6thrift_3py3_5types_Set*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_5types_Set->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_5types_Set)) __PYX_ERR(4, 165, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_5types_Flag = __Pyx_ImportType(__pyx_t_2, "thrift.py3.types", "Flag", sizeof(struct __pyx_obj_6thrift_3py3_5types_Flag), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types_Flag) __PYX_ERR(4, 184, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_5types_Flag = (struct __pyx_vtabstruct_6thrift_3py3_5types_Flag*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_5types_Flag->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_5types_Flag)) __PYX_ERR(4, 184, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_5types_BadEnum = __Pyx_ImportType(__pyx_t_2, "thrift.py3.types", "BadEnum", sizeof(struct __pyx_obj_6thrift_3py3_5types_BadEnum), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types_BadEnum) __PYX_ERR(4, 187, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_5types_StructFieldsSetter = __Pyx_ImportType(__pyx_t_2, "thrift.py3.types", "StructFieldsSetter", sizeof(struct __pyx_obj_6thrift_3py3_5types_StructFieldsSetter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_5types_StructFieldsSetter) __PYX_ERR(4, 193, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_5types_StructFieldsSetter = (struct __pyx_vtabstruct_6thrift_3py3_5types_StructFieldsSetter*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_5types_StructFieldsSetter->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_5types_StructFieldsSetter)) __PYX_ERR(4, 193, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyImport_ImportModule("picard.types_fields"); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_6picard_12types_fields___SQLSchema_FieldsSetter = __Pyx_ImportType(__pyx_t_2, "picard.types_fields", "__SQLSchema_FieldsSetter", sizeof(struct __pyx_obj_6picard_12types_fields___SQLSchema_FieldsSetter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6picard_12types_fields___SQLSchema_FieldsSetter) __PYX_ERR(11, 48, __pyx_L1_error)
  __pyx_vtabptr_6picard_12types_fields___SQLSchema_FieldsSetter = (struct __pyx_vtabstruct_6picard_12types_fields___SQLSchema_FieldsSetter*)__Pyx_GetVtable(__pyx_ptype_6picard_12types_fields___SQLSchema_FieldsSetter->tp_dict); if (unlikely(!__pyx_vtabptr_6picard_12types_fields___SQLSchema_FieldsSetter)) __PYX_ERR(11, 48, __pyx_L1_error)
  __pyx_ptype_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter = __Pyx_ImportType(__pyx_t_2, "picard.types_fields", "__RegisterSQLSchemaException_FieldsSetter", sizeof(struct __pyx_obj_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter) __PYX_ERR(11, 65, __pyx_L1_error)
  __pyx_vtabptr_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter = (struct __pyx_vtabstruct_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter*)__Pyx_GetVtable(__pyx_ptype_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter->tp_dict); if (unlikely(!__pyx_vtabptr_6picard_12types_fields___RegisterSQLSchemaException_FieldsSetter)) __PYX_ERR(11, 65, __pyx_L1_error)
  __pyx_ptype_6picard_12types_fields___RegisterTokenizerException_FieldsSetter = __Pyx_ImportType(__pyx_t_2, "picard.types_fields", "__RegisterTokenizerException_FieldsSetter", sizeof(struct __pyx_obj_6picard_12types_fields___RegisterTokenizerException_FieldsSetter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6picard_12types_fields___RegisterTokenizerException_FieldsSetter) __PYX_ERR(11, 77, __pyx_L1_error)
  __pyx_vtabptr_6picard_12types_fields___RegisterTokenizerException_FieldsSetter = (struct __pyx_vtabstruct_6picard_12types_fields___RegisterTokenizerException_FieldsSetter*)__Pyx_GetVtable(__pyx_ptype_6picard_12types_fields___RegisterTokenizerException_FieldsSetter->tp_dict); if (unlikely(!__pyx_vtabptr_6picard_12types_fields___RegisterTokenizerException_FieldsSetter)) __PYX_ERR(11, 77, __pyx_L1_error)
  __pyx_ptype_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter = __Pyx_ImportType(__pyx_t_2, "picard.types_fields", "__TokenizerNotRegisteredException_FieldsSetter", sizeof(struct __pyx_obj_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter) __PYX_ERR(11, 88, __pyx_L1_error)
  __pyx_vtabptr_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter = (struct __pyx_vtabstruct_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter*)__Pyx_GetVtable(__pyx_ptype_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter->tp_dict); if (unlikely(!__pyx_vtabptr_6picard_12types_fields___TokenizerNotRegisteredException_FieldsSetter)) __PYX_ERR(11, 88, __pyx_L1_error)
  __pyx_ptype_6picard_12types_fields___TokenizerPrefixException_FieldsSetter = __Pyx_ImportType(__pyx_t_2, "picard.types_fields", "__TokenizerPrefixException_FieldsSetter", sizeof(struct __pyx_obj_6picard_12types_fields___TokenizerPrefixException_FieldsSetter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6picard_12types_fields___TokenizerPrefixException_FieldsSetter) __PYX_ERR(11, 99, __pyx_L1_error)
  __pyx_vtabptr_6picard_12types_fields___TokenizerPrefixException_FieldsSetter = (struct __pyx_vtabstruct_6picard_12types_fields___TokenizerPrefixException_FieldsSetter*)__Pyx_GetVtable(__pyx_ptype_6picard_12types_fields___TokenizerPrefixException_FieldsSetter->tp_dict); if (unlikely(!__pyx_vtabptr_6picard_12types_fields___TokenizerPrefixException_FieldsSetter)) __PYX_ERR(11, 99, __pyx_L1_error)
  __pyx_ptype_6picard_12types_fields___ModeException_FieldsSetter = __Pyx_ImportType(__pyx_t_2, "picard.types_fields", "__ModeException_FieldsSetter", sizeof(struct __pyx_obj_6picard_12types_fields___ModeException_FieldsSetter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6picard_12types_fields___ModeException_FieldsSetter) __PYX_ERR(11, 110, __pyx_L1_error)
  __pyx_vtabptr_6picard_12types_fields___ModeException_FieldsSetter = (struct __pyx_vtabstruct_6picard_12types_fields___ModeException_FieldsSetter*)__Pyx_GetVtable(__pyx_ptype_6picard_12types_fields___ModeException_FieldsSetter->tp_dict); if (unlikely(!__pyx_vtabptr_6picard_12types_fields___ModeException_FieldsSetter)) __PYX_ERR(11, 110, __pyx_L1_error)
  __pyx_ptype_6picard_12types_fields___FeedException_FieldsSetter = __Pyx_ImportType(__pyx_t_2, "picard.types_fields", "__FeedException_FieldsSetter", sizeof(struct __pyx_obj_6picard_12types_fields___FeedException_FieldsSetter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6picard_12types_fields___FeedException_FieldsSetter) __PYX_ERR(11, 121, __pyx_L1_error)
  __pyx_vtabptr_6picard_12types_fields___FeedException_FieldsSetter = (struct __pyx_vtabstruct_6picard_12types_fields___FeedException_FieldsSetter*)__Pyx_GetVtable(__pyx_ptype_6picard_12types_fields___FeedException_FieldsSetter->tp_dict); if (unlikely(!__pyx_vtabptr_6picard_12types_fields___FeedException_FieldsSetter)) __PYX_ERR(11, 121, __pyx_L1_error)
  __pyx_ptype_6picard_12types_fields___FeedParseFailure_FieldsSetter = __Pyx_ImportType(__pyx_t_2, "picard.types_fields", "__FeedParseFailure_FieldsSetter", sizeof(struct __pyx_obj_6picard_12types_fields___FeedParseFailure_FieldsSetter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6picard_12types_fields___FeedParseFailure_FieldsSetter) __PYX_ERR(11, 132, __pyx_L1_error)
  __pyx_vtabptr_6picard_12types_fields___FeedParseFailure_FieldsSetter = (struct __pyx_vtabstruct_6picard_12types_fields___FeedParseFailure_FieldsSetter*)__Pyx_GetVtable(__pyx_ptype_6picard_12types_fields___FeedParseFailure_FieldsSetter->tp_dict); if (unlikely(!__pyx_vtabptr_6picard_12types_fields___FeedParseFailure_FieldsSetter)) __PYX_ERR(11, 132, __pyx_L1_error)
  __pyx_ptype_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter = __Pyx_ImportType(__pyx_t_2, "picard.types_fields", "__FeedTimeoutFailure_FieldsSetter", sizeof(struct __pyx_obj_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter) __PYX_ERR(11, 145, __pyx_L1_error)
  __pyx_vtabptr_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter = (struct __pyx_vtabstruct_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter*)__Pyx_GetVtable(__pyx_ptype_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter->tp_dict); if (unlikely(!__pyx_vtabptr_6picard_12types_fields___FeedTimeoutFailure_FieldsSetter)) __PYX_ERR(11, 145, __pyx_L1_error)
  __pyx_ptype_6picard_12types_fields___FeedPartialSuccess_FieldsSetter = __Pyx_ImportType(__pyx_t_2, "picard.types_fields", "__FeedPartialSuccess_FieldsSetter", sizeof(struct __pyx_obj_6picard_12types_fields___FeedPartialSuccess_FieldsSetter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6picard_12types_fields___FeedPartialSuccess_FieldsSetter) __PYX_ERR(11, 156, __pyx_L1_error)
  __pyx_vtabptr_6picard_12types_fields___FeedPartialSuccess_FieldsSetter = (struct __pyx_vtabstruct_6picard_12types_fields___FeedPartialSuccess_FieldsSetter*)__Pyx_GetVtable(__pyx_ptype_6picard_12types_fields___FeedPartialSuccess_FieldsSetter->tp_dict); if (unlikely(!__pyx_vtabptr_6picard_12types_fields___FeedPartialSuccess_FieldsSetter)) __PYX_ERR(11, 156, __pyx_L1_error)
  __pyx_ptype_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter = __Pyx_ImportType(__pyx_t_2, "picard.types_fields", "__FeedCompleteSuccess_FieldsSetter", sizeof(struct __pyx_obj_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter) __PYX_ERR(11, 166, __pyx_L1_error)
  __pyx_vtabptr_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter = (struct __pyx_vtabstruct_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter*)__Pyx_GetVtable(__pyx_ptype_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter->tp_dict); if (unlikely(!__pyx_vtabptr_6picard_12types_fields___FeedCompleteSuccess_FieldsSetter)) __PYX_ERR(11, 166, __pyx_L1_error)
  __pyx_ptype_6picard_12types_fields___BatchFeedResult_FieldsSetter = __Pyx_ImportType(__pyx_t_2, "picard.types_fields", "__BatchFeedResult_FieldsSetter", sizeof(struct __pyx_obj_6picard_12types_fields___BatchFeedResult_FieldsSetter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6picard_12types_fields___BatchFeedResult_FieldsSetter) __PYX_ERR(11, 177, __pyx_L1_error)
  __pyx_vtabptr_6picard_12types_fields___BatchFeedResult_FieldsSetter = (struct __pyx_vtabstruct_6picard_12types_fields___BatchFeedResult_FieldsSetter*)__Pyx_GetVtable(__pyx_ptype_6picard_12types_fields___BatchFeedResult_FieldsSetter->tp_dict); if (unlikely(!__pyx_vtabptr_6picard_12types_fields___BatchFeedResult_FieldsSetter)) __PYX_ERR(11, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyImport_ImportModule("thrift.py3.reflection"); if (unlikely(!__pyx_t_2)) __PYX_ERR(12, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_6thrift_3py3_10reflection_StructSpec = __Pyx_ImportType(__pyx_t_2, "thrift.py3.reflection", "StructSpec", sizeof(struct __pyx_obj_6thrift_3py3_10reflection_StructSpec), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10reflection_StructSpec) __PYX_ERR(12, 43, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_10reflection_StructSpec = (struct __pyx_vtabstruct_6thrift_3py3_10reflection_StructSpec*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_10reflection_StructSpec->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_10reflection_StructSpec)) __PYX_ERR(12, 43, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_10reflection_FieldSpec = __Pyx_ImportType(__pyx_t_2, "thrift.py3.reflection", "FieldSpec", sizeof(struct __pyx_obj_6thrift_3py3_10reflection_FieldSpec), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10reflection_FieldSpec) __PYX_ERR(12, 54, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_10reflection_FieldSpec = (struct __pyx_vtabstruct_6thrift_3py3_10reflection_FieldSpec*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_10reflection_FieldSpec->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_10reflection_FieldSpec)) __PYX_ERR(12, 54, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_10reflection_ListSpec = __Pyx_ImportType(__pyx_t_2, "thrift.py3.reflection", "ListSpec", sizeof(struct __pyx_obj_6thrift_3py3_10reflection_ListSpec), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10reflection_ListSpec) __PYX_ERR(12, 75, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_10reflection_ListSpec = (struct __pyx_vtabstruct_6thrift_3py3_10reflection_ListSpec*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_10reflection_ListSpec->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_10reflection_ListSpec)) __PYX_ERR(12, 75, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_10reflection_SetSpec = __Pyx_ImportType(__pyx_t_2, "thrift.py3.reflection", "SetSpec", sizeof(struct __pyx_obj_6thrift_3py3_10reflection_SetSpec), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10reflection_SetSpec) __PYX_ERR(12, 83, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_10reflection_SetSpec = (struct __pyx_vtabstruct_6thrift_3py3_10reflection_SetSpec*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_10reflection_SetSpec->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_10reflection_SetSpec)) __PYX_ERR(12, 83, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_10reflection_MapSpec = __Pyx_ImportType(__pyx_t_2, "thrift.py3.reflection", "MapSpec", sizeof(struct __pyx_obj_6thrift_3py3_10reflection_MapSpec), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10reflection_MapSpec) __PYX_ERR(12, 91, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_10reflection_MapSpec = (struct __pyx_vtabstruct_6thrift_3py3_10reflection_MapSpec*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_10reflection_MapSpec->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_10reflection_MapSpec)) __PYX_ERR(12, 91, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_10reflection_InterfaceSpec = __Pyx_ImportType(__pyx_t_2, "thrift.py3.reflection", "InterfaceSpec", sizeof(struct __pyx_obj_6thrift_3py3_10reflection_InterfaceSpec), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10reflection_InterfaceSpec) __PYX_ERR(12, 106, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_10reflection_InterfaceSpec = (struct __pyx_vtabstruct_6thrift_3py3_10reflection_InterfaceSpec*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_10reflection_InterfaceSpec->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_10reflection_InterfaceSpec)) __PYX_ERR(12, 106, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_10reflection_MethodSpec = __Pyx_ImportType(__pyx_t_2, "thrift.py3.reflection", "MethodSpec", sizeof(struct __pyx_obj_6thrift_3py3_10reflection_MethodSpec), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10reflection_MethodSpec) __PYX_ERR(12, 116, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_10reflection_MethodSpec = (struct __pyx_vtabstruct_6thrift_3py3_10reflection_MethodSpec*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_10reflection_MethodSpec->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_10reflection_MethodSpec)) __PYX_ERR(12, 116, __pyx_L1_error)
  __pyx_ptype_6thrift_3py3_10reflection_ArgumentSpec = __Pyx_ImportType(__pyx_t_2, "thrift.py3.reflection", "ArgumentSpec", sizeof(struct __pyx_obj_6thrift_3py3_10reflection_ArgumentSpec), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_6thrift_3py3_10reflection_ArgumentSpec) __PYX_ERR(12, 135, __pyx_L1_error)
  __pyx_vtabptr_6thrift_3py3_10reflection_ArgumentSpec = (struct __pyx_vtabstruct_6thrift_3py3_10reflection_ArgumentSpec*)__Pyx_GetVtable(__pyx_ptype_6thrift_3py3_10reflection_ArgumentSpec->tp_dict); if (unlikely(!__pyx_vtabptr_6thrift_3py3_10reflection_ArgumentSpec)) __PYX_ERR(12, 135, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __pyx_t_1 = PyImport_ImportModule("thrift.py3.types"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportVoidPtr(__pyx_t_1, "NOTSET", (void **)&__pyx_vp_6thrift_3py3_5types_NOTSET, "struct __pyx_obj_6thrift_3py3_5types___NotSet *") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("folly.iobuf"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "from_unique_ptr", (void (**)(void))&__pyx_f_5folly_5iobuf_from_unique_ptr, "struct __pyx_obj_5folly_5iobuf_IOBuf *(std::unique_ptr<folly::IOBuf> )") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("thrift.py3.types"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "translate_cpp_enum_to_python", (void (**)(void))&__pyx_f_6thrift_3py3_5types_translate_cpp_enum_to_python, "PyObject *(PyObject *, int)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("picard.types_reflection"); if (!__pyx_t_1) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__SQLSchema", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__SQLSchema, "struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__RegisterSQLSchemaException", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__RegisterSQLSchemaException, "struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__RegisterTokenizerException", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__RegisterTokenizerException, "struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__TokenizerNotRegisteredException", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__TokenizerNotRegisteredException, "struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__TokenizerPrefixException", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__TokenizerPrefixException, "struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__ModeException", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__ModeException, "struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__FeedFatalException", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__FeedFatalException, "struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__FeedException", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__FeedException, "struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__FeedParseFailure", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__FeedParseFailure, "struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__FeedTimeoutFailure", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__FeedTimeoutFailure, "struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__FeedPartialSuccess", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__FeedPartialSuccess, "struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__FeedCompleteSuccess", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__FeedCompleteSuccess, "struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__FeedResult", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__FeedResult, "struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__BatchFeedResult", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__BatchFeedResult, "struct __pyx_obj_6thrift_3py3_10reflection_StructSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__List__i64", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__List__i64, "struct __pyx_obj_6thrift_3py3_10reflection_ListSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__List__List__i64", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__List__List__i64, "struct __pyx_obj_6thrift_3py3_10reflection_ListSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__List__BatchFeedResult", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__List__BatchFeedResult, "struct __pyx_obj_6thrift_3py3_10reflection_ListSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__Map__string_string", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__Map__string_string, "struct __pyx_obj_6thrift_3py3_10reflection_MapSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__Map__string_ColumnType", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__Map__string_ColumnType, "struct __pyx_obj_6thrift_3py3_10reflection_MapSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__List__string", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__List__string, "struct __pyx_obj_6thrift_3py3_10reflection_ListSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction(__pyx_t_1, "get_reflection__Map__string_List__string", (void (**)(void))&__pyx_f_6picard_16types_reflection_get_reflection__Map__string_List__string, "struct __pyx_obj_6thrift_3py3_10reflection_MapSpec *(void)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inittypes(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC inittypes(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_types(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_types(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_types(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  ::thrift::py3::EnumData *__pyx_t_3;
  static PyThread_type_lock __pyx_t_4[8];
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'types' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_types(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("types", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_picard__types) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "picard.types")) {
      if (unlikely(PyDict_SetItemString(modules, "picard.types", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_type_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_variable_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely(__Pyx_modinit_function_import_code() < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "picard/types.pyx":15
 * from cpython cimport bool as pbool
 * from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
 * import thrift.py3.types             # <<<<<<<<<<<<<<
 * cimport thrift.py3.types
 * cimport thrift.py3.exceptions
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_thrift_py3_types, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_thrift, __pyx_t_1) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":47
 * cimport thrift.py3.std_libcpp as std_libcpp
 * cimport thrift.py3.serializer as serializer
 * import folly.iobuf as _fbthrift_iobuf             # <<<<<<<<<<<<<<
 * from folly.optional cimport cOptional
 * from folly.memory cimport to_shared_ptr as __to_shared_ptr
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s__23);
  __Pyx_GIVEREF(__pyx_n_s__23);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s__23);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_folly_iobuf, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fbthrift_iobuf, __pyx_t_2) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":52
 * from folly.range cimport Range as __cRange
 * 
 * import sys             # <<<<<<<<<<<<<<
 * from collections.abc import Sequence, Set, Mapping, Iterable
 * import weakref as __weakref
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_2) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":53
 * 
 * import sys
 * from collections.abc import Sequence, Set, Mapping, Iterable             # <<<<<<<<<<<<<<
 * import weakref as __weakref
 * import builtins as _builtins
 */
  __pyx_t_2 = PyList_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Sequence);
  __Pyx_GIVEREF(__pyx_n_s_Sequence);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Sequence);
  __Pyx_INCREF(__pyx_n_s_Set);
  __Pyx_GIVEREF(__pyx_n_s_Set);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Set);
  __Pyx_INCREF(__pyx_n_s_Mapping);
  __Pyx_GIVEREF(__pyx_n_s_Mapping);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_Mapping);
  __Pyx_INCREF(__pyx_n_s_Iterable);
  __Pyx_GIVEREF(__pyx_n_s_Iterable);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_Iterable);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_collections_abc, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Sequence, __pyx_t_2) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Set); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Set, __pyx_t_2) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Mapping); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Mapping, __pyx_t_2) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Iterable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Iterable, __pyx_t_2) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":54
 * import sys
 * from collections.abc import Sequence, Set, Mapping, Iterable
 * import weakref as __weakref             # <<<<<<<<<<<<<<
 * import builtins as _builtins
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_weakref, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_weakref_2, __pyx_t_1) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":55
 * from collections.abc import Sequence, Set, Mapping, Iterable
 * import weakref as __weakref
 * import builtins as _builtins             # <<<<<<<<<<<<<<
 * 
 * cimport picard.types_reflection as _types_reflection
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_builtins_2, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_builtins, __pyx_t_1) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":60
 * 
 * 
 * cdef __EnumData __ColumnType_enum_data  = __EnumData.create(thrift.py3.types.createEnumData[cColumnType](), ColumnType)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_3 = ::thrift::py3::createEnumData<::cpp2::ColumnType>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 60, __pyx_L1_error)
  }
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_6thrift_3py3_5types_EnumData->create(__pyx_t_3, ((PyObject *)__pyx_ptype_6picard_5types_ColumnType))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(((PyObject *)__pyx_v_6picard_5types___ColumnType_enum_data));
  __Pyx_DECREF_SET(__pyx_v_6picard_5types___ColumnType_enum_data, ((struct __pyx_obj_6thrift_3py3_5types_EnumData *)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":89
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         EnumMetadata[cColumnType].gen(meta)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_10ColumnType_1__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_ColumnType->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_ColumnType);

  /* "picard/types.pyx":88
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_ColumnType, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_ColumnType->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_ColumnType);

  /* "picard/types.pyx":95
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.ColumnType"
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_10ColumnType_3__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_ColumnType->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_ColumnType);

  /* "picard/types.pyx":94
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.ColumnType"
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_ColumnType, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_ColumnType->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_ColumnType);

  /* "picard/types.pyx":99
 * 
 * 
 * __SetMetaClass(<PyTypeObject*> ColumnType, <PyTypeObject*> __ColumnTypeMeta)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  SetMetaClass(((PyTypeObject *)__pyx_ptype_6picard_5types_ColumnType), ((PyTypeObject *)__pyx_ptype_6picard_5types___ColumnTypeMeta));

  /* "picard/types.pyx":102
 * 
 * 
 * cdef __EnumData __Mode_enum_data  = __EnumData.create(thrift.py3.types.createEnumData[cMode](), Mode)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_3 = ::thrift::py3::createEnumData<::cpp2::Mode>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 102, __pyx_L1_error)
  }
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_6thrift_3py3_5types_EnumData->create(__pyx_t_3, ((PyObject *)__pyx_ptype_6picard_5types_Mode))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(((PyObject *)__pyx_v_6picard_5types___Mode_enum_data));
  __Pyx_DECREF_SET(__pyx_v_6picard_5types___Mode_enum_data, ((struct __pyx_obj_6thrift_3py3_5types_EnumData *)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":131
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         EnumMetadata[cMode].gen(meta)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_4Mode_1__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_Mode->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_Mode);

  /* "picard/types.pyx":130
 * 
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_Mode, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_Mode->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_Mode);

  /* "picard/types.pyx":137
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.Mode"
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_4Mode_3__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_Mode->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_Mode);

  /* "picard/types.pyx":136
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.Mode"
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_Mode, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_Mode->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_Mode);

  /* "picard/types.pyx":141
 * 
 * 
 * __SetMetaClass(<PyTypeObject*> Mode, <PyTypeObject*> __ModeMeta)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  SetMetaClass(((PyTypeObject *)__pyx_ptype_6picard_5types_Mode), ((PyTypeObject *)__pyx_ptype_6picard_5types___ModeMeta));

  /* "picard/types.pyx":146
 * 
 * cdef __UnionTypeEnumData __FeedFatalException_union_type_enum_data  = __UnionTypeEnumData.create(
 *     __createEnumDataForUnionType[cFeedFatalException](),             # <<<<<<<<<<<<<<
 *     __FeedFatalExceptionType,
 * )
 */
  try {
    __pyx_t_3 = ::thrift::py3::createEnumDataForUnionType<::cpp2::FeedFatalException>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 146, __pyx_L1_error)
  }

  /* "picard/types.pyx":145
 * 
 * 
 * cdef __UnionTypeEnumData __FeedFatalException_union_type_enum_data  = __UnionTypeEnumData.create(             # <<<<<<<<<<<<<<
 *     __createEnumDataForUnionType[cFeedFatalException](),
 *     __FeedFatalExceptionType,
 */
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_6thrift_3py3_5types_UnionTypeEnumData->create(__pyx_t_3, ((PyObject *)__pyx_ptype_6picard_5types___FeedFatalExceptionType))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(((PyObject *)__pyx_v_6picard_5types___FeedFatalException_union_type_enum_data));
  __Pyx_DECREF_SET(__pyx_v_6picard_5types___FeedFatalException_union_type_enum_data, ((struct __pyx_obj_6thrift_3py3_5types_UnionTypeEnumData *)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":176
 * 
 * 
 * __SetMetaClass(<PyTypeObject*> __FeedFatalExceptionType, <PyTypeObject*> __FeedFatalException_Union_TypeMeta)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  SetMetaClass(((PyTypeObject *)__pyx_ptype_6picard_5types___FeedFatalExceptionType), ((PyTypeObject *)__pyx_ptype_6picard_5types___FeedFatalException_Union_TypeMeta));

  /* "picard/types.pyx":180
 * 
 * cdef __UnionTypeEnumData __FeedResult_union_type_enum_data  = __UnionTypeEnumData.create(
 *     __createEnumDataForUnionType[cFeedResult](),             # <<<<<<<<<<<<<<
 *     __FeedResultType,
 * )
 */
  try {
    __pyx_t_3 = ::thrift::py3::createEnumDataForUnionType<::cpp2::FeedResult>();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 180, __pyx_L1_error)
  }

  /* "picard/types.pyx":179
 * 
 * 
 * cdef __UnionTypeEnumData __FeedResult_union_type_enum_data  = __UnionTypeEnumData.create(             # <<<<<<<<<<<<<<
 *     __createEnumDataForUnionType[cFeedResult](),
 *     __FeedResultType,
 */
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_6thrift_3py3_5types_UnionTypeEnumData->create(__pyx_t_3, ((PyObject *)__pyx_ptype_6picard_5types___FeedResultType))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(((PyObject *)__pyx_v_6picard_5types___FeedResult_union_type_enum_data));
  __Pyx_DECREF_SET(__pyx_v_6picard_5types___FeedResult_union_type_enum_data, ((struct __pyx_obj_6thrift_3py3_5types_UnionTypeEnumData *)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "picard/types.pyx":210
 * 
 * 
 * __SetMetaClass(<PyTypeObject*> __FeedResultType, <PyTypeObject*> __FeedResult_Union_TypeMeta)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  SetMetaClass(((PyTypeObject *)__pyx_ptype_6picard_5types___FeedResultType), ((PyTypeObject *)__pyx_ptype_6picard_5types___FeedResult_Union_TypeMeta));

  /* "picard/types.pyx":318
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__SQLSchema()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_9SQLSchema_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_SQLSchema->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_SQLSchema);

  /* "picard/types.pyx":317
 *         ) if r is None else r
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__SQLSchema()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_SQLSchema, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_SQLSchema->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_SQLSchema);

  /* "picard/types.pyx":322
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cSQLSchema].gen(meta)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_9SQLSchema_13__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_SQLSchema->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_SQLSchema);

  /* "picard/types.pyx":321
 *         return _types_reflection.get_reflection__SQLSchema()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_SQLSchema, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_SQLSchema->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_SQLSchema);

  /* "picard/types.pyx":328
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.SQLSchema"
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_9SQLSchema_15__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_SQLSchema->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_SQLSchema);

  /* "picard/types.pyx":327
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.SQLSchema"
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_SQLSchema, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_SQLSchema->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_SQLSchema);

  /* "picard/types.pyx":403
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__RegisterSQLSchemaException()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_26RegisterSQLSchemaException_9__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_RegisterSQLSchemaException);

  /* "picard/types.pyx":402
 *         ) if r is None else r
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__RegisterSQLSchemaException()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_RegisterSQLSchemaException);

  /* "picard/types.pyx":407
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cRegisterSQLSchemaException].gen(meta)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_26RegisterSQLSchemaException_11__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_RegisterSQLSchemaException);

  /* "picard/types.pyx":406
 *         return _types_reflection.get_reflection__RegisterSQLSchemaException()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_RegisterSQLSchemaException);

  /* "picard/types.pyx":413
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.RegisterSQLSchemaException"
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_26RegisterSQLSchemaException_13__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_RegisterSQLSchemaException);

  /* "picard/types.pyx":412
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.RegisterSQLSchemaException"
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_RegisterSQLSchemaException->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_RegisterSQLSchemaException);

  /* "picard/types.pyx":470
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__RegisterTokenizerException()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_26RegisterTokenizerException_9__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_RegisterTokenizerException);

  /* "picard/types.pyx":469
 *         ) if r is None else r
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__RegisterTokenizerException()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_RegisterTokenizerException);

  /* "picard/types.pyx":474
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cRegisterTokenizerException].gen(meta)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_26RegisterTokenizerException_11__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_RegisterTokenizerException);

  /* "picard/types.pyx":473
 *         return _types_reflection.get_reflection__RegisterTokenizerException()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_RegisterTokenizerException);

  /* "picard/types.pyx":480
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.RegisterTokenizerException"
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_26RegisterTokenizerException_13__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_RegisterTokenizerException);

  /* "picard/types.pyx":479
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.RegisterTokenizerException"
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_RegisterTokenizerException->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_RegisterTokenizerException);

  /* "picard/types.pyx":546
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__TokenizerNotRegisteredException()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_31TokenizerNotRegisteredException_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_TokenizerNotRegisteredException);

  /* "picard/types.pyx":545
 *         ) if r is None else r
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__TokenizerNotRegisteredException()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_TokenizerNotRegisteredException);

  /* "picard/types.pyx":550
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cTokenizerNotRegisteredException].gen(meta)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_31TokenizerNotRegisteredException_13__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_TokenizerNotRegisteredException);

  /* "picard/types.pyx":549
 *         return _types_reflection.get_reflection__TokenizerNotRegisteredException()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_TokenizerNotRegisteredException);

  /* "picard/types.pyx":556
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.TokenizerNotRegisteredException"
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_31TokenizerNotRegisteredException_15__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_TokenizerNotRegisteredException);

  /* "picard/types.pyx":555
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.TokenizerNotRegisteredException"
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_TokenizerNotRegisteredException->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_TokenizerNotRegisteredException);

  /* "picard/types.pyx":634
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__TokenizerPrefixException()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_24TokenizerPrefixException_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_TokenizerPrefixException);

  /* "picard/types.pyx":633
 *         ) if r is None else r
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__TokenizerPrefixException()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_TokenizerPrefixException);

  /* "picard/types.pyx":638
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cTokenizerPrefixException].gen(meta)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_24TokenizerPrefixException_13__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_TokenizerPrefixException);

  /* "picard/types.pyx":637
 *         return _types_reflection.get_reflection__TokenizerPrefixException()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_TokenizerPrefixException);

  /* "picard/types.pyx":644
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.TokenizerPrefixException"
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_24TokenizerPrefixException_15__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_TokenizerPrefixException);

  /* "picard/types.pyx":643
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.TokenizerPrefixException"
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_TokenizerPrefixException->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 644, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_TokenizerPrefixException);

  /* "picard/types.pyx":722
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__ModeException()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_13ModeException_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_ModeException->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_ModeException);

  /* "picard/types.pyx":721
 *         ) if r is None else r
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__ModeException()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_ModeException, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_ModeException->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 722, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_ModeException);

  /* "picard/types.pyx":726
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cModeException].gen(meta)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_13ModeException_13__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_ModeException->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_ModeException);

  /* "picard/types.pyx":725
 *         return _types_reflection.get_reflection__ModeException()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_ModeException, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_ModeException->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_ModeException);

  /* "picard/types.pyx":732
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.ModeException"
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_13ModeException_15__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_ModeException->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_ModeException);

  /* "picard/types.pyx":731
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.ModeException"
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_ModeException, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_ModeException->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_ModeException);

  /* "picard/types.pyx":759
 * @__cython.auto_pickle(False)
 * cdef class FeedFatalException(thrift.py3.types.Union):
 *     Type = __FeedFatalExceptionType             # <<<<<<<<<<<<<<
 * 
 *     def __init__(
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException->tp_dict, __pyx_n_s_Type, ((PyObject *)__pyx_ptype_6picard_5types___FeedFatalExceptionType)) < 0) __PYX_ERR(0, 759, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_6picard_5types_FeedFatalException);

  /* "picard/types.pyx":776
 * 
 *     @staticmethod
 *     def fromValue(value):             # <<<<<<<<<<<<<<
 *         if value is None:
 *             return FeedFatalException()
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_18FeedFatalException_3fromValue, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException->tp_dict, __pyx_n_s_fromValue, __pyx_t_1) < 0) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedFatalException);

  /* "picard/types.pyx":775
 *         self._load_cache()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def fromValue(value):
 *         if value is None:
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_FeedFatalException, __pyx_n_s_fromValue); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException->tp_dict, __pyx_n_s_fromValue, __pyx_t_2) < 0) __PYX_ERR(0, 776, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedFatalException);

  /* "picard/types.pyx":871
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedFatalException()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_18FeedFatalException_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 871, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedFatalException);

  /* "picard/types.pyx":870
 *         ) if r is None else r
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__FeedFatalException()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_FeedFatalException, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 871, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedFatalException);

  /* "picard/types.pyx":875
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedFatalException].gen(meta)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_18FeedFatalException_13__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedFatalException);

  /* "picard/types.pyx":874
 *         return _types_reflection.get_reflection__FeedFatalException()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_FeedFatalException, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedFatalException);

  /* "picard/types.pyx":881
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedFatalException"
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_18FeedFatalException_15__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 881, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedFatalException);

  /* "picard/types.pyx":880
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.FeedFatalException"
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_FeedFatalException, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedFatalException->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 881, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedFatalException);

  /* "picard/types.pyx":954
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedException()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_13FeedException_9__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedException->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedException);

  /* "picard/types.pyx":953
 *         ) if r is None else r
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__FeedException()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_FeedException, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedException->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 954, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedException);

  /* "picard/types.pyx":958
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         ExceptionMetadata[cFeedException].gen(meta)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_13FeedException_11__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedException->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedException);

  /* "picard/types.pyx":957
 *         return _types_reflection.get_reflection__FeedException()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_FeedException, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedException->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 958, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedException);

  /* "picard/types.pyx":964
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedException"
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_13FeedException_13__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedException->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedException);

  /* "picard/types.pyx":963
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.FeedException"
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_FeedException, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedException->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedException);

  /* "picard/types.pyx":1044
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedParseFailure()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_16FeedParseFailure_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedParseFailure);

  /* "picard/types.pyx":1043
 *         ) if r is None else r
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__FeedParseFailure()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedParseFailure);

  /* "picard/types.pyx":1048
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedParseFailure].gen(meta)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_16FeedParseFailure_13__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedParseFailure);

  /* "picard/types.pyx":1047
 *         return _types_reflection.get_reflection__FeedParseFailure()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedParseFailure);

  /* "picard/types.pyx":1054
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedParseFailure"
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_16FeedParseFailure_15__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedParseFailure);

  /* "picard/types.pyx":1053
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.FeedParseFailure"
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedParseFailure->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedParseFailure);

  /* "picard/types.pyx":1132
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedTimeoutFailure()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_18FeedTimeoutFailure_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedTimeoutFailure);

  /* "picard/types.pyx":1131
 *         ) if r is None else r
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__FeedTimeoutFailure()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedTimeoutFailure);

  /* "picard/types.pyx":1136
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedTimeoutFailure].gen(meta)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_18FeedTimeoutFailure_13__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedTimeoutFailure);

  /* "picard/types.pyx":1135
 *         return _types_reflection.get_reflection__FeedTimeoutFailure()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 1136, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedTimeoutFailure);

  /* "picard/types.pyx":1142
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedTimeoutFailure"
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_18FeedTimeoutFailure_15__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedTimeoutFailure);

  /* "picard/types.pyx":1141
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.FeedTimeoutFailure"
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedTimeoutFailure->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedTimeoutFailure);

  /* "picard/types.pyx":1207
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedPartialSuccess()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_18FeedPartialSuccess_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedPartialSuccess);

  /* "picard/types.pyx":1206
 *         ) if r is None else r
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__FeedPartialSuccess()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 1207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedPartialSuccess);

  /* "picard/types.pyx":1211
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedPartialSuccess].gen(meta)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_18FeedPartialSuccess_13__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedPartialSuccess);

  /* "picard/types.pyx":1210
 *         return _types_reflection.get_reflection__FeedPartialSuccess()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 1211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedPartialSuccess);

  /* "picard/types.pyx":1217
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedPartialSuccess"
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_18FeedPartialSuccess_15__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedPartialSuccess);

  /* "picard/types.pyx":1216
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.FeedPartialSuccess"
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedPartialSuccess->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 1217, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedPartialSuccess);

  /* "picard/types.pyx":1295
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedCompleteSuccess()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_19FeedCompleteSuccess_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedCompleteSuccess);

  /* "picard/types.pyx":1294
 *         ) if r is None else r
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__FeedCompleteSuccess()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedCompleteSuccess);

  /* "picard/types.pyx":1299
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedCompleteSuccess].gen(meta)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_19FeedCompleteSuccess_13__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedCompleteSuccess);

  /* "picard/types.pyx":1298
 *         return _types_reflection.get_reflection__FeedCompleteSuccess()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedCompleteSuccess);

  /* "picard/types.pyx":1305
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedCompleteSuccess"
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_19FeedCompleteSuccess_15__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedCompleteSuccess);

  /* "picard/types.pyx":1304
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.FeedCompleteSuccess"
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedCompleteSuccess->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedCompleteSuccess);

  /* "picard/types.pyx":1332
 * @__cython.auto_pickle(False)
 * cdef class FeedResult(thrift.py3.types.Union):
 *     Type = __FeedResultType             # <<<<<<<<<<<<<<
 * 
 *     def __init__(
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedResult->tp_dict, __pyx_n_s_Type, ((PyObject *)__pyx_ptype_6picard_5types___FeedResultType)) < 0) __PYX_ERR(0, 1332, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_6picard_5types_FeedResult);

  /* "picard/types.pyx":1351
 * 
 *     @staticmethod
 *     def fromValue(value):             # <<<<<<<<<<<<<<
 *         if value is None:
 *             return FeedResult()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_10FeedResult_3fromValue, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedResult->tp_dict, __pyx_n_s_fromValue, __pyx_t_2) < 0) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedResult);

  /* "picard/types.pyx":1350
 *         self._load_cache()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def fromValue(value):
 *         if value is None:
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_FeedResult, __pyx_n_s_fromValue); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedResult->tp_dict, __pyx_n_s_fromValue, __pyx_t_1) < 0) __PYX_ERR(0, 1351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedResult);

  /* "picard/types.pyx":1462
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__FeedResult()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_10FeedResult_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedResult->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 1462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedResult);

  /* "picard/types.pyx":1461
 *         ) if r is None else r
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__FeedResult()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_FeedResult, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedResult->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 1462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedResult);

  /* "picard/types.pyx":1466
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cFeedResult].gen(meta)
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_10FeedResult_13__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedResult->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 1466, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedResult);

  /* "picard/types.pyx":1465
 *         return _types_reflection.get_reflection__FeedResult()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_FeedResult, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedResult->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 1466, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedResult);

  /* "picard/types.pyx":1472
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.FeedResult"
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_10FeedResult_15__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedResult->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedResult);

  /* "picard/types.pyx":1471
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.FeedResult"
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_FeedResult, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_FeedResult->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_FeedResult);

  /* "picard/types.pyx":1566
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__BatchFeedResult()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_15BatchFeedResult_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 1566, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_BatchFeedResult);

  /* "picard/types.pyx":1565
 *         ) if r is None else r
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__BatchFeedResult()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 1566, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_BatchFeedResult);

  /* "picard/types.pyx":1570
 * 
 *     @staticmethod
 *     def __get_metadata__():             # <<<<<<<<<<<<<<
 *         cdef __fbthrift_cThriftMetadata meta
 *         StructMetadata[cBatchFeedResult].gen(meta)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_15BatchFeedResult_13__get_metadata__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult->tp_dict, __pyx_n_s_get_metadata, __pyx_t_1) < 0) __PYX_ERR(0, 1570, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_BatchFeedResult);

  /* "picard/types.pyx":1569
 *         return _types_reflection.get_reflection__BatchFeedResult()
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_metadata__():
 *         cdef __fbthrift_cThriftMetadata meta
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult, __pyx_n_s_get_metadata); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult->tp_dict, __pyx_n_s_get_metadata, __pyx_t_2) < 0) __PYX_ERR(0, 1570, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_BatchFeedResult);

  /* "picard/types.pyx":1576
 * 
 *     @staticmethod
 *     def __get_thrift_name__():             # <<<<<<<<<<<<<<
 *         return "picard.BatchFeedResult"
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_15BatchFeedResult_15__get_thrift_name__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_2) < 0) __PYX_ERR(0, 1576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_BatchFeedResult);

  /* "picard/types.pyx":1575
 *         return __MetadataBox.box(cmove(meta))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_thrift_name__():
 *         return "picard.BatchFeedResult"
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult, __pyx_n_s_get_thrift_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1576, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_BatchFeedResult->tp_dict, __pyx_n_s_get_thrift_name, __pyx_t_1) < 0) __PYX_ERR(0, 1576, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_BatchFeedResult);

  /* "picard/types.pyx":1671
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__i64()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_9List__i64_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_List__i64->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 1671, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_List__i64);

  /* "picard/types.pyx":1670
 *         return __list_count[vector[cint64_t]](self._cpp_obj, citem)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__List__i64()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_List__i64, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_List__i64->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 1671, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_List__i64);

  /* "picard/types.pyx":1675
 * 
 * 
 * Sequence.register(List__i64)             # <<<<<<<<<<<<<<
 * 
 * @__cython.auto_pickle(False)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_register); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)__pyx_ptype_6picard_5types_List__i64)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1675, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":1754
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__List__i64()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_15List__List__i64_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_List__List__i64->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 1754, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_List__List__i64);

  /* "picard/types.pyx":1753
 *         return __list_count[vector[vector[cint64_t]]](self._cpp_obj, citem)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__List__List__i64()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_List__List__i64, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_List__List__i64->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 1754, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_List__List__i64);

  /* "picard/types.pyx":1758
 * 
 * 
 * Sequence.register(List__List__i64)             # <<<<<<<<<<<<<<
 * 
 * @__cython.auto_pickle(False)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_register); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_ptype_6picard_5types_List__List__i64)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":1831
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__BatchFeedResult()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_21List__BatchFeedResult_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_List__BatchFeedResult->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_List__BatchFeedResult);

  /* "picard/types.pyx":1830
 *         return __list_count[vector[cBatchFeedResult]](self._cpp_obj, citem)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__List__BatchFeedResult()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_List__BatchFeedResult, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_List__BatchFeedResult->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 1831, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_List__BatchFeedResult);

  /* "picard/types.pyx":1835
 * 
 * 
 * Sequence.register(List__BatchFeedResult)             # <<<<<<<<<<<<<<
 * 
 * @__cython.auto_pickle(False)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_register); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)__pyx_ptype_6picard_5types_List__BatchFeedResult)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":1927
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__Map__string_string()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_18Map__string_string_20__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_Map__string_string->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 1927, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_Map__string_string);

  /* "picard/types.pyx":1926
 *             yield (ckey.data().decode('UTF-8'), bytes(citem).decode('UTF-8'))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__Map__string_string()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_Map__string_string, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_Map__string_string->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 1927, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_Map__string_string);

  /* "picard/types.pyx":1930
 *         return _types_reflection.get_reflection__Map__string_string()
 * 
 * Mapping.register(Map__string_string)             # <<<<<<<<<<<<<<
 * 
 * @__cython.auto_pickle(False)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Mapping); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_register); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_ptype_6picard_5types_Map__string_string)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":2022
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__Map__string_ColumnType()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_22Map__string_ColumnType_20__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_Map__string_ColumnType->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 2022, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_Map__string_ColumnType);

  /* "picard/types.pyx":2021
 *             yield (ckey.data().decode('UTF-8'), translate_cpp_enum_to_python(ColumnType, <int> citem))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__Map__string_ColumnType()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_Map__string_ColumnType, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_Map__string_ColumnType->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 2022, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_Map__string_ColumnType);

  /* "picard/types.pyx":2025
 *         return _types_reflection.get_reflection__Map__string_ColumnType()
 * 
 * Mapping.register(Map__string_ColumnType)             # <<<<<<<<<<<<<<
 * 
 * @__cython.auto_pickle(False)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Mapping); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_register); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)__pyx_ptype_6picard_5types_Map__string_ColumnType)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":2098
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__List__string()
 * 
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_12List__string_11__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_List__string->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 2098, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_List__string);

  /* "picard/types.pyx":2097
 *         return __list_count[vector[string]](self._cpp_obj, citem)
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__List__string()
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_6picard_5types_List__string, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_List__string->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 2098, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_List__string);

  /* "picard/types.pyx":2102
 * 
 * 
 * Sequence.register(List__string)             # <<<<<<<<<<<<<<
 * 
 * @__cython.auto_pickle(False)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_register); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_ptype_6picard_5types_List__string)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "picard/types.pyx":2196
 * 
 *     @staticmethod
 *     def __get_reflection__():             # <<<<<<<<<<<<<<
 *         return _types_reflection.get_reflection__Map__string_List__string()
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_6picard_5types_24Map__string_List__string_20__get_reflection__, NULL, __pyx_n_s_picard_types); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_Map__string_List__string->tp_dict, __pyx_n_s_get_reflection, __pyx_t_1) < 0) __PYX_ERR(0, 2196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_Map__string_List__string);

  /* "picard/types.pyx":2195
 *             yield (ckey.data().decode('UTF-8'), List__string.create(citem))
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def __get_reflection__():
 *         return _types_reflection.get_reflection__Map__string_List__string()
 */
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_6picard_5types_Map__string_List__string, __pyx_n_s_get_reflection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6picard_5types_Map__string_List__string->tp_dict, __pyx_n_s_get_reflection, __pyx_t_2) < 0) __PYX_ERR(0, 2196, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6picard_5types_Map__string_List__string);

  /* "picard/types.pyx":2199
 *         return _types_reflection.get_reflection__Map__string_List__string()
 * 
 * Mapping.register(Map__string_List__string)             # <<<<<<<<<<<<<<
 * 
 * ColumnId = str
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Mapping); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_register); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, ((PyObject *)__pyx_ptype_6picard_5types_Map__string_List__string)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "picard/types.pyx":2201
 * Mapping.register(Map__string_List__string)
 * 
 * ColumnId = str             # <<<<<<<<<<<<<<
 * TableId = str
 * DBId = str
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ColumnId, ((PyObject *)(&PyUnicode_Type))) < 0) __PYX_ERR(0, 2201, __pyx_L1_error)

  /* "picard/types.pyx":2202
 * 
 * ColumnId = str
 * TableId = str             # <<<<<<<<<<<<<<
 * DBId = str
 * Token = int
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TableId, ((PyObject *)(&PyUnicode_Type))) < 0) __PYX_ERR(0, 2202, __pyx_L1_error)

  /* "picard/types.pyx":2203
 * ColumnId = str
 * TableId = str
 * DBId = str             # <<<<<<<<<<<<<<
 * Token = int
 * InputIds = List__i64
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DBId, ((PyObject *)(&PyUnicode_Type))) < 0) __PYX_ERR(0, 2203, __pyx_L1_error)

  /* "picard/types.pyx":2204
 * TableId = str
 * DBId = str
 * Token = int             # <<<<<<<<<<<<<<
 * InputIds = List__i64
 * BatchId = int
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Token, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 2204, __pyx_L1_error)

  /* "picard/types.pyx":2205
 * DBId = str
 * Token = int
 * InputIds = List__i64             # <<<<<<<<<<<<<<
 * BatchId = int
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_InputIds, ((PyObject *)__pyx_ptype_6picard_5types_List__i64)) < 0) __PYX_ERR(0, 2205, __pyx_L1_error)

  /* "picard/types.pyx":2206
 * Token = int
 * InputIds = List__i64
 * BatchId = int             # <<<<<<<<<<<<<<
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BatchId, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 2206, __pyx_L1_error)

  /* "picard/types.pyx":1
 * #             # <<<<<<<<<<<<<<
 * # Autogenerated by Thrift
 * #
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":209
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(5, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__97, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__98, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__99, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__100, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__101, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":316
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":317
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_4[0] = PyThread_allocate_lock();
  __pyx_t_4[1] = PyThread_allocate_lock();
  __pyx_t_4[2] = PyThread_allocate_lock();
  __pyx_t_4[3] = PyThread_allocate_lock();
  __pyx_t_4[4] = PyThread_allocate_lock();
  __pyx_t_4[5] = PyThread_allocate_lock();
  __pyx_t_4[6] = PyThread_allocate_lock();
  __pyx_t_4[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_4, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":549
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(5, 549, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":995
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_2) < 0) __PYX_ERR(5, 995, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_2) < 0) __PYX_ERR(5, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init picard.types", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init picard.types");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* unicode_tailmatch */
static int __Pyx_PyUnicode_TailmatchTuple(PyObject* s, PyObject* substrings,
                                          Py_ssize_t start, Py_ssize_t end, int direction) {
    Py_ssize_t i, count = PyTuple_GET_SIZE(substrings);
    for (i = 0; i < count; i++) {
        Py_ssize_t result;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        result = PyUnicode_Tailmatch(s, PyTuple_GET_ITEM(substrings, i),
                                     start, end, direction);
#else
        PyObject* sub = PySequence_ITEM(substrings, i);
        if (unlikely(!sub)) return -1;
        result = PyUnicode_Tailmatch(s, sub, start, end, direction);
        Py_DECREF(sub);
#endif
        if (result) {
            return (int) result;
        }
    }
    return 0;
}
static int __Pyx_PyUnicode_Tailmatch(PyObject* s, PyObject* substr,
                                     Py_ssize_t start, Py_ssize_t end, int direction) {
    if (unlikely(PyTuple_Check(substr))) {
        return __Pyx_PyUnicode_TailmatchTuple(s, substr, start, end, direction);
    }
    return (int) PyUnicode_Tailmatch(s, substr, start, end, direction);
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = Py_TYPE(iter)->tp_iternext;
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      CYTHON_UNUSED Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind;
    Py_ssize_t i, char_pos;
    void *result_udata;
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely(char_pos + ulength < 0))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + char_pos * result_ukind, udata, (size_t) (ulength * result_ukind));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    result_ulength++;
    value_count++;
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if (PY_VERSION_HEX >= 0x030600B1 && flag == METH_FASTCALL) {
            if (PY_VERSION_HEX >= 0x030700A0) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if (PY_VERSION_HEX >= 0x030700A0 && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* DivInt[Py_ssize_t] */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* DivInt[long] */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyObject *dict) {
    void* ptr;
    PyObject *ob = PyObject_GetItem(dict, __pyx_n_s_pyx_vtable);
    if (!ob)
        goto bad;
#if PY_VERSION_HEX >= 0x02070000
    ptr = PyCapsule_GetPointer(ob, 0);
#else
    ptr = PyCObject_AsVoidPtr(ob);
#endif
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* SetVTable */
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* GetNameInClass */
static PyObject *__Pyx_GetGlobalNameAfterAttributeLookup(PyObject *name) {
    PyObject *result;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result) {
        result = __Pyx_GetGlobalNameAfterAttributeLookup(name);
    }
    return result;
}

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* FromPyCTupleUtility */
static __pyx_ctuple_int__and_int__and_int __pyx_convert__from_py___pyx_ctuple_int__and_int__and_int(PyObject * o) {
    __pyx_ctuple_int__and_int__and_int result;
    if (!PyTuple_Check(o) || PyTuple_GET_SIZE(o) != 3) {
        PyErr_Format(PyExc_TypeError, "Expected %.16s of size %d, got %.200s", "a tuple", 3, Py_TYPE(o)->tp_name);
        goto bad;
    }
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        result.f0 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(o, 0));
        if ((result.f0 == (int)-1) && PyErr_Occurred()) goto bad;
        result.f1 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(o, 1));
        if ((result.f1 == (int)-1) && PyErr_Occurred()) goto bad;
        result.f2 = __Pyx_PyInt_As_int(PyTuple_GET_ITEM(o, 2));
        if ((result.f2 == (int)-1) && PyErr_Occurred()) goto bad;
#else
    {
        PyObject *item;
        item = PySequence_ITEM(o, 0);  if (unlikely(!item)) goto bad;
        result.f0 = __Pyx_PyInt_As_int(item);
        Py_DECREF(item);
        if ((result.f0 == (int)-1) && PyErr_Occurred()) goto bad;
        item = PySequence_ITEM(o, 1);  if (unlikely(!item)) goto bad;
        result.f1 = __Pyx_PyInt_As_int(item);
        Py_DECREF(item);
        if ((result.f1 == (int)-1) && PyErr_Occurred()) goto bad;
        item = PySequence_ITEM(o, 2);  if (unlikely(!item)) goto bad;
        result.f2 = __Pyx_PyInt_As_int(item);
        Py_DECREF(item);
        if ((result.f2 == (int)-1) && PyErr_Occurred()) goto bad;
    }
#endif
    return result;
bad:
    return result;
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


/* MemviewSliceIsContig */
static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int64_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 2 * PyLong_SHIFT) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 3 * PyLong_SHIFT) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) >= 4 * PyLong_SHIFT) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int64_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int64_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int64_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int64_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int64_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* MemviewSliceCopyTemplate */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* MemviewSliceInit */
static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None))
        return;
    if (unlikely(__pyx_get_slice_count(memview) < 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (unlikely(first_time)) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    if (unlikely(__pyx_get_slice_count(memview) <= 0))
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (unlikely(last_time)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* FetchCommonType */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(CYTHON_UNUSED __pyx_CoroutineObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(CYTHON_UNUSED PyObject *gen) {
    const char *msg;
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(CYTHON_UNUSED PyObject *gen, PyObject *value, CYTHON_UNUSED int closing) {
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            assert(f->f_back == NULL);
            #if PY_VERSION_HEX >= 0x030B00A1
            f->f_back = PyThreadState_GetFrame(tstate);
            #else
            Py_XINCREF(tstate->frame);
            f->f_back = tstate->frame;
            #endif
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body((PyObject *) self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(CYTHON_UNUSED PyObject* gen, PyObject *retval) {
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, CYTHON_UNUSED PyObject *arg) {
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = PyObject_CallObject(meth, args);
            } else {
                ret = PyObject_CallFunctionObjArgs(meth, typ, val, tb, NULL);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (Py_REFCNT(self) > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_name;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *name = self->gi_qualname;
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, CYTHON_UNUSED void *context)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, CYTHON_UNUSED void *context)
{
    PyObject *frame = self->gi_frame;
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* VoidPtrImport */
#ifndef __PYX_HAVE_RT_ImportVoidPtr
#define __PYX_HAVE_RT_ImportVoidPtr
static int __Pyx_ImportVoidPtr(PyObject *module, const char *name, void **p, const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, name);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C variable %.200s",
                PyModule_GetName(module), name);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    *p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C variable %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), name, sig, desc);
        goto bad;
    }
    *p = PyCObject_AsVoidPtr(cobj);}
#endif
    if (!(*p))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* FunctionImport */
#ifndef __PYX_HAVE_RT_ImportFunction
#define __PYX_HAVE_RT_ImportFunction
static int __Pyx_ImportFunction(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
#else
    {const char *desc, *s1, *s2;
    desc = (const char *)PyCObject_GetDesc(cobj);
    if (!desc)
        goto bad;
    s1 = desc; s2 = sig;
    while (*s1 != '\0' && *s1 == *s2) { s1++; s2++; }
    if (*s1 != *s2) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, desc);
        goto bad;
    }
    tmp.p = PyCObject_AsVoidPtr(cobj);}
#endif
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
