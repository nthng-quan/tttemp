#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import folly.iobuf as _fbthrift_iobuf
import thrift.py3.types
import thrift.py3.client
import thrift.py3.common
import typing as _typing
from types import TracebackType

import picard.types as _picard_types


_PicardT = _typing.TypeVar('_PicardT', bound='Picard')


class Picard(thrift.py3.client.Client):

    async def registerSQLSchema(
        self,
        dbId: str,
        sqlSchema: _picard_types.SQLSchema,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> None: ...

    async def registerTokenizer(
        self,
        jsonConfig: str,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> None: ...

    async def feed(
        self,
        inputIds: _typing.Sequence[int],
        token: int,
        mode: _picard_types.Mode,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> _picard_types.FeedResult: ...

    async def batchFeed(
        self,
        inputIds: _typing.Sequence[_typing.Sequence[int]],
        topTokens: _typing.Sequence[_typing.Sequence[int]],
        mode: _picard_types.Mode,
        rpc_options: _typing.Optional[thrift.py3.common.RpcOptions]=None
    ) -> _typing.Sequence[_picard_types.BatchFeedResult]: ...

