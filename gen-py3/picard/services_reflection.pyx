#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from thrift.py3.reflection cimport (
  MethodSpec as __MethodSpec,
  ArgumentSpec as __ArgumentSpec,
  NumberType as __NumberType,
)

import folly.iobuf as _fbthrift_iobuf


cimport picard.types as _picard_types


cdef __InterfaceSpec get_reflection__Picard(bint for_clients):
    cdef __InterfaceSpec spec = __InterfaceSpec.create(
        name="Picard",
        annotations={
        },
    )
    spec.add_method(
        __MethodSpec.create(
            name="registerSQLSchema",
            arguments=(
                __ArgumentSpec.create(
                    name="dbId",
                    type=str,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
                __ArgumentSpec.create(
                    name="sqlSchema",
                    type=_picard_types.SQLSchema,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=None,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
                _picard_types.RegisterSQLSchemaException,
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="registerTokenizer",
            arguments=(
                __ArgumentSpec.create(
                    name="jsonConfig",
                    type=str,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=None,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
                _picard_types.RegisterTokenizerException,
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="feed",
            arguments=(
                __ArgumentSpec.create(
                    name="inputIds",
                    type=_picard_types.List__i64,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
                __ArgumentSpec.create(
                    name="token",
                    type=int,
                    kind=__NumberType.I64,
                    annotations={
                    },
                ),
                __ArgumentSpec.create(
                    name="mode",
                    type=_picard_types.Mode,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=_picard_types.FeedResult,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
                _picard_types.FeedException,
            ),
            annotations={
            },
        )
    )
    spec.add_method(
        __MethodSpec.create(
            name="batchFeed",
            arguments=(
                __ArgumentSpec.create(
                    name="inputIds",
                    type=_picard_types.List__List__i64,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
                __ArgumentSpec.create(
                    name="topTokens",
                    type=_picard_types.List__List__i64,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
                __ArgumentSpec.create(
                    name="mode",
                    type=_picard_types.Mode,
                    kind=__NumberType.NOT_A_NUMBER,
                    annotations={
                    },
                ),
            ),
            result=_picard_types.List__BatchFeedResult,
            result_kind=__NumberType.NOT_A_NUMBER,
            exceptions=(
                _picard_types.FeedException,
            ),
            annotations={
            },
        )
    )
    return spec
