#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

cimport cython
from cpython.version cimport PY_VERSION_HEX
from libc.stdint cimport (
    int8_t as cint8_t,
    int16_t as cint16_t,
    int32_t as cint32_t,
    int64_t as cint64_t,
)
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from cpython cimport bool as pbool
from libcpp.vector cimport vector
from libcpp.set cimport set as cset
from libcpp.map cimport map as cmap
from libcpp.utility cimport move as cmove
from cython.operator cimport dereference as deref
from cpython.ref cimport PyObject
from thrift.py3.exceptions cimport (
    cTApplicationException,
    ApplicationError as __ApplicationError,
    cTApplicationExceptionType__UNKNOWN)
from thrift.py3.server cimport ServiceInterface, RequestContext, Cpp2RequestContext
from thrift.py3.server import RequestContext, pass_context
from folly cimport (
  cFollyPromise,
  cFollyUnit,
  c_unit,
)
from thrift.py3.common cimport (
    cThriftServiceContext as __fbthrift_cThriftServiceContext,
    cThriftMetadata as __fbthrift_cThriftMetadata,
    ServiceMetadata,
    extractMetadataFromServiceContext,
    MetadataBox as __MetadataBox,
)

if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
    from thrift.py3.server cimport THRIFT_REQUEST_CONTEXT as __THRIFT_REQUEST_CONTEXT

cimport folly.futures
from folly.executor cimport get_executor
cimport folly.iobuf as _fbthrift_iobuf
import folly.iobuf as _fbthrift_iobuf
from folly.iobuf cimport move as move_iobuf
from folly.memory cimport to_shared_ptr as __to_shared_ptr

cimport picard.types as _picard_types
import picard.types as _picard_types

cimport picard.services_reflection as _services_reflection

import asyncio
import functools
import sys
import traceback
import types as _py_types

from picard.services_wrapper cimport cPicardInterface



@cython.auto_pickle(False)
cdef class Promise__picard_types_cFeedResult:
    cdef cFollyPromise[unique_ptr[_picard_types.cFeedResult]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[_picard_types.cFeedResult]] cPromise):
        cdef Promise__picard_types_cFeedResult inst = Promise__picard_types_cFeedResult.__new__(Promise__picard_types_cFeedResult)
        inst.cPromise = cmove(cPromise)
        return inst

@cython.auto_pickle(False)
cdef class Promise_vector___picard_types_cBatchFeedResult:
    cdef cFollyPromise[unique_ptr[vector[_picard_types.cBatchFeedResult]]] cPromise

    @staticmethod
    cdef create(cFollyPromise[unique_ptr[vector[_picard_types.cBatchFeedResult]]] cPromise):
        cdef Promise_vector___picard_types_cBatchFeedResult inst = Promise_vector___picard_types_cBatchFeedResult.__new__(Promise_vector___picard_types_cBatchFeedResult)
        inst.cPromise = cmove(cPromise)
        return inst

@cython.auto_pickle(False)
cdef class Promise_cFollyUnit:
    cdef cFollyPromise[cFollyUnit] cPromise

    @staticmethod
    cdef create(cFollyPromise[cFollyUnit] cPromise):
        cdef Promise_cFollyUnit inst = Promise_cFollyUnit.__new__(Promise_cFollyUnit)
        inst.cPromise = cmove(cPromise)
        return inst

cdef object _Picard_annotations = _py_types.MappingProxyType({
})


@cython.auto_pickle(False)
cdef class PicardInterface(
    ServiceInterface
):
    annotations = _Picard_annotations

    def __cinit__(self):
        self._cpp_obj = cPicardInterface(
            <PyObject *> self,
            get_executor()
        )

    @staticmethod
    def pass_context_registerSQLSchema(fn):
        return pass_context(fn)

    async def registerSQLSchema(
            self,
            dbId,
            sqlSchema):
        raise NotImplementedError("async def registerSQLSchema is not implemented")

    @staticmethod
    def pass_context_registerTokenizer(fn):
        return pass_context(fn)

    async def registerTokenizer(
            self,
            jsonConfig):
        raise NotImplementedError("async def registerTokenizer is not implemented")

    @staticmethod
    def pass_context_feed(fn):
        return pass_context(fn)

    async def feed(
            self,
            inputIds,
            token,
            mode):
        raise NotImplementedError("async def feed is not implemented")

    @staticmethod
    def pass_context_batchFeed(fn):
        return pass_context(fn)

    async def batchFeed(
            self,
            inputIds,
            topTokens,
            mode):
        raise NotImplementedError("async def batchFeed is not implemented")

    @classmethod
    def __get_reflection__(cls):
        return _services_reflection.get_reflection__Picard(for_clients=False)

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        cdef __fbthrift_cThriftServiceContext context
        ServiceMetadata[_services_reflection.cPicardSvIf].gen(meta, context)
        extractMetadataFromServiceContext(meta, context)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "picard.Picard"



cdef api void call_cy_Picard_registerSQLSchema(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cFollyUnit] cPromise,
    unique_ptr[string] dbId,
    unique_ptr[_picard_types.cSQLSchema] sqlSchema
):
    cdef Promise_cFollyUnit __promise = Promise_cFollyUnit.create(cmove(cPromise))
    arg_dbId = (deref(dbId)).data().decode('UTF-8')
    arg_sqlSchema = _picard_types.SQLSchema.create(shared_ptr[_picard_types.cSQLSchema](sqlSchema.release()))
    __context = RequestContext.create(ctx)
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __context_token = __THRIFT_REQUEST_CONTEXT.set(__context)
        __context = None
    asyncio.get_event_loop().create_task(
        Picard_registerSQLSchema_coro(
            self,
            __context,
            __promise,
            arg_dbId,
            arg_sqlSchema
        )
    )
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __THRIFT_REQUEST_CONTEXT.reset(__context_token)

async def Picard_registerSQLSchema_coro(
    object self,
    object ctx,
    Promise_cFollyUnit promise,
    dbId,
    sqlSchema
):
    try:
        if ctx and getattr(self.registerSQLSchema, "pass_context", False):
            result = await self.registerSQLSchema(ctx,
                      dbId,
                      sqlSchema)
        else:
            result = await self.registerSQLSchema(
                      dbId,
                      sqlSchema)
    except _picard_types.RegisterSQLSchemaException as ex:
        promise.cPromise.setException(deref((<_picard_types.RegisterSQLSchemaException> ex)._cpp_obj))
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler registerSQLSchema:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_Picard_registerTokenizer(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[cFollyUnit] cPromise,
    unique_ptr[string] jsonConfig
):
    cdef Promise_cFollyUnit __promise = Promise_cFollyUnit.create(cmove(cPromise))
    arg_jsonConfig = (deref(jsonConfig)).data().decode('UTF-8')
    __context = RequestContext.create(ctx)
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __context_token = __THRIFT_REQUEST_CONTEXT.set(__context)
        __context = None
    asyncio.get_event_loop().create_task(
        Picard_registerTokenizer_coro(
            self,
            __context,
            __promise,
            arg_jsonConfig
        )
    )
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __THRIFT_REQUEST_CONTEXT.reset(__context_token)

async def Picard_registerTokenizer_coro(
    object self,
    object ctx,
    Promise_cFollyUnit promise,
    jsonConfig
):
    try:
        if ctx and getattr(self.registerTokenizer, "pass_context", False):
            result = await self.registerTokenizer(ctx,
                      jsonConfig)
        else:
            result = await self.registerTokenizer(
                      jsonConfig)
    except _picard_types.RegisterTokenizerException as ex:
        promise.cPromise.setException(deref((<_picard_types.RegisterTokenizerException> ex)._cpp_obj))
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler registerTokenizer:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(c_unit)

cdef api void call_cy_Picard_feed(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[_picard_types.cFeedResult]] cPromise,
    unique_ptr[vector[cint64_t]] inputIds,
    cint64_t token,
    _picard_types.cMode mode
):
    cdef Promise__picard_types_cFeedResult __promise = Promise__picard_types_cFeedResult.create(cmove(cPromise))
    arg_inputIds = _picard_types.List__i64.create(__to_shared_ptr(cmove(inputIds)))
    arg_token = token
    arg_mode = _picard_types.Mode(<int> mode)
    __context = RequestContext.create(ctx)
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __context_token = __THRIFT_REQUEST_CONTEXT.set(__context)
        __context = None
    asyncio.get_event_loop().create_task(
        Picard_feed_coro(
            self,
            __context,
            __promise,
            arg_inputIds,
            arg_token,
            arg_mode
        )
    )
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __THRIFT_REQUEST_CONTEXT.reset(__context_token)

async def Picard_feed_coro(
    object self,
    object ctx,
    Promise__picard_types_cFeedResult promise,
    inputIds,
    token,
    mode
):
    try:
        if ctx and getattr(self.feed, "pass_context", False):
            result = await self.feed(ctx,
                      inputIds,
                      token,
                      mode)
        else:
            result = await self.feed(
                      inputIds,
                      token,
                      mode)
    except _picard_types.FeedException as ex:
        promise.cPromise.setException(deref((<_picard_types.FeedException> ex)._cpp_obj))
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler feed:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[_picard_types.cFeedResult](deref((<_picard_types.FeedResult?> result)._cpp_obj)))

cdef api void call_cy_Picard_batchFeed(
    object self,
    Cpp2RequestContext* ctx,
    cFollyPromise[unique_ptr[vector[_picard_types.cBatchFeedResult]]] cPromise,
    unique_ptr[vector[vector[cint64_t]]] inputIds,
    unique_ptr[vector[vector[cint64_t]]] topTokens,
    _picard_types.cMode mode
):
    cdef Promise_vector___picard_types_cBatchFeedResult __promise = Promise_vector___picard_types_cBatchFeedResult.create(cmove(cPromise))
    arg_inputIds = _picard_types.List__List__i64.create(__to_shared_ptr(cmove(inputIds)))
    arg_topTokens = _picard_types.List__List__i64.create(__to_shared_ptr(cmove(topTokens)))
    arg_mode = _picard_types.Mode(<int> mode)
    __context = RequestContext.create(ctx)
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __context_token = __THRIFT_REQUEST_CONTEXT.set(__context)
        __context = None
    asyncio.get_event_loop().create_task(
        Picard_batchFeed_coro(
            self,
            __context,
            __promise,
            arg_inputIds,
            arg_topTokens,
            arg_mode
        )
    )
    if PY_VERSION_HEX >= 0x030702F0:  # 3.7.2 Final
        __THRIFT_REQUEST_CONTEXT.reset(__context_token)

async def Picard_batchFeed_coro(
    object self,
    object ctx,
    Promise_vector___picard_types_cBatchFeedResult promise,
    inputIds,
    topTokens,
    mode
):
    try:
        if ctx and getattr(self.batchFeed, "pass_context", False):
            result = await self.batchFeed(ctx,
                      inputIds,
                      topTokens,
                      mode)
        else:
            result = await self.batchFeed(
                      inputIds,
                      topTokens,
                      mode)
        result = _picard_types.List__BatchFeedResult(result)
    except _picard_types.FeedException as ex:
        promise.cPromise.setException(deref((<_picard_types.FeedException> ex)._cpp_obj))
    except __ApplicationError as ex:
        # If the handler raised an ApplicationError convert it to a C++ one
        promise.cPromise.setException(cTApplicationException(
            ex.type.value, ex.message.encode('UTF-8')
        ))
    except Exception as ex:
        print(
            "Unexpected error in service handler batchFeed:",
            file=sys.stderr)
        traceback.print_exc()
        promise.cPromise.setException(cTApplicationException(
            cTApplicationExceptionType__UNKNOWN, repr(ex).encode('UTF-8')
        ))
    else:
        promise.cPromise.setValue(make_unique[vector[_picard_types.cBatchFeedResult]](deref((<_picard_types.List__BatchFeedResult?> result)._cpp_obj)))

